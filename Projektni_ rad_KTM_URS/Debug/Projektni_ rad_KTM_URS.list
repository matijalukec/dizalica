
Projektni_ rad_KTM_URS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a50  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ac  08009c20  08009c20  0000ac20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3cc  0800a3cc  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3cc  0800a3cc  0000b3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3d4  0800a3d4  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3d4  0800a3d4  0000b3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a3d8  0800a3d8  0000b3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a3dc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  200001d4  0800a5b0  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  0800a5b0  0000c42c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d90  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027ad  00000000  00000000  0001df94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  00020748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd9  00000000  00000000  000217a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023998  00000000  00000000  00022479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001529a  00000000  00000000  00045e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5d4a  00000000  00000000  0005b0ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130df5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d8c  00000000  00000000  00130e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  00136bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009c08 	.word	0x08009c08

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08009c08 	.word	0x08009c08

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7e:	f107 030c 	add.w	r3, r7, #12
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	4b2b      	ldr	r3, [pc, #172]	@ (8001040 <MX_GPIO_Init+0xc8>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	4a2a      	ldr	r2, [pc, #168]	@ (8001040 <MX_GPIO_Init+0xc8>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9e:	4b28      	ldr	r3, [pc, #160]	@ (8001040 <MX_GPIO_Init+0xc8>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	4b24      	ldr	r3, [pc, #144]	@ (8001040 <MX_GPIO_Init+0xc8>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	4a23      	ldr	r2, [pc, #140]	@ (8001040 <MX_GPIO_Init+0xc8>)
 8000fb4:	f043 0304 	orr.w	r3, r3, #4
 8000fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fba:	4b21      	ldr	r3, [pc, #132]	@ (8001040 <MX_GPIO_Init+0xc8>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	603b      	str	r3, [r7, #0]
 8000fca:	4b1d      	ldr	r3, [pc, #116]	@ (8001040 <MX_GPIO_Init+0xc8>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	4a1c      	ldr	r2, [pc, #112]	@ (8001040 <MX_GPIO_Init+0xc8>)
 8000fd0:	f043 0302 	orr.w	r3, r3, #2
 8000fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <MX_GPIO_Init+0xc8>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 5151 	mov.w	r1, #13376	@ 0x3440
 8000fe8:	4816      	ldr	r0, [pc, #88]	@ (8001044 <MX_GPIO_Init+0xcc>)
 8000fea:	f001 feab 	bl	8002d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC5 PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000fee:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8000ff2:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9; // prekidni pinovi za tipkala
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; // prekid nastaje kada padne signal s 1 na 0
 8000ff4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ff8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP; // pinovi su s unutarnjim otpornicima spojeni na 3.3 V
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	4619      	mov	r1, r3
 8001004:	4810      	ldr	r0, [pc, #64]	@ (8001048 <MX_GPIO_Init+0xd0>)
 8001006:	f001 fcf1 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB13 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6; // pinovi za DM556 uključivanje
 800100a:	f44f 5351 	mov.w	r3, #13376	@ 0x3440
 800100e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // pinovi šalju izlazni signal preko Open Drain moda
 8001010:	2311      	movs	r3, #17
 8001012:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL; // koriste se vanjski otpornici koji su spojeni na 5 V
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // niska frekvencija pinova
 8001018:	2300      	movs	r3, #0
 800101a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	4619      	mov	r1, r3
 8001022:	4808      	ldr	r0, [pc, #32]	@ (8001044 <MX_GPIO_Init+0xcc>)
 8001024:	f001 fce2 	bl	80029ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8001028:	2200      	movs	r2, #0
 800102a:	2103      	movs	r1, #3
 800102c:	2017      	movs	r0, #23
 800102e:	f001 fca6 	bl	800297e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001032:	2017      	movs	r0, #23
 8001034:	f001 fcbf 	bl	80029b6 <HAL_NVIC_EnableIRQ>

}
 8001038:	bf00      	nop
 800103a:	3720      	adds	r7, #32
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40023800 	.word	0x40023800
 8001044:	40020400 	.word	0x40020400
 8001048:	40020800 	.word	0x40020800

0800104c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1; // koristi I2C1
 8001050:	4b12      	ldr	r3, [pc, #72]	@ (800109c <MX_I2C1_Init+0x50>)
 8001052:	4a13      	ldr	r2, [pc, #76]	@ (80010a0 <MX_I2C1_Init+0x54>)
 8001054:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000; // SCL brzina je 100000
 8001056:	4b11      	ldr	r3, [pc, #68]	@ (800109c <MX_I2C1_Init+0x50>)
 8001058:	4a12      	ldr	r2, [pc, #72]	@ (80010a4 <MX_I2C1_Init+0x58>)
 800105a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800105c:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <MX_I2C1_Init+0x50>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001062:	4b0e      	ldr	r3, [pc, #56]	@ (800109c <MX_I2C1_Init+0x50>)
 8001064:	2200      	movs	r2, #0
 8001066:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT; // 7-bitne adrese
 8001068:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <MX_I2C1_Init+0x50>)
 800106a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800106e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001070:	4b0a      	ldr	r3, [pc, #40]	@ (800109c <MX_I2C1_Init+0x50>)
 8001072:	2200      	movs	r2, #0
 8001074:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001076:	4b09      	ldr	r3, [pc, #36]	@ (800109c <MX_I2C1_Init+0x50>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800107c:	4b07      	ldr	r3, [pc, #28]	@ (800109c <MX_I2C1_Init+0x50>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001082:	4b06      	ldr	r3, [pc, #24]	@ (800109c <MX_I2C1_Init+0x50>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001088:	4804      	ldr	r0, [pc, #16]	@ (800109c <MX_I2C1_Init+0x50>)
 800108a:	f001 fe8d 	bl	8002da8 <HAL_I2C_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001094:	f001 f8b4 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	200001f0 	.word	0x200001f0
 80010a0:	40005400 	.word	0x40005400
 80010a4:	000186a0 	.word	0x000186a0

080010a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	@ 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a19      	ldr	r2, [pc, #100]	@ (800112c <HAL_I2C_MspInit+0x84>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d12c      	bne.n	8001124 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <HAL_I2C_MspInit+0x88>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	4a17      	ldr	r2, [pc, #92]	@ (8001130 <HAL_I2C_MspInit+0x88>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <HAL_I2C_MspInit+0x88>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ec:	2312      	movs	r3, #18
 80010ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010f8:	2304      	movs	r3, #4
 80010fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	480c      	ldr	r0, [pc, #48]	@ (8001134 <HAL_I2C_MspInit+0x8c>)
 8001104:	f001 fc72 	bl	80029ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <HAL_I2C_MspInit+0x88>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001110:	4a07      	ldr	r2, [pc, #28]	@ (8001130 <HAL_I2C_MspInit+0x88>)
 8001112:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001116:	6413      	str	r3, [r2, #64]	@ 0x40
 8001118:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <HAL_I2C_MspInit+0x88>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001124:	bf00      	nop
 8001126:	3728      	adds	r7, #40	@ 0x28
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40005400 	.word	0x40005400
 8001130:	40023800 	.word	0x40023800
 8001134:	40020400 	.word	0x40020400

08001138 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif
PUTCHAR_PROTOTYPE	// slanje informacija preko USART2
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8001140:	1d39      	adds	r1, r7, #4
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	2201      	movs	r2, #1
 8001148:	4803      	ldr	r0, [pc, #12]	@ (8001158 <__io_putchar+0x20>)
 800114a:	f003 fbc1 	bl	80048d0 <HAL_UART_Transmit>
	return ch;
 800114e:	687b      	ldr	r3, [r7, #4]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000294 	.word	0x20000294

0800115c <__io_getchar>:
GETCHAR_PROTOTYPE	// prihvaćanje informacija preko USART2
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	71fb      	strb	r3, [r7, #7]
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8001166:	2300      	movs	r3, #0
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	4b0a      	ldr	r3, [pc, #40]	@ (8001194 <__io_getchar+0x38>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	603b      	str	r3, [r7, #0]
 8001172:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <__io_getchar+0x38>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	683b      	ldr	r3, [r7, #0]
	HAL_UART_Receive(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 800117c:	1df9      	adds	r1, r7, #7
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	2201      	movs	r2, #1
 8001184:	4803      	ldr	r0, [pc, #12]	@ (8001194 <__io_getchar+0x38>)
 8001186:	f003 fc2e 	bl	80049e6 <HAL_UART_Receive>
	return ch;
 800118a:	79fb      	ldrb	r3, [r7, #7]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000294 	.word	0x20000294

08001198 <broj_u_string>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void broj_u_string(short broj, char *string, char tren_ili_cilj, char x_ili_z)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6039      	str	r1, [r7, #0]
 80011a0:	4611      	mov	r1, r2
 80011a2:	461a      	mov	r2, r3
 80011a4:	4603      	mov	r3, r0
 80011a6:	80fb      	strh	r3, [r7, #6]
 80011a8:	460b      	mov	r3, r1
 80011aa:	717b      	strb	r3, [r7, #5]
 80011ac:	4613      	mov	r3, r2
 80011ae:	713b      	strb	r3, [r7, #4]
	if(!tren_ili_cilj)	// određuje je li se ispisuje tekst za trenutnu ili ciljanu koordinatu
 80011b0:	797b      	ldrb	r3, [r7, #5]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d130      	bne.n	8001218 <broj_u_string+0x80>
	{
		string[0] = 'T';
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	2254      	movs	r2, #84	@ 0x54
 80011ba:	701a      	strb	r2, [r3, #0]
		string[1] = 'R';
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	3301      	adds	r3, #1
 80011c0:	2252      	movs	r2, #82	@ 0x52
 80011c2:	701a      	strb	r2, [r3, #0]
		string[2] = 'E';
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	3302      	adds	r3, #2
 80011c8:	2245      	movs	r2, #69	@ 0x45
 80011ca:	701a      	strb	r2, [r3, #0]
		string[3] = 'N';
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	3303      	adds	r3, #3
 80011d0:	224e      	movs	r2, #78	@ 0x4e
 80011d2:	701a      	strb	r2, [r3, #0]
		string[4] = 'U';
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	3304      	adds	r3, #4
 80011d8:	2255      	movs	r2, #85	@ 0x55
 80011da:	701a      	strb	r2, [r3, #0]
		string[5] = 'T';
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	3305      	adds	r3, #5
 80011e0:	2254      	movs	r2, #84	@ 0x54
 80011e2:	701a      	strb	r2, [r3, #0]
		string[6] = 'N';
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	3306      	adds	r3, #6
 80011e8:	224e      	movs	r2, #78	@ 0x4e
 80011ea:	701a      	strb	r2, [r3, #0]
		string[7] = 'I';
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	3307      	adds	r3, #7
 80011f0:	2249      	movs	r2, #73	@ 0x49
 80011f2:	701a      	strb	r2, [r3, #0]
		string[8] = ' ';
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	3308      	adds	r3, #8
 80011f8:	2220      	movs	r2, #32
 80011fa:	701a      	strb	r2, [r3, #0]
		string[9] = (x_ili_z) ? 'Z' : 'X';	// određuje ispisuje li se za x ili z os
 80011fc:	793b      	ldrb	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <broj_u_string+0x6e>
 8001202:	225a      	movs	r2, #90	@ 0x5a
 8001204:	e000      	b.n	8001208 <broj_u_string+0x70>
 8001206:	2258      	movs	r2, #88	@ 0x58
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	3309      	adds	r3, #9
 800120c:	701a      	strb	r2, [r3, #0]
		string[10] = ':';
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	330a      	adds	r3, #10
 8001212:	223a      	movs	r2, #58	@ 0x3a
 8001214:	701a      	strb	r2, [r3, #0]
 8001216:	e02f      	b.n	8001278 <broj_u_string+0xe0>
	}
	else
	{
		string[0] = 'C';
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	2243      	movs	r2, #67	@ 0x43
 800121c:	701a      	strb	r2, [r3, #0]
		string[1] = 'I';
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	2249      	movs	r2, #73	@ 0x49
 8001224:	701a      	strb	r2, [r3, #0]
		string[2] = 'L';
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	3302      	adds	r3, #2
 800122a:	224c      	movs	r2, #76	@ 0x4c
 800122c:	701a      	strb	r2, [r3, #0]
		string[3] = 'J';
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	3303      	adds	r3, #3
 8001232:	224a      	movs	r2, #74	@ 0x4a
 8001234:	701a      	strb	r2, [r3, #0]
		string[4] = 'A';
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	3304      	adds	r3, #4
 800123a:	2241      	movs	r2, #65	@ 0x41
 800123c:	701a      	strb	r2, [r3, #0]
		string[5] = 'N';
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	3305      	adds	r3, #5
 8001242:	224e      	movs	r2, #78	@ 0x4e
 8001244:	701a      	strb	r2, [r3, #0]
		string[6] = 'I';
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	3306      	adds	r3, #6
 800124a:	2249      	movs	r2, #73	@ 0x49
 800124c:	701a      	strb	r2, [r3, #0]
		string[7] = ' ';
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	3307      	adds	r3, #7
 8001252:	2220      	movs	r2, #32
 8001254:	701a      	strb	r2, [r3, #0]
		string[8] = (x_ili_z) ? 'Z' : 'X';
 8001256:	793b      	ldrb	r3, [r7, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <broj_u_string+0xc8>
 800125c:	225a      	movs	r2, #90	@ 0x5a
 800125e:	e000      	b.n	8001262 <broj_u_string+0xca>
 8001260:	2258      	movs	r2, #88	@ 0x58
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	3308      	adds	r3, #8
 8001266:	701a      	strb	r2, [r3, #0]
		string[9] = ':';
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	3309      	adds	r3, #9
 800126c:	223a      	movs	r2, #58	@ 0x3a
 800126e:	701a      	strb	r2, [r3, #0]
		string[10] = ' ';
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	330a      	adds	r3, #10
 8001274:	2220      	movs	r2, #32
 8001276:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 11; i < 14; i++)	// ispisuje razmake u sredini
 8001278:	230b      	movs	r3, #11
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	e007      	b.n	800128e <broj_u_string+0xf6>
	{
		string[i] = ' ';
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	4413      	add	r3, r2
 8001284:	2220      	movs	r2, #32
 8001286:	701a      	strb	r2, [r3, #0]
	for(int i = 11; i < 14; i++)	// ispisuje razmake u sredini
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	3301      	adds	r3, #1
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2b0d      	cmp	r3, #13
 8001292:	ddf4      	ble.n	800127e <broj_u_string+0xe6>
	}

	for(int i = 16; i >= 14; i--)	// pretvara brojeve u ASCII znakove i sprema ih u string
 8001294:	2310      	movs	r3, #16
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	e020      	b.n	80012dc <broj_u_string+0x144>
	{
		string[i] = (broj%10) + '0';
 800129a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800129e:	4b1a      	ldr	r3, [pc, #104]	@ (8001308 <broj_u_string+0x170>)
 80012a0:	fb83 1302 	smull	r1, r3, r3, r2
 80012a4:	1099      	asrs	r1, r3, #2
 80012a6:	17d3      	asrs	r3, r2, #31
 80012a8:	1ac9      	subs	r1, r1, r3
 80012aa:	460b      	mov	r3, r1
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	440b      	add	r3, r1
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	b21b      	sxth	r3, r3
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	6839      	ldr	r1, [r7, #0]
 80012bc:	440b      	add	r3, r1
 80012be:	3230      	adds	r2, #48	@ 0x30
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	701a      	strb	r2, [r3, #0]
		broj /= 10;
 80012c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c8:	4a0f      	ldr	r2, [pc, #60]	@ (8001308 <broj_u_string+0x170>)
 80012ca:	fb82 1203 	smull	r1, r2, r2, r3
 80012ce:	1092      	asrs	r2, r2, #2
 80012d0:	17db      	asrs	r3, r3, #31
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	80fb      	strh	r3, [r7, #6]
	for(int i = 16; i >= 14; i--)	// pretvara brojeve u ASCII znakove i sprema ih u string
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	3b01      	subs	r3, #1
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	2b0d      	cmp	r3, #13
 80012e0:	dcdb      	bgt.n	800129a <broj_u_string+0x102>
	}

	string[17] = ' ';	// dodaje mm na kraju stringa
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	3311      	adds	r3, #17
 80012e6:	2220      	movs	r2, #32
 80012e8:	701a      	strb	r2, [r3, #0]
	string[18] = 'm';
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	3312      	adds	r3, #18
 80012ee:	226d      	movs	r2, #109	@ 0x6d
 80012f0:	701a      	strb	r2, [r3, #0]
	string[19] = 'm';
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	3313      	adds	r3, #19
 80012f6:	226d      	movs	r2, #109	@ 0x6d
 80012f8:	701a      	strb	r2, [r3, #0]
}
 80012fa:	bf00      	nop
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	66666667 	.word	0x66666667

0800130c <lcd_naredba>:

void lcd_naredba(char podatak)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af02      	add	r7, sp, #8
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
	unsigned char podaci[4], hi, lo; // pomocne varijable za slanje naredbi na LCD

	hi = podatak & 0xF0;	// podjela bajta naredbe na nibbleove
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	f023 030f 	bic.w	r3, r3, #15
 800131c:	73fb      	strb	r3, [r7, #15]
	lo = (podatak << 4) & 0xF0;
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	011b      	lsls	r3, r3, #4
 8001322:	73bb      	strb	r3, [r7, #14]

	podaci[0] = hi | 0x0C;	// D7, D6, D5, D4, LED = 1, E = 1, R/!W = 0, RS = 0
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	f043 030c 	orr.w	r3, r3, #12
 800132a:	b2db      	uxtb	r3, r3
 800132c:	723b      	strb	r3, [r7, #8]
	podaci[1] = hi | 0x08;	// D7, D6, D5, D4, LED = 1, E = 0, R/!W = 0, RS = 0
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	f043 0308 	orr.w	r3, r3, #8
 8001334:	b2db      	uxtb	r3, r3
 8001336:	727b      	strb	r3, [r7, #9]
	podaci[2] = lo | 0x0C;	// D3, D2, D1, D0, LED = 1, E = 1, R/!W = 0, RS = 0
 8001338:	7bbb      	ldrb	r3, [r7, #14]
 800133a:	f043 030c 	orr.w	r3, r3, #12
 800133e:	b2db      	uxtb	r3, r3
 8001340:	72bb      	strb	r3, [r7, #10]
	podaci[3] = lo | 0x08;	// D3, D2, D1, D0, LED = 1, E = 0, R/!W = 0, RS = 0
 8001342:	7bbb      	ldrb	r3, [r7, #14]
 8001344:	f043 0308 	orr.w	r3, r3, #8
 8001348:	b2db      	uxtb	r3, r3
 800134a:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, ADRESA<<1, podaci, 4, 100); // slanje naredbe na LCD
 800134c:	f107 0208 	add.w	r2, r7, #8
 8001350:	2364      	movs	r3, #100	@ 0x64
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	2304      	movs	r3, #4
 8001356:	214e      	movs	r1, #78	@ 0x4e
 8001358:	4803      	ldr	r0, [pc, #12]	@ (8001368 <lcd_naredba+0x5c>)
 800135a:	f001 fe69 	bl	8003030 <HAL_I2C_Master_Transmit>
}
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200001f0 	.word	0x200001f0

0800136c <lcd_podatak>:

void lcd_podatak(char podatak)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af02      	add	r7, sp, #8
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
	unsigned char podaci[4], hi, lo; // pomocne varijable za slanje podatka na LCD

	hi = podatak & 0xF0;	// podjela bajta podatka na nibbleove
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	f023 030f 	bic.w	r3, r3, #15
 800137c:	73fb      	strb	r3, [r7, #15]
	lo = (podatak << 4) & 0xF0;
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	011b      	lsls	r3, r3, #4
 8001382:	73bb      	strb	r3, [r7, #14]

	podaci[0] = hi | 0x0D;	// D7, D6, D5, D4, LED = 1, E = 1, R/!W = 0, RS = 1
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	f043 030d 	orr.w	r3, r3, #13
 800138a:	b2db      	uxtb	r3, r3
 800138c:	723b      	strb	r3, [r7, #8]
	podaci[1] = hi | 0x09;	// D7, D6, D5, D4, LED = 1, E = 0, R/!W = 0, RS = 1
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	f043 0309 	orr.w	r3, r3, #9
 8001394:	b2db      	uxtb	r3, r3
 8001396:	727b      	strb	r3, [r7, #9]
	podaci[2] = lo | 0x0D;	// D3, D2, D1, D0, LED = 1, E = 1, R/!W = 0, RS = 1
 8001398:	7bbb      	ldrb	r3, [r7, #14]
 800139a:	f043 030d 	orr.w	r3, r3, #13
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	72bb      	strb	r3, [r7, #10]
	podaci[3] = lo | 0x09;	// D3, D2, D1, D0, LED = 1, E = 0, R/!W = 0, RS = 1
 80013a2:	7bbb      	ldrb	r3, [r7, #14]
 80013a4:	f043 0309 	orr.w	r3, r3, #9
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, ADRESA<<1, podaci, 4, 100);	// slanje podatka na LCD
 80013ac:	f107 0208 	add.w	r2, r7, #8
 80013b0:	2364      	movs	r3, #100	@ 0x64
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	2304      	movs	r3, #4
 80013b6:	214e      	movs	r1, #78	@ 0x4e
 80013b8:	4803      	ldr	r0, [pc, #12]	@ (80013c8 <lcd_podatak+0x5c>)
 80013ba:	f001 fe39 	bl	8003030 <HAL_I2C_Master_Transmit>
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200001f0 	.word	0x200001f0

080013cc <lcd_string>:

void lcd_string(char podatak[20], uint8_t red)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	70fb      	strb	r3, [r7, #3]
	switch (red){	// određuje u koji red treba doći
 80013d8:	78fb      	ldrb	r3, [r7, #3]
 80013da:	3b01      	subs	r3, #1
 80013dc:	2b03      	cmp	r3, #3
 80013de:	d81b      	bhi.n	8001418 <lcd_string+0x4c>
 80013e0:	a201      	add	r2, pc, #4	@ (adr r2, 80013e8 <lcd_string+0x1c>)
 80013e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e6:	bf00      	nop
 80013e8:	080013f9 	.word	0x080013f9
 80013ec:	08001401 	.word	0x08001401
 80013f0:	08001409 	.word	0x08001409
 80013f4:	08001411 	.word	0x08001411
	case 1: lcd_naredba(PRVA_L); break;
 80013f8:	2080      	movs	r0, #128	@ 0x80
 80013fa:	f7ff ff87 	bl	800130c <lcd_naredba>
 80013fe:	e00f      	b.n	8001420 <lcd_string+0x54>
	case 2: lcd_naredba(DRUGA_L); break;
 8001400:	20c0      	movs	r0, #192	@ 0xc0
 8001402:	f7ff ff83 	bl	800130c <lcd_naredba>
 8001406:	e00b      	b.n	8001420 <lcd_string+0x54>
	case 3: lcd_naredba(TRECA_L); break;
 8001408:	2094      	movs	r0, #148	@ 0x94
 800140a:	f7ff ff7f 	bl	800130c <lcd_naredba>
 800140e:	e007      	b.n	8001420 <lcd_string+0x54>
	case 4: lcd_naredba(CETVR_L); break;
 8001410:	20d4      	movs	r0, #212	@ 0xd4
 8001412:	f7ff ff7b 	bl	800130c <lcd_naredba>
 8001416:	e003      	b.n	8001420 <lcd_string+0x54>
	default: lcd_naredba(PRVA_L); break;
 8001418:	2080      	movs	r0, #128	@ 0x80
 800141a:	f7ff ff77 	bl	800130c <lcd_naredba>
 800141e:	bf00      	nop
	}

	for(int i = 0; i < 20; i++){	// šalje svaki znak stringa na LCD
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	e009      	b.n	800143a <lcd_string+0x6e>
		lcd_podatak(podatak[i]);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	4413      	add	r3, r2
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff ff9c 	bl	800136c <lcd_podatak>
	for(int i = 0; i < 20; i++){	// šalje svaki znak stringa na LCD
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	3301      	adds	r3, #1
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2b13      	cmp	r3, #19
 800143e:	ddf2      	ble.n	8001426 <lcd_string+0x5a>
	}

	HAL_Delay(5);
 8001440:	2005      	movs	r0, #5
 8001442:	f001 f99d 	bl	8002780 <HAL_Delay>
}
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop

08001450 <nema23_korak_1_puls>:

void nema23_korak_1_puls(char smjer) // 0.9 stupnja na motoru, 0.09 stupnja na reduktoru
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, SMJER, smjer);	// određuje smjer motora
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	461a      	mov	r2, r3
 800145e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001462:	480f      	ldr	r0, [pc, #60]	@ (80014a0 <nema23_korak_1_puls+0x50>)
 8001464:	f001 fc6e 	bl	8002d44 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001468:	2001      	movs	r0, #1
 800146a:	f001 f989 	bl	8002780 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, PULS, 0);	// daje impuls upravljaču motora
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001474:	480a      	ldr	r0, [pc, #40]	@ (80014a0 <nema23_korak_1_puls+0x50>)
 8001476:	f001 fc65 	bl	8002d44 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800147a:	2001      	movs	r0, #1
 800147c:	f001 f980 	bl	8002780 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, PULS, 1);
 8001480:	2201      	movs	r2, #1
 8001482:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001486:	4806      	ldr	r0, [pc, #24]	@ (80014a0 <nema23_korak_1_puls+0x50>)
 8001488:	f001 fc5c 	bl	8002d44 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800148c:	2001      	movs	r0, #1
 800148e:	f001 f977 	bl	8002780 <HAL_Delay>

	HAL_Delay(BRZINA_DELAY);	// delay zbog ograničavanja brzine
 8001492:	2019      	movs	r0, #25
 8001494:	f001 f974 	bl	8002780 <HAL_Delay>
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40020400 	.word	0x40020400

080014a4 <nema23_korak_1_deg>:

void nema23_korak_1_deg(char smjer) // 9.9 stupnja na motoru, 0.99 stupnja na reduktoru
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, SMJER, smjer);	// određuje smjer motora
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	461a      	mov	r2, r3
 80014b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014b6:	4814      	ldr	r0, [pc, #80]	@ (8001508 <nema23_korak_1_deg+0x64>)
 80014b8:	f001 fc44 	bl	8002d44 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80014bc:	2001      	movs	r0, #1
 80014be:	f001 f95f 	bl	8002780 <HAL_Delay>

	for(int i = 0; i < 11; i++)	// daje 11 impulsa upravljaču motora
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	e017      	b.n	80014f8 <nema23_korak_1_deg+0x54>
	{
		HAL_GPIO_WritePin(GPIOB, PULS, 0);
 80014c8:	2200      	movs	r2, #0
 80014ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014ce:	480e      	ldr	r0, [pc, #56]	@ (8001508 <nema23_korak_1_deg+0x64>)
 80014d0:	f001 fc38 	bl	8002d44 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80014d4:	2001      	movs	r0, #1
 80014d6:	f001 f953 	bl	8002780 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, PULS, 1);
 80014da:	2201      	movs	r2, #1
 80014dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014e0:	4809      	ldr	r0, [pc, #36]	@ (8001508 <nema23_korak_1_deg+0x64>)
 80014e2:	f001 fc2f 	bl	8002d44 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80014e6:	2001      	movs	r0, #1
 80014e8:	f001 f94a 	bl	8002780 <HAL_Delay>

		HAL_Delay(BRZINA_DELAY);	// delay zbog ograničavanja brzine
 80014ec:	2019      	movs	r0, #25
 80014ee:	f001 f947 	bl	8002780 <HAL_Delay>
	for(int i = 0; i < 11; i++)	// daje 11 impulsa upravljaču motora
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	3301      	adds	r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b0a      	cmp	r3, #10
 80014fc:	dde4      	ble.n	80014c8 <nema23_korak_1_deg+0x24>
	}
}
 80014fe:	bf00      	nop
 8001500:	bf00      	nop
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40020400 	.word	0x40020400

0800150c <nema17_korak_1_puls>:


void nema17_korak_1_puls(char smjer) //	0.9 stupnja, 0.16 mm na koloturu
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, SMJER1, smjer); // određuje smjer motora
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	461a      	mov	r2, r3
 800151a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800151e:	480d      	ldr	r0, [pc, #52]	@ (8001554 <nema17_korak_1_puls+0x48>)
 8001520:	f001 fc10 	bl	8002d44 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001524:	2001      	movs	r0, #1
 8001526:	f001 f92b 	bl	8002780 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, PULS1, 0);	// daje impuls upravljaču motora
 800152a:	2200      	movs	r2, #0
 800152c:	2140      	movs	r1, #64	@ 0x40
 800152e:	4809      	ldr	r0, [pc, #36]	@ (8001554 <nema17_korak_1_puls+0x48>)
 8001530:	f001 fc08 	bl	8002d44 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001534:	2001      	movs	r0, #1
 8001536:	f001 f923 	bl	8002780 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, PULS1, 1);
 800153a:	2201      	movs	r2, #1
 800153c:	2140      	movs	r1, #64	@ 0x40
 800153e:	4805      	ldr	r0, [pc, #20]	@ (8001554 <nema17_korak_1_puls+0x48>)
 8001540:	f001 fc00 	bl	8002d44 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001544:	2001      	movs	r0, #1
 8001546:	f001 f91b 	bl	8002780 <HAL_Delay>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40020400 	.word	0x40020400

08001558 <nema17_korak_1_mm>:

void nema17_korak_1_mm(char smjer) // 5.4 stupnja, 0.94 mm na koloturu
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, SMJER1, smjer);	// određuje smjer motora
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	461a      	mov	r2, r3
 8001566:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800156a:	4812      	ldr	r0, [pc, #72]	@ (80015b4 <nema17_korak_1_mm+0x5c>)
 800156c:	f001 fbea 	bl	8002d44 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001570:	2001      	movs	r0, #1
 8001572:	f001 f905 	bl	8002780 <HAL_Delay>

	for(int i = 0; i < 6; i++) // daje 6 impulsa motoru
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	e012      	b.n	80015a2 <nema17_korak_1_mm+0x4a>
	{
		HAL_GPIO_WritePin(GPIOB, PULS1, 0);
 800157c:	2200      	movs	r2, #0
 800157e:	2140      	movs	r1, #64	@ 0x40
 8001580:	480c      	ldr	r0, [pc, #48]	@ (80015b4 <nema17_korak_1_mm+0x5c>)
 8001582:	f001 fbdf 	bl	8002d44 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001586:	2001      	movs	r0, #1
 8001588:	f001 f8fa 	bl	8002780 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, PULS1, 1);
 800158c:	2201      	movs	r2, #1
 800158e:	2140      	movs	r1, #64	@ 0x40
 8001590:	4808      	ldr	r0, [pc, #32]	@ (80015b4 <nema17_korak_1_mm+0x5c>)
 8001592:	f001 fbd7 	bl	8002d44 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001596:	2001      	movs	r0, #1
 8001598:	f001 f8f2 	bl	8002780 <HAL_Delay>
	for(int i = 0; i < 6; i++) // daje 6 impulsa motoru
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	3301      	adds	r3, #1
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2b05      	cmp	r3, #5
 80015a6:	dde9      	ble.n	800157c <nema17_korak_1_mm+0x24>
	}

}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40020400 	.word	0x40020400

080015b8 <unos_koordinata>:


void unos_koordinata(float *x, float *z)	// unos x i z vrijednosti
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	ed2d 8b02 	vpush	{d8}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
	float provjera;	// pomocne varijable
	short x0, z0;

	do
	{
		printf("X = ");
 80015c6:	483d      	ldr	r0, [pc, #244]	@ (80016bc <unos_koordinata+0x104>)
 80015c8:	f004 faee 	bl	8005ba8 <iprintf>
		scanf("%hd", &x0);	// unos x vrijednosti
 80015cc:	f107 030a 	add.w	r3, r7, #10
 80015d0:	4619      	mov	r1, r3
 80015d2:	483b      	ldr	r0, [pc, #236]	@ (80016c0 <unos_koordinata+0x108>)
 80015d4:	f004 fb02 	bl	8005bdc <iscanf>
		printf("\nZ = ");
 80015d8:	483a      	ldr	r0, [pc, #232]	@ (80016c4 <unos_koordinata+0x10c>)
 80015da:	f004 fae5 	bl	8005ba8 <iprintf>
		scanf("%hd", &z0);	// unos z vrijednosti
 80015de:	f107 0308 	add.w	r3, r7, #8
 80015e2:	4619      	mov	r1, r3
 80015e4:	4836      	ldr	r0, [pc, #216]	@ (80016c0 <unos_koordinata+0x108>)
 80015e6:	f004 faf9 	bl	8005bdc <iscanf>
		printf("\n");
 80015ea:	200a      	movs	r0, #10
 80015ec:	f004 faee 	bl	8005bcc <putchar>

		*x = (float)x0;	// pretvorba u float zbog precizonsti tijekom rada
 80015f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015f4:	ee07 3a90 	vmov	s15, r3
 80015f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	edc3 7a00 	vstr	s15, [r3]
		*z = (float)z0;
 8001602:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001606:	ee07 3a90 	vmov	s15, r3
 800160a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	edc3 7a00 	vstr	s15, [r3]

		if ((*z) + Z0_U_Z1 > 0)	// provjera valjanosti unesenih koordinata
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	edd3 7a00 	vldr	s15, [r3]
 800161a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80016c8 <unos_koordinata+0x110>
 800161e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001622:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162a:	dd2a      	ble.n	8001682 <unos_koordinata+0xca>
		{
			provjera = sqrtf(powf(*x + X0_U_X1 - R_KOLOT,2)+powf(*z + Z0_U_Z1,2));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	edd3 7a00 	vldr	s15, [r3]
 8001632:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80016cc <unos_koordinata+0x114>
 8001636:	ee77 7a87 	vadd.f32	s15, s15, s14
 800163a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800163e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001642:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8001646:	eeb0 0a67 	vmov.f32	s0, s15
 800164a:	f007 f8e7 	bl	800881c <powf>
 800164e:	eeb0 8a40 	vmov.f32	s16, s0
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	edd3 7a00 	vldr	s15, [r3]
 8001658:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80016c8 <unos_koordinata+0x110>
 800165c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001660:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8001664:	eeb0 0a67 	vmov.f32	s0, s15
 8001668:	f007 f8d8 	bl	800881c <powf>
 800166c:	eef0 7a40 	vmov.f32	s15, s0
 8001670:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001674:	eeb0 0a67 	vmov.f32	s0, s15
 8001678:	f007 f928 	bl	80088cc <sqrtf>
 800167c:	ed87 0a03 	vstr	s0, [r7, #12]
 8001680:	e001      	b.n	8001686 <unos_koordinata+0xce>
		}
		else
		{
			provjera = KRAK;
 8001682:	4b13      	ldr	r3, [pc, #76]	@ (80016d0 <unos_koordinata+0x118>)
 8001684:	60fb      	str	r3, [r7, #12]
		}

	}
	while(provjera > KRAK || (*x) < BLIZINA_DIZALICI);
 8001686:	edd7 7a03 	vldr	s15, [r7, #12]
 800168a:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80016d4 <unos_koordinata+0x11c>
 800168e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001696:	dc96      	bgt.n	80015c6 <unos_koordinata+0xe>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	edd3 7a00 	vldr	s15, [r3]
 800169e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80016d8 <unos_koordinata+0x120>
 80016a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016aa:	d48c      	bmi.n	80015c6 <unos_koordinata+0xe>
}
 80016ac:	bf00      	nop
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	ecbd 8b02 	vpop	{d8}
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	08009c20 	.word	0x08009c20
 80016c0:	08009c28 	.word	0x08009c28
 80016c4:	08009c2c 	.word	0x08009c2c
 80016c8:	42c80000 	.word	0x42c80000
 80016cc:	42960000 	.word	0x42960000
 80016d0:	43f50000 	.word	0x43f50000
 80016d4:	43f50000 	.word	0x43f50000
 80016d8:	42700000 	.word	0x42700000
 80016dc:	00000000 	.word	0x00000000

080016e0 <nema23_v_dolaz_do_unosa>:

void nema23_v_dolaz_do_unosa(float *x_tren, float x_koord)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	ed87 0a00 	vstr	s0, [r7]
	float alfa_tren = acosf((*x_tren)/KRAK)*RAD_TO_DEG;	// pretvorba linearnih duljina u kuteve
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	edd3 7a00 	vldr	s15, [r3]
 80016f2:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8001850 <nema23_v_dolaz_do_unosa+0x170>
 80016f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016fa:	eeb0 0a47 	vmov.f32	s0, s14
 80016fe:	f007 f861 	bl	80087c4 <acosf>
 8001702:	ee10 3a10 	vmov	r3, s0
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe ff3e 	bl	8000588 <__aeabi_f2d>
 800170c:	a34a      	add	r3, pc, #296	@ (adr r3, 8001838 <nema23_v_dolaz_do_unosa+0x158>)
 800170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001712:	f7fe ff91 	bl	8000638 <__aeabi_dmul>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4610      	mov	r0, r2
 800171c:	4619      	mov	r1, r3
 800171e:	f7ff fa63 	bl	8000be8 <__aeabi_d2f>
 8001722:	4603      	mov	r3, r0
 8001724:	60fb      	str	r3, [r7, #12]
	float alfa_koord = acosf(x_koord/KRAK)*RAD_TO_DEG;
 8001726:	edd7 7a00 	vldr	s15, [r7]
 800172a:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8001850 <nema23_v_dolaz_do_unosa+0x170>
 800172e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001732:	eeb0 0a47 	vmov.f32	s0, s14
 8001736:	f007 f845 	bl	80087c4 <acosf>
 800173a:	ee10 3a10 	vmov	r3, s0
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe ff22 	bl	8000588 <__aeabi_f2d>
 8001744:	a33c      	add	r3, pc, #240	@ (adr r3, 8001838 <nema23_v_dolaz_do_unosa+0x158>)
 8001746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174a:	f7fe ff75 	bl	8000638 <__aeabi_dmul>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	f7ff fa47 	bl	8000be8 <__aeabi_d2f>
 800175a:	4603      	mov	r3, r0
 800175c:	60bb      	str	r3, [r7, #8]

	if (alfa_tren < alfa_koord)	// dolaz do željenog kuta
 800175e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001762:	edd7 7a02 	vldr	s15, [r7, #8]
 8001766:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800176a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176e:	d51d      	bpl.n	80017ac <nema23_v_dolaz_do_unosa+0xcc>
	{
		while (alfa_tren < alfa_koord)
 8001770:	e012      	b.n	8001798 <nema23_v_dolaz_do_unosa+0xb8>
		{
		  	nema23_korak_1_puls(1);
 8001772:	2001      	movs	r0, #1
 8001774:	f7ff fe6c 	bl	8001450 <nema23_korak_1_puls>
		  	alfa_tren += N23_1PULS_DEG;
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	f7fe ff05 	bl	8000588 <__aeabi_f2d>
 800177e:	a330      	add	r3, pc, #192	@ (adr r3, 8001840 <nema23_v_dolaz_do_unosa+0x160>)
 8001780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001784:	f7fe fda2 	bl	80002cc <__adddf3>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	f7ff fa2a 	bl	8000be8 <__aeabi_d2f>
 8001794:	4603      	mov	r3, r0
 8001796:	60fb      	str	r3, [r7, #12]
		while (alfa_tren < alfa_koord)
 8001798:	ed97 7a03 	vldr	s14, [r7, #12]
 800179c:	edd7 7a02 	vldr	s15, [r7, #8]
 80017a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a8:	d4e3      	bmi.n	8001772 <nema23_v_dolaz_do_unosa+0x92>
 80017aa:	e025      	b.n	80017f8 <nema23_v_dolaz_do_unosa+0x118>
		}
	}
	else if (alfa_tren > alfa_koord)
 80017ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80017b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80017b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017bc:	dd1c      	ble.n	80017f8 <nema23_v_dolaz_do_unosa+0x118>
	{
		while (alfa_tren > alfa_koord)
 80017be:	e012      	b.n	80017e6 <nema23_v_dolaz_do_unosa+0x106>
		{
		  	nema23_korak_1_puls(0);
 80017c0:	2000      	movs	r0, #0
 80017c2:	f7ff fe45 	bl	8001450 <nema23_korak_1_puls>
		  	alfa_tren -= N23_1PULS_DEG;
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f7fe fede 	bl	8000588 <__aeabi_f2d>
 80017cc:	a31c      	add	r3, pc, #112	@ (adr r3, 8001840 <nema23_v_dolaz_do_unosa+0x160>)
 80017ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d2:	f7fe fd79 	bl	80002c8 <__aeabi_dsub>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff fa03 	bl	8000be8 <__aeabi_d2f>
 80017e2:	4603      	mov	r3, r0
 80017e4:	60fb      	str	r3, [r7, #12]
		while (alfa_tren > alfa_koord)
 80017e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80017ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80017ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f6:	dce3      	bgt.n	80017c0 <nema23_v_dolaz_do_unosa+0xe0>
		}
	}

	*x_tren = KRAK*cosf(alfa_tren*DEG_TO_RAD);	// pretvorba trenutnog kuta u lin. duljinu
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f7fe fec5 	bl	8000588 <__aeabi_f2d>
 80017fe:	a312      	add	r3, pc, #72	@ (adr r3, 8001848 <nema23_v_dolaz_do_unosa+0x168>)
 8001800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001804:	f7fe ff18 	bl	8000638 <__aeabi_dmul>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f7ff f9ea 	bl	8000be8 <__aeabi_d2f>
 8001814:	4603      	mov	r3, r0
 8001816:	ee00 3a10 	vmov	s0, r3
 800181a:	f007 f875 	bl	8008908 <cosf>
 800181e:	eef0 7a40 	vmov.f32	s15, s0
 8001822:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001850 <nema23_v_dolaz_do_unosa+0x170>
 8001826:	ee67 7a87 	vmul.f32	s15, s15, s14
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	edc3 7a00 	vstr	s15, [r3]
}
 8001830:	bf00      	nop
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	76d54973 	.word	0x76d54973
 800183c:	404ca613 	.word	0x404ca613
 8001840:	70a3d70a 	.word	0x70a3d70a
 8001844:	3fb70a3d 	.word	0x3fb70a3d
 8001848:	94e4fef3 	.word	0x94e4fef3
 800184c:	3f91df25 	.word	0x3f91df25
 8001850:	43f50000 	.word	0x43f50000
 8001854:	00000000 	.word	0x00000000

08001858 <nema17_dolaz_do_unosa_1>:

void nema17_dolaz_do_unosa_1(float *z_tren, float z_max_tren, float *tren)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	ed87 0a02 	vstr	s0, [r7, #8]
 8001864:	6079      	str	r1, [r7, #4]
	*tren = z_max_tren - (*z_tren);	// pretvorba duljine od podloge u duljinu od motora NEMA 17
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	edd3 7a00 	vldr	s15, [r3]
 800186c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001870:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	edc3 7a00 	vstr	s15, [r3]

	if (*tren > 100)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	edd3 7a00 	vldr	s15, [r3]
 8001880:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80018f8 <nema17_dolaz_do_unosa_1+0xa0>
 8001884:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188c:	dd20      	ble.n	80018d0 <nema17_dolaz_do_unosa_1+0x78>
	{
		while (*tren > 100)	// dolaz do sigurne pozicije da se ne dogodi kolizija s podlogom
 800188e:	e015      	b.n	80018bc <nema17_dolaz_do_unosa_1+0x64>
		{
			nema17_korak_1_puls(0);
 8001890:	2000      	movs	r0, #0
 8001892:	f7ff fe3b 	bl	800150c <nema17_korak_1_puls>
		  	*tren -= N17_1PULS_MM;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fe74 	bl	8000588 <__aeabi_f2d>
 80018a0:	a313      	add	r3, pc, #76	@ (adr r3, 80018f0 <nema17_dolaz_do_unosa_1+0x98>)
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	f7fe fd0f 	bl	80002c8 <__aeabi_dsub>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	f7ff f999 	bl	8000be8 <__aeabi_d2f>
 80018b6:	4602      	mov	r2, r0
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	601a      	str	r2, [r3, #0]
		while (*tren > 100)	// dolaz do sigurne pozicije da se ne dogodi kolizija s podlogom
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	edd3 7a00 	vldr	s15, [r3]
 80018c2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80018f8 <nema17_dolaz_do_unosa_1+0xa0>
 80018c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ce:	dcdf      	bgt.n	8001890 <nema17_dolaz_do_unosa_1+0x38>
		}
	}

	*z_tren = z_max_tren - (*tren);	// pretvorba natrag u duljinu od podloge
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	edd3 7a00 	vldr	s15, [r3]
 80018d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80018da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	edc3 7a00 	vstr	s15, [r3]
}
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	f3af 8000 	nop.w
 80018f0:	306f3395 	.word	0x306f3395
 80018f4:	3fc41b2f 	.word	0x3fc41b2f
 80018f8:	42c80000 	.word	0x42c80000
 80018fc:	00000000 	.word	0x00000000

08001900 <nema17_dolaz_do_unosa_2>:

void nema17_dolaz_do_unosa_2(float *z_tren, float z_koord, float z_max, float *tren)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	ed87 0a02 	vstr	s0, [r7, #8]
 800190c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
	float koord_2 = z_max - z_koord;	// pretvorba duljine od podloge u duljinu od motora NEMA 17
 8001912:	ed97 7a01 	vldr	s14, [r7, #4]
 8001916:	edd7 7a02 	vldr	s15, [r7, #8]
 800191a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800191e:	edc7 7a05 	vstr	s15, [r7, #20]

	if (*tren < koord_2)	// dolaz do željene pozicije
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	edd3 7a00 	vldr	s15, [r3]
 8001928:	ed97 7a05 	vldr	s14, [r7, #20]
 800192c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001934:	dd21      	ble.n	800197a <nema17_dolaz_do_unosa_2+0x7a>
	{
		while (*tren < koord_2)
 8001936:	e015      	b.n	8001964 <nema17_dolaz_do_unosa_2+0x64>
		{
			nema17_korak_1_puls(1);
 8001938:	2001      	movs	r0, #1
 800193a:	f7ff fde7 	bl	800150c <nema17_korak_1_puls>
		  	*tren += N17_1PULS_MM;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fe20 	bl	8000588 <__aeabi_f2d>
 8001948:	a330      	add	r3, pc, #192	@ (adr r3, 8001a0c <nema17_dolaz_do_unosa_2+0x10c>)
 800194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194e:	f7fe fcbd 	bl	80002cc <__adddf3>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	f7ff f945 	bl	8000be8 <__aeabi_d2f>
 800195e:	4602      	mov	r2, r0
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	601a      	str	r2, [r3, #0]
		while (*tren < koord_2)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	edd3 7a00 	vldr	s15, [r3]
 800196a:	ed97 7a05 	vldr	s14, [r7, #20]
 800196e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001976:	dcdf      	bgt.n	8001938 <nema17_dolaz_do_unosa_2+0x38>
 8001978:	e036      	b.n	80019e8 <nema17_dolaz_do_unosa_2+0xe8>

		}
	}
	else if (*tren > koord_2)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	edd3 7a00 	vldr	s15, [r3]
 8001980:	ed97 7a05 	vldr	s14, [r7, #20]
 8001984:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198c:	d52c      	bpl.n	80019e8 <nema17_dolaz_do_unosa_2+0xe8>
	{
		while (*tren > koord_2)
 800198e:	e01f      	b.n	80019d0 <nema17_dolaz_do_unosa_2+0xd0>
		{
			nema17_korak_1_puls(0);
 8001990:	2000      	movs	r0, #0
 8001992:	f7ff fdbb 	bl	800150c <nema17_korak_1_puls>
		  	*tren -= N17_1PULS_MM;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fdf4 	bl	8000588 <__aeabi_f2d>
 80019a0:	a31a      	add	r3, pc, #104	@ (adr r3, 8001a0c <nema17_dolaz_do_unosa_2+0x10c>)
 80019a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a6:	f7fe fc8f 	bl	80002c8 <__aeabi_dsub>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4610      	mov	r0, r2
 80019b0:	4619      	mov	r1, r3
 80019b2:	f7ff f919 	bl	8000be8 <__aeabi_d2f>
 80019b6:	4602      	mov	r2, r0
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	601a      	str	r2, [r3, #0]

		  	if(*tren < BLIZINA_MOTORU)	// zaštita od kolizije tereta s motorom NEMA 17
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	edd3 7a00 	vldr	s15, [r3]
 80019c2:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001a08 <nema17_dolaz_do_unosa_2+0x108>
 80019c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ce:	d40a      	bmi.n	80019e6 <nema17_dolaz_do_unosa_2+0xe6>
		while (*tren > koord_2)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	edd3 7a00 	vldr	s15, [r3]
 80019d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80019da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e2:	d4d5      	bmi.n	8001990 <nema17_dolaz_do_unosa_2+0x90>
 80019e4:	e000      	b.n	80019e8 <nema17_dolaz_do_unosa_2+0xe8>
		  	{
		  		break;
 80019e6:	bf00      	nop
		  	}
		}
	}

	*z_tren = z_max - (*tren);	// pretvorba natrag u duljinu od podloge
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	edd3 7a00 	vldr	s15, [r3]
 80019ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80019f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	edc3 7a00 	vstr	s15, [r3]
}
 80019fc:	bf00      	nop
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	f3af 8000 	nop.w
 8001a08:	42480000 	.word	0x42480000
 8001a0c:	306f3395 	.word	0x306f3395
 8001a10:	3fc41b2f 	.word	0x3fc41b2f
 8001a14:	00000000 	.word	0x00000000

08001a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b090      	sub	sp, #64	@ 0x40
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	setvbuf(stdin, NULL, _IONBF, 0);
 8001a1e:	4bbd      	ldr	r3, [pc, #756]	@ (8001d14 <main+0x2fc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6858      	ldr	r0, [r3, #4]
 8001a24:	2300      	movs	r3, #0
 8001a26:	2202      	movs	r2, #2
 8001a28:	2100      	movs	r1, #0
 8001a2a:	f004 f8e9 	bl	8005c00 <setvbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a2e:	f000 fe35 	bl	800269c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a32:	f000 fb25 	bl	8002080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a36:	f7ff fa9f 	bl	8000f78 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a3a:	f7ff fb07 	bl	800104c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001a3e:	f000 fd91 	bl	8002564 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001a42:	f000 fd31 	bl	80024a8 <MX_TIM6_Init>

  /*######################################################################################
   *##########INICIJALIZACIJA LCD-a#######################################################
    ###################################################################################### */

  HAL_Delay(15);
 8001a46:	200f      	movs	r0, #15
 8001a48:	f000 fe9a 	bl	8002780 <HAL_Delay>
  lcd_naredba(INITIAL);	// prve tri naredbe za inicijalizaciju
 8001a4c:	2003      	movs	r0, #3
 8001a4e:	f7ff fc5d 	bl	800130c <lcd_naredba>

  HAL_Delay(5);
 8001a52:	2005      	movs	r0, #5
 8001a54:	f000 fe94 	bl	8002780 <HAL_Delay>
  lcd_naredba(INITIAL);
 8001a58:	2003      	movs	r0, #3
 8001a5a:	f7ff fc57 	bl	800130c <lcd_naredba>

  HAL_Delay(1);
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f000 fe8e 	bl	8002780 <HAL_Delay>
  lcd_naredba(INITIAL);
 8001a64:	2003      	movs	r0, #3
 8001a66:	f7ff fc51 	bl	800130c <lcd_naredba>

  HAL_Delay(1);
 8001a6a:	2001      	movs	r0, #1
 8001a6c:	f000 fe88 	bl	8002780 <HAL_Delay>
  lcd_naredba(BIT_4);	// konfiguracija LCD-a na 4-bitni mod
 8001a70:	2002      	movs	r0, #2
 8001a72:	f7ff fc4b 	bl	800130c <lcd_naredba>

  lcd_naredba(SUCELJE);	// DL = 1, N = 1, F = 0, duljina podataka 8, 2 prikazne linije,  font 5x7
 8001a76:	2038      	movs	r0, #56	@ 0x38
 8001a78:	f7ff fc48 	bl	800130c <lcd_naredba>

  lcd_naredba(CISTI);
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	f7ff fc45 	bl	800130c <lcd_naredba>
  lcd_naredba(EKRAN_0);
 8001a82:	2000      	movs	r0, #0
 8001a84:	f7ff fc42 	bl	800130c <lcd_naredba>

  lcd_naredba(EKRAN_0);
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f7ff fc3f 	bl	800130c <lcd_naredba>
  lcd_naredba(CISTI);
 8001a8e:	2001      	movs	r0, #1
 8001a90:	f7ff fc3c 	bl	800130c <lcd_naredba>

  lcd_naredba(KURSOR);	// ID = 0, S = 0, ne inkrementira pokazivač ni prikaz
 8001a94:	2004      	movs	r0, #4
 8001a96:	f7ff fc39 	bl	800130c <lcd_naredba>

  lcd_naredba(UKLJUCI);	// D = 1, C = 1, B = 1, uključi prikaz, pokazivač i blinkanje kursora
 8001a9a:	200f      	movs	r0, #15
 8001a9c:	f7ff fc36 	bl	800130c <lcd_naredba>

  HAL_Delay(5);
 8001aa0:	2005      	movs	r0, #5
 8001aa2:	f000 fe6d 	bl	8002780 <HAL_Delay>

  lcd_naredba(POCETAK); // stavlja pokazivač na pocetak
 8001aa6:	2002      	movs	r0, #2
 8001aa8:	f7ff fc30 	bl	800130c <lcd_naredba>

  HAL_Delay(2);
 8001aac:	2002      	movs	r0, #2
 8001aae:	f000 fe67 	bl	8002780 <HAL_Delay>

  lcd_naredba(CISTI);	// pocisti LCD
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	f7ff fc2a 	bl	800130c <lcd_naredba>

  HAL_Delay(2);
 8001ab8:	2002      	movs	r0, #2
 8001aba:	f000 fe61 	bl	8002780 <HAL_Delay>

/*######################################################################################
 *##########INICIJALIZACIJA ZAVRŠENA####################################################
  ###################################################################################### */

  unos_koordinata(&x0_tren, &z0_tren);	// unos početne pozicije tereta
 8001abe:	f107 0208 	add.w	r2, r7, #8
 8001ac2:	f107 030c 	add.w	r3, r7, #12
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fd75 	bl	80015b8 <unos_koordinata>

  broj_u_string((short)x0_tren,str,0,0);	// slanje početne trenutne pozicije tereta
 8001ace:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ad2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ad6:	ee17 3a90 	vmov	r3, s15
 8001ada:	b218      	sxth	r0, r3
 8001adc:	f107 011c 	add.w	r1, r7, #28
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f7ff fb58 	bl	8001198 <broj_u_string>
  lcd_string(str,1);
 8001ae8:	f107 031c 	add.w	r3, r7, #28
 8001aec:	2101      	movs	r1, #1
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fc6c 	bl	80013cc <lcd_string>
  broj_u_string((short)z0_tren,str,0,1);
 8001af4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001af8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001afc:	ee17 3a90 	vmov	r3, s15
 8001b00:	b218      	sxth	r0, r3
 8001b02:	f107 011c 	add.w	r1, r7, #28
 8001b06:	2301      	movs	r3, #1
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f7ff fb45 	bl	8001198 <broj_u_string>
  lcd_string(str,2);
 8001b0e:	f107 031c 	add.w	r3, r7, #28
 8001b12:	2102      	movs	r1, #2
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fc59 	bl	80013cc <lcd_string>

  broj_u_string(0,str,1,0);	// slanje početne željenje pozicije tereta (0,0)
 8001b1a:	f107 011c 	add.w	r1, r7, #28
 8001b1e:	2300      	movs	r3, #0
 8001b20:	2201      	movs	r2, #1
 8001b22:	2000      	movs	r0, #0
 8001b24:	f7ff fb38 	bl	8001198 <broj_u_string>
  lcd_string(str,3);
 8001b28:	f107 031c 	add.w	r3, r7, #28
 8001b2c:	2103      	movs	r1, #3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fc4c 	bl	80013cc <lcd_string>
  broj_u_string(0,str,1,1);
 8001b34:	f107 011c 	add.w	r1, r7, #28
 8001b38:	2301      	movs	r3, #1
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f7ff fb2b 	bl	8001198 <broj_u_string>
  lcd_string(str,4);
 8001b42:	f107 031c 	add.w	r3, r7, #28
 8001b46:	2104      	movs	r1, #4
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fc3f 	bl	80013cc <lcd_string>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	  if (zastava == 1)	// ulaz u automatski mod dizalice
 8001b4e:	4b72      	ldr	r3, [pc, #456]	@ (8001d18 <main+0x300>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	f040 80e8 	bne.w	8001d28 <main+0x310>
	  	  {
	  		  unos_koordinata(&x0_koord, &z0_koord);	// unos željene pozicije tereta
 8001b58:	f107 0210 	add.w	r2, r7, #16
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	4611      	mov	r1, r2
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fd28 	bl	80015b8 <unos_koordinata>

	  		  broj_u_string((short)x0_koord,str,1,0);	// ispis željene pozicije tereta
 8001b68:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b70:	ee17 3a90 	vmov	r3, s15
 8001b74:	b218      	sxth	r0, r3
 8001b76:	f107 011c 	add.w	r1, r7, #28
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f7ff fb0b 	bl	8001198 <broj_u_string>
	  		  lcd_string(str,3);
 8001b82:	f107 031c 	add.w	r3, r7, #28
 8001b86:	2103      	movs	r1, #3
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fc1f 	bl	80013cc <lcd_string>
	  		  broj_u_string((short)z0_koord,str,1,1);
 8001b8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b96:	ee17 3a90 	vmov	r3, s15
 8001b9a:	b218      	sxth	r0, r3
 8001b9c:	f107 011c 	add.w	r1, r7, #28
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f7ff faf8 	bl	8001198 <broj_u_string>
	  		  lcd_string(str,4);
 8001ba8:	f107 031c 	add.w	r3, r7, #28
 8001bac:	2104      	movs	r1, #4
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fc0c 	bl	80013cc <lcd_string>

	  		  x1_koord = x0_koord + X0_U_X1 - R_KOLOT;	// mijenjanje koordinatnog sustava
 8001bb4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bb8:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8001d1c <main+0x304>
 8001bbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bc0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001bc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bc8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	  		  x1_tren = x0_tren + X0_U_X1 - R_KOLOT;
 8001bcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bd0:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001d1c <main+0x304>
 8001bd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bd8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001bdc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001be0:	edc7 7a01 	vstr	s15, [r7, #4]
	  		  z1_koord = z0_koord + Z0_U_Z1;
 8001be4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001be8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8001d20 <main+0x308>
 8001bec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bf0:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	  		  z1_tren = z0_tren + Z0_U_Z1;
 8001bf4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bf8:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001d20 <main+0x308>
 8001bfc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c00:	edc7 7a00 	vstr	s15, [r7]

	  		  z_max_koord = KRAK*sinf(acosf(x1_koord/KRAK));	// izracun pozicije NEMA 17 motora
 8001c04:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001c08:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8001d24 <main+0x30c>
 8001c0c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c10:	eeb0 0a47 	vmov.f32	s0, s14
 8001c14:	f006 fdd6 	bl	80087c4 <acosf>
 8001c18:	eef0 7a40 	vmov.f32	s15, s0
 8001c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c20:	f006 febe 	bl	80089a0 <sinf>
 8001c24:	eef0 7a40 	vmov.f32	s15, s0
 8001c28:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8001d24 <main+0x30c>
 8001c2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c30:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	  		  z_max_tren = KRAK*sinf(acosf(x1_tren/KRAK));
 8001c34:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c38:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8001d24 <main+0x30c>
 8001c3c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c40:	eeb0 0a47 	vmov.f32	s0, s14
 8001c44:	f006 fdbe 	bl	80087c4 <acosf>
 8001c48:	eef0 7a40 	vmov.f32	s15, s0
 8001c4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c50:	f006 fea6 	bl	80089a0 <sinf>
 8001c54:	eef0 7a40 	vmov.f32	s15, s0
 8001c58:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001d24 <main+0x30c>
 8001c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c60:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	  		  nema17_dolaz_do_unosa_1(&z1_tren, z_max_tren, &r_tren);	// prvotno dizanje tereta
 8001c64:	f107 0218 	add.w	r2, r7, #24
 8001c68:	463b      	mov	r3, r7
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff fdf1 	bl	8001858 <nema17_dolaz_do_unosa_1>

	  		  nema23_v_dolaz_do_unosa(&x1_tren, x1_koord);	// dolaz do željene x pozicije
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fd2f 	bl	80016e0 <nema23_v_dolaz_do_unosa>

	  		  nema17_dolaz_do_unosa_2(&z1_tren, z1_koord, z_max_koord, &r_tren);	// dolaz do željene z pozicije
 8001c82:	f107 0218 	add.w	r2, r7, #24
 8001c86:	463b      	mov	r3, r7
 8001c88:	4611      	mov	r1, r2
 8001c8a:	edd7 0a0d 	vldr	s1, [r7, #52]	@ 0x34
 8001c8e:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fe34 	bl	8001900 <nema17_dolaz_do_unosa_2>

	  		  x0_tren = x1_tren - X0_U_X1 + R_KOLOT;	// mijenjanje koordinatnog sustava
 8001c98:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c9c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001d1c <main+0x304>
 8001ca0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ca4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001ca8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cac:	edc7 7a03 	vstr	s15, [r7, #12]
	  		  z0_tren = z1_tren - Z0_U_Z1;
 8001cb0:	edd7 7a00 	vldr	s15, [r7]
 8001cb4:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001d20 <main+0x308>
 8001cb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cbc:	edc7 7a02 	vstr	s15, [r7, #8]

	  		  broj_u_string((short)x0_tren,str,0,0);	// ispis trenutnih vrijednosti nakon dolaska na željene koordinate
 8001cc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cc8:	ee17 3a90 	vmov	r3, s15
 8001ccc:	b218      	sxth	r0, r3
 8001cce:	f107 011c 	add.w	r1, r7, #28
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f7ff fa5f 	bl	8001198 <broj_u_string>
	  		  lcd_string(str,1);
 8001cda:	f107 031c 	add.w	r3, r7, #28
 8001cde:	2101      	movs	r1, #1
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff fb73 	bl	80013cc <lcd_string>
	  		  broj_u_string((short)z0_tren,str,0,1);
 8001ce6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cee:	ee17 3a90 	vmov	r3, s15
 8001cf2:	b218      	sxth	r0, r3
 8001cf4:	f107 011c 	add.w	r1, r7, #28
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f7ff fa4c 	bl	8001198 <broj_u_string>
	  		  lcd_string(str,2);
 8001d00:	f107 031c 	add.w	r3, r7, #28
 8001d04:	2102      	movs	r1, #2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff fb60 	bl	80013cc <lcd_string>

	  		  zastava = 0;
 8001d0c:	4b02      	ldr	r3, [pc, #8]	@ (8001d18 <main+0x300>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
 8001d12:	e71c      	b.n	8001b4e <main+0x136>
 8001d14:	20000018 	.word	0x20000018
 8001d18:	20000246 	.word	0x20000246
 8001d1c:	42960000 	.word	0x42960000
 8001d20:	42c80000 	.word	0x42c80000
 8001d24:	43f50000 	.word	0x43f50000
	  	  }
	  	  else if (zastava == 2)	// pomak NEMA 23 motora za 1 stupanj prema gore
 8001d28:	4bd1      	ldr	r3, [pc, #836]	@ (8002070 <main+0x658>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	f040 80a3 	bne.w	8001e78 <main+0x460>
	  	  {
	  		  nema23_korak_1_deg(1);
 8001d32:	2001      	movs	r0, #1
 8001d34:	f7ff fbb6 	bl	80014a4 <nema23_korak_1_deg>

	  		  x1_tren = x0_tren + X0_U_X1 - R_KOLOT;	// izračun promjene x i z koordinati
 8001d38:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d3c:	ed9f 7acd 	vldr	s14, [pc, #820]	@ 8002074 <main+0x65c>
 8001d40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d44:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001d48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d4c:	edc7 7a01 	vstr	s15, [r7, #4]
	  		  z1_tren = z0_tren + Z0_U_Z1;
 8001d50:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d54:	ed9f 7ac8 	vldr	s14, [pc, #800]	@ 8002078 <main+0x660>
 8001d58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d5c:	edc7 7a00 	vstr	s15, [r7]
	  		  x1_tren = KRAK*cosf(acosf(x1_tren/KRAK) + 1*DEG_TO_RAD);
 8001d60:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d64:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 800207c <main+0x664>
 8001d68:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d6c:	eeb0 0a47 	vmov.f32	s0, s14
 8001d70:	f006 fd28 	bl	80087c4 <acosf>
 8001d74:	ee10 3a10 	vmov	r3, s0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fc05 	bl	8000588 <__aeabi_f2d>
 8001d7e:	a3ba      	add	r3, pc, #744	@ (adr r3, 8002068 <main+0x650>)
 8001d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d84:	f7fe faa2 	bl	80002cc <__adddf3>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f7fe ff2a 	bl	8000be8 <__aeabi_d2f>
 8001d94:	4603      	mov	r3, r0
 8001d96:	ee00 3a10 	vmov	s0, r3
 8001d9a:	f006 fdb5 	bl	8008908 <cosf>
 8001d9e:	eef0 7a40 	vmov.f32	s15, s0
 8001da2:	ed9f 7ab6 	vldr	s14, [pc, #728]	@ 800207c <main+0x664>
 8001da6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001daa:	edc7 7a01 	vstr	s15, [r7, #4]
	  		  z1_tren = KRAK*sinf(acosf(x1_tren/KRAK) + 1*DEG_TO_RAD);
 8001dae:	edd7 7a01 	vldr	s15, [r7, #4]
 8001db2:	eddf 6ab2 	vldr	s13, [pc, #712]	@ 800207c <main+0x664>
 8001db6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001dba:	eeb0 0a47 	vmov.f32	s0, s14
 8001dbe:	f006 fd01 	bl	80087c4 <acosf>
 8001dc2:	ee10 3a10 	vmov	r3, s0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fbde 	bl	8000588 <__aeabi_f2d>
 8001dcc:	a3a6      	add	r3, pc, #664	@ (adr r3, 8002068 <main+0x650>)
 8001dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd2:	f7fe fa7b 	bl	80002cc <__adddf3>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f7fe ff03 	bl	8000be8 <__aeabi_d2f>
 8001de2:	4603      	mov	r3, r0
 8001de4:	ee00 3a10 	vmov	s0, r3
 8001de8:	f006 fdda 	bl	80089a0 <sinf>
 8001dec:	eef0 7a40 	vmov.f32	s15, s0
 8001df0:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 800207c <main+0x664>
 8001df4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001df8:	edc7 7a00 	vstr	s15, [r7]
	  		  x0_tren = x1_tren - X0_U_X1 + R_KOLOT;
 8001dfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e00:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 8002074 <main+0x65c>
 8001e04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e08:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001e0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e10:	edc7 7a03 	vstr	s15, [r7, #12]
	  		  z0_tren = z1_tren - Z0_U_Z1;
 8001e14:	edd7 7a00 	vldr	s15, [r7]
 8001e18:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8002078 <main+0x660>
 8001e1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e20:	edc7 7a02 	vstr	s15, [r7, #8]

	  		  broj_u_string((short)x0_tren,str,0,0);	// ispis promijenjene x i z koordinate
 8001e24:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e2c:	ee17 3a90 	vmov	r3, s15
 8001e30:	b218      	sxth	r0, r3
 8001e32:	f107 011c 	add.w	r1, r7, #28
 8001e36:	2300      	movs	r3, #0
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f7ff f9ad 	bl	8001198 <broj_u_string>
	  		  lcd_string(str,1);
 8001e3e:	f107 031c 	add.w	r3, r7, #28
 8001e42:	2101      	movs	r1, #1
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff fac1 	bl	80013cc <lcd_string>
	  		  broj_u_string((short)z0_tren,str,0,1);
 8001e4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e52:	ee17 3a90 	vmov	r3, s15
 8001e56:	b218      	sxth	r0, r3
 8001e58:	f107 011c 	add.w	r1, r7, #28
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f7ff f99a 	bl	8001198 <broj_u_string>
	  		  lcd_string(str,2);
 8001e64:	f107 031c 	add.w	r3, r7, #28
 8001e68:	2102      	movs	r1, #2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff faae 	bl	80013cc <lcd_string>

	  		  zastava = 0;
 8001e70:	4b7f      	ldr	r3, [pc, #508]	@ (8002070 <main+0x658>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	701a      	strb	r2, [r3, #0]
 8001e76:	e66a      	b.n	8001b4e <main+0x136>
	  	  }
	  	  else if (zastava == 3)	// pomak NEMA 23 motora za 1 stupanj prema dolje
 8001e78:	4b7d      	ldr	r3, [pc, #500]	@ (8002070 <main+0x658>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b03      	cmp	r3, #3
 8001e7e:	f040 80a3 	bne.w	8001fc8 <main+0x5b0>
	  	  {
	  		  nema23_korak_1_deg(0);
 8001e82:	2000      	movs	r0, #0
 8001e84:	f7ff fb0e 	bl	80014a4 <nema23_korak_1_deg>

	  		  x1_tren = x0_tren + X0_U_X1 - R_KOLOT;	// izračun promjene x i z koordinati
 8001e88:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e8c:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8002074 <main+0x65c>
 8001e90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e94:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001e98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e9c:	edc7 7a01 	vstr	s15, [r7, #4]
	  		  z1_tren = z0_tren + Z0_U_Z1;
 8001ea0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ea4:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8002078 <main+0x660>
 8001ea8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001eac:	edc7 7a00 	vstr	s15, [r7]
	  		  x1_tren = KRAK*cosf(acosf(x1_tren/KRAK) - 1*DEG_TO_RAD);
 8001eb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eb4:	eddf 6a71 	vldr	s13, [pc, #452]	@ 800207c <main+0x664>
 8001eb8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ebc:	eeb0 0a47 	vmov.f32	s0, s14
 8001ec0:	f006 fc80 	bl	80087c4 <acosf>
 8001ec4:	ee10 3a10 	vmov	r3, s0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe fb5d 	bl	8000588 <__aeabi_f2d>
 8001ece:	a366      	add	r3, pc, #408	@ (adr r3, 8002068 <main+0x650>)
 8001ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed4:	f7fe f9f8 	bl	80002c8 <__aeabi_dsub>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f7fe fe82 	bl	8000be8 <__aeabi_d2f>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	ee00 3a10 	vmov	s0, r3
 8001eea:	f006 fd0d 	bl	8008908 <cosf>
 8001eee:	eef0 7a40 	vmov.f32	s15, s0
 8001ef2:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 800207c <main+0x664>
 8001ef6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001efa:	edc7 7a01 	vstr	s15, [r7, #4]
	  		  z1_tren = KRAK*sinf(acosf(x1_tren/KRAK) + 1*DEG_TO_RAD);
 8001efe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f02:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800207c <main+0x664>
 8001f06:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f0a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f0e:	f006 fc59 	bl	80087c4 <acosf>
 8001f12:	ee10 3a10 	vmov	r3, s0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fb36 	bl	8000588 <__aeabi_f2d>
 8001f1c:	a352      	add	r3, pc, #328	@ (adr r3, 8002068 <main+0x650>)
 8001f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f22:	f7fe f9d3 	bl	80002cc <__adddf3>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f7fe fe5b 	bl	8000be8 <__aeabi_d2f>
 8001f32:	4603      	mov	r3, r0
 8001f34:	ee00 3a10 	vmov	s0, r3
 8001f38:	f006 fd32 	bl	80089a0 <sinf>
 8001f3c:	eef0 7a40 	vmov.f32	s15, s0
 8001f40:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 800207c <main+0x664>
 8001f44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f48:	edc7 7a00 	vstr	s15, [r7]
	  		  x0_tren = x1_tren - X0_U_X1 + R_KOLOT;
 8001f4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f50:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8002074 <main+0x65c>
 8001f54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f58:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001f5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f60:	edc7 7a03 	vstr	s15, [r7, #12]
	  		  z0_tren = z1_tren - Z0_U_Z1;
 8001f64:	edd7 7a00 	vldr	s15, [r7]
 8001f68:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8002078 <main+0x660>
 8001f6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f70:	edc7 7a02 	vstr	s15, [r7, #8]

	  		  broj_u_string((short)x0_tren,str,0,0);	// ispis promijenjene x i z koordinati
 8001f74:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f7c:	ee17 3a90 	vmov	r3, s15
 8001f80:	b218      	sxth	r0, r3
 8001f82:	f107 011c 	add.w	r1, r7, #28
 8001f86:	2300      	movs	r3, #0
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f7ff f905 	bl	8001198 <broj_u_string>
	  		  lcd_string(str,1);
 8001f8e:	f107 031c 	add.w	r3, r7, #28
 8001f92:	2101      	movs	r1, #1
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fa19 	bl	80013cc <lcd_string>
	  		  broj_u_string((short)z0_tren,str,0,1);
 8001f9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fa2:	ee17 3a90 	vmov	r3, s15
 8001fa6:	b218      	sxth	r0, r3
 8001fa8:	f107 011c 	add.w	r1, r7, #28
 8001fac:	2301      	movs	r3, #1
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f7ff f8f2 	bl	8001198 <broj_u_string>
	  		  lcd_string(str,2);
 8001fb4:	f107 031c 	add.w	r3, r7, #28
 8001fb8:	2102      	movs	r1, #2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fa06 	bl	80013cc <lcd_string>

	  		  zastava = 0;
 8001fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8002070 <main+0x658>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	701a      	strb	r2, [r3, #0]
 8001fc6:	e5c2      	b.n	8001b4e <main+0x136>
	  	  }
	  	  else if (zastava == 4)	// pomak tereta za 1 milimetar prema gore
 8001fc8:	4b29      	ldr	r3, [pc, #164]	@ (8002070 <main+0x658>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d121      	bne.n	8002014 <main+0x5fc>
	  	  {
	  		  nema17_korak_1_mm(0);
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f7ff fac1 	bl	8001558 <nema17_korak_1_mm>

	  		  z0_tren++;	// promjena z koordinate
 8001fd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001fde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fe2:	edc7 7a02 	vstr	s15, [r7, #8]

	  		  broj_u_string((short)z0_tren,str,0,1);	// ispis promijenjene z koordinate
 8001fe6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fee:	ee17 3a90 	vmov	r3, s15
 8001ff2:	b218      	sxth	r0, r3
 8001ff4:	f107 011c 	add.w	r1, r7, #28
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f7ff f8cc 	bl	8001198 <broj_u_string>
	  		  lcd_string(str,2);
 8002000:	f107 031c 	add.w	r3, r7, #28
 8002004:	2102      	movs	r1, #2
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff f9e0 	bl	80013cc <lcd_string>

	  		  zastava = 0;
 800200c:	4b18      	ldr	r3, [pc, #96]	@ (8002070 <main+0x658>)
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]
 8002012:	e59c      	b.n	8001b4e <main+0x136>
	  	  }
	  	  else if (zastava == 5)	// pomak tereta za 1 milimetar prema dolje
 8002014:	4b16      	ldr	r3, [pc, #88]	@ (8002070 <main+0x658>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b05      	cmp	r3, #5
 800201a:	f47f ad98 	bne.w	8001b4e <main+0x136>
	  	  {
	  		  nema17_korak_1_mm(1);
 800201e:	2001      	movs	r0, #1
 8002020:	f7ff fa9a 	bl	8001558 <nema17_korak_1_mm>

	  		  z0_tren--;	// promjena z koordinate
 8002024:	edd7 7a02 	vldr	s15, [r7, #8]
 8002028:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800202c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002030:	edc7 7a02 	vstr	s15, [r7, #8]

	  		  broj_u_string((short)z0_tren,str,0,1);	// ispis promijenjene z koordinate
 8002034:	edd7 7a02 	vldr	s15, [r7, #8]
 8002038:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800203c:	ee17 3a90 	vmov	r3, s15
 8002040:	b218      	sxth	r0, r3
 8002042:	f107 011c 	add.w	r1, r7, #28
 8002046:	2301      	movs	r3, #1
 8002048:	2200      	movs	r2, #0
 800204a:	f7ff f8a5 	bl	8001198 <broj_u_string>
	  		  lcd_string(str,2);
 800204e:	f107 031c 	add.w	r3, r7, #28
 8002052:	2102      	movs	r1, #2
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff f9b9 	bl	80013cc <lcd_string>

	  		  zastava = 0;
 800205a:	4b05      	ldr	r3, [pc, #20]	@ (8002070 <main+0x658>)
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
	  	  if (zastava == 1)	// ulaz u automatski mod dizalice
 8002060:	e575      	b.n	8001b4e <main+0x136>
 8002062:	bf00      	nop
 8002064:	f3af 8000 	nop.w
 8002068:	94e4fef3 	.word	0x94e4fef3
 800206c:	3f91df25 	.word	0x3f91df25
 8002070:	20000246 	.word	0x20000246
 8002074:	42960000 	.word	0x42960000
 8002078:	42c80000 	.word	0x42c80000
 800207c:	43f50000 	.word	0x43f50000

08002080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b094      	sub	sp, #80	@ 0x50
 8002084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002086:	f107 031c 	add.w	r3, r7, #28
 800208a:	2234      	movs	r2, #52	@ 0x34
 800208c:	2100      	movs	r1, #0
 800208e:	4618      	mov	r0, r3
 8002090:	f003 fead 	bl	8005dee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002094:	f107 0308 	add.w	r3, r7, #8
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020a4:	2300      	movs	r3, #0
 80020a6:	607b      	str	r3, [r7, #4]
 80020a8:	4b23      	ldr	r3, [pc, #140]	@ (8002138 <SystemClock_Config+0xb8>)
 80020aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ac:	4a22      	ldr	r2, [pc, #136]	@ (8002138 <SystemClock_Config+0xb8>)
 80020ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80020b4:	4b20      	ldr	r3, [pc, #128]	@ (8002138 <SystemClock_Config+0xb8>)
 80020b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80020c0:	2300      	movs	r3, #0
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	4b1d      	ldr	r3, [pc, #116]	@ (800213c <SystemClock_Config+0xbc>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80020cc:	4a1b      	ldr	r2, [pc, #108]	@ (800213c <SystemClock_Config+0xbc>)
 80020ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	4b19      	ldr	r3, [pc, #100]	@ (800213c <SystemClock_Config+0xbc>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80020dc:	603b      	str	r3, [r7, #0]
 80020de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020e0:	2302      	movs	r3, #2
 80020e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020e4:	2301      	movs	r3, #1
 80020e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020e8:	2310      	movs	r3, #16
 80020ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80020ec:	2300      	movs	r3, #0
 80020ee:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020f0:	f107 031c 	add.w	r3, r7, #28
 80020f4:	4618      	mov	r0, r3
 80020f6:	f001 fdb9 	bl	8003c6c <HAL_RCC_OscConfig>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002100:	f000 f87e 	bl	8002200 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002104:	230f      	movs	r3, #15
 8002106:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800210c:	2300      	movs	r3, #0
 800210e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002114:	2300      	movs	r3, #0
 8002116:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002118:	f107 0308 	add.w	r3, r7, #8
 800211c:	2100      	movs	r1, #0
 800211e:	4618      	mov	r0, r3
 8002120:	f001 fae0 	bl	80036e4 <HAL_RCC_ClockConfig>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800212a:	f000 f869 	bl	8002200 <Error_Handler>
  }
}
 800212e:	bf00      	nop
 8002130:	3750      	adds	r7, #80	@ 0x50
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40023800 	.word	0x40023800
 800213c:	40007000 	.word	0x40007000

08002140 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	80fb      	strh	r3, [r7, #6]
	pritisnut_pin = GPIO_Pin;	// saznaje koji je pin pokrenuo interrupt
 800214a:	4a07      	ldr	r2, [pc, #28]	@ (8002168 <HAL_GPIO_EXTI_Callback+0x28>)
 800214c:	88fb      	ldrh	r3, [r7, #6]
 800214e:	8013      	strh	r3, [r2, #0]

	__HAL_TIM_CLEAR_IT(&htim6,TIM_IT_UPDATE);	// micanje interrupta s početka countera
 8002150:	4b06      	ldr	r3, [pc, #24]	@ (800216c <HAL_GPIO_EXTI_Callback+0x2c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0201 	mvn.w	r2, #1
 8002158:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim6);	// pokreće counter
 800215a:	4804      	ldr	r0, [pc, #16]	@ (800216c <HAL_GPIO_EXTI_Callback+0x2c>)
 800215c:	f002 f874 	bl	8004248 <HAL_TIM_Base_Start_IT>
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000244 	.word	0x20000244
 800216c:	2000024c 	.word	0x2000024c

08002170 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a1b      	ldr	r2, [pc, #108]	@ (80021ec <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d130      	bne.n	80021e4 <HAL_TIM_PeriodElapsedCallback+0x74>
	{
		if (HAL_GPIO_ReadPin(GPIOC, pritisnut_pin) == GPIO_PIN_RESET)
 8002182:	4b1b      	ldr	r3, [pc, #108]	@ (80021f0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	4619      	mov	r1, r3
 8002188:	481a      	ldr	r0, [pc, #104]	@ (80021f4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800218a:	f000 fdc3 	bl	8002d14 <HAL_GPIO_ReadPin>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d124      	bne.n	80021de <HAL_TIM_PeriodElapsedCallback+0x6e>
		{	// daje vrijednost zastavici ovisno o tome koji je pin pritisnut
			if (pritisnut_pin == GPIO_PIN_5)
 8002194:	4b16      	ldr	r3, [pc, #88]	@ (80021f0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	2b20      	cmp	r3, #32
 800219a:	d102      	bne.n	80021a2 <HAL_TIM_PeriodElapsedCallback+0x32>
			{
				zastava = 1;
 800219c:	4b16      	ldr	r3, [pc, #88]	@ (80021f8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800219e:	2201      	movs	r2, #1
 80021a0:	701a      	strb	r2, [r3, #0]
			}
			if (pritisnut_pin == GPIO_PIN_6)
 80021a2:	4b13      	ldr	r3, [pc, #76]	@ (80021f0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	2b40      	cmp	r3, #64	@ 0x40
 80021a8:	d102      	bne.n	80021b0 <HAL_TIM_PeriodElapsedCallback+0x40>
			{
				zastava = 2;
 80021aa:	4b13      	ldr	r3, [pc, #76]	@ (80021f8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80021ac:	2202      	movs	r2, #2
 80021ae:	701a      	strb	r2, [r3, #0]
			}
			if (pritisnut_pin == GPIO_PIN_7)
 80021b0:	4b0f      	ldr	r3, [pc, #60]	@ (80021f0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	2b80      	cmp	r3, #128	@ 0x80
 80021b6:	d102      	bne.n	80021be <HAL_TIM_PeriodElapsedCallback+0x4e>
			{
				zastava = 3;
 80021b8:	4b0f      	ldr	r3, [pc, #60]	@ (80021f8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80021ba:	2203      	movs	r2, #3
 80021bc:	701a      	strb	r2, [r3, #0]
			}
			if (pritisnut_pin == GPIO_PIN_8)
 80021be:	4b0c      	ldr	r3, [pc, #48]	@ (80021f0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021c6:	d102      	bne.n	80021ce <HAL_TIM_PeriodElapsedCallback+0x5e>
			{
				zastava = 4;
 80021c8:	4b0b      	ldr	r3, [pc, #44]	@ (80021f8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80021ca:	2204      	movs	r2, #4
 80021cc:	701a      	strb	r2, [r3, #0]
			}
			if (pritisnut_pin == GPIO_PIN_9)
 80021ce:	4b08      	ldr	r3, [pc, #32]	@ (80021f0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021d6:	d102      	bne.n	80021de <HAL_TIM_PeriodElapsedCallback+0x6e>
			{
				zastava = 5;
 80021d8:	4b07      	ldr	r3, [pc, #28]	@ (80021f8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80021da:	2205      	movs	r2, #5
 80021dc:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_TIM_Base_Stop_IT(&htim6);	// zaustavlja counter
 80021de:	4807      	ldr	r0, [pc, #28]	@ (80021fc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80021e0:	f002 f8a2 	bl	8004328 <HAL_TIM_Base_Stop_IT>
	}
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40001000 	.word	0x40001000
 80021f0:	20000244 	.word	0x20000244
 80021f4:	40020800 	.word	0x40020800
 80021f8:	20000246 	.word	0x20000246
 80021fc:	2000024c 	.word	0x2000024c

08002200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002204:	b672      	cpsid	i
}
 8002206:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002208:	bf00      	nop
 800220a:	e7fd      	b.n	8002208 <Error_Handler+0x8>

0800220c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	607b      	str	r3, [r7, #4]
 8002216:	4b10      	ldr	r3, [pc, #64]	@ (8002258 <HAL_MspInit+0x4c>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221a:	4a0f      	ldr	r2, [pc, #60]	@ (8002258 <HAL_MspInit+0x4c>)
 800221c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002220:	6453      	str	r3, [r2, #68]	@ 0x44
 8002222:	4b0d      	ldr	r3, [pc, #52]	@ (8002258 <HAL_MspInit+0x4c>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002226:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800222a:	607b      	str	r3, [r7, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	603b      	str	r3, [r7, #0]
 8002232:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <HAL_MspInit+0x4c>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002236:	4a08      	ldr	r2, [pc, #32]	@ (8002258 <HAL_MspInit+0x4c>)
 8002238:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800223c:	6413      	str	r3, [r2, #64]	@ 0x40
 800223e:	4b06      	ldr	r3, [pc, #24]	@ (8002258 <HAL_MspInit+0x4c>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800

0800225c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002260:	bf00      	nop
 8002262:	e7fd      	b.n	8002260 <NMI_Handler+0x4>

08002264 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002268:	bf00      	nop
 800226a:	e7fd      	b.n	8002268 <HardFault_Handler+0x4>

0800226c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002270:	bf00      	nop
 8002272:	e7fd      	b.n	8002270 <MemManage_Handler+0x4>

08002274 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002278:	bf00      	nop
 800227a:	e7fd      	b.n	8002278 <BusFault_Handler+0x4>

0800227c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002280:	bf00      	nop
 8002282:	e7fd      	b.n	8002280 <UsageFault_Handler+0x4>

08002284 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022b2:	f000 fa45 	bl	8002740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}

080022ba <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80022be:	2020      	movs	r0, #32
 80022c0:	f000 fd5a 	bl	8002d78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80022c4:	2040      	movs	r0, #64	@ 0x40
 80022c6:	f000 fd57 	bl	8002d78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80022ca:	2080      	movs	r0, #128	@ 0x80
 80022cc:	f000 fd54 	bl	8002d78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80022d0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80022d4:	f000 fd50 	bl	8002d78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80022d8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80022dc:	f000 fd4c 	bl	8002d78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80022e8:	4802      	ldr	r0, [pc, #8]	@ (80022f4 <TIM6_DAC_IRQHandler+0x10>)
 80022ea:	f002 f84c 	bl	8004386 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	2000024c 	.word	0x2000024c

080022f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return 1;
 80022fc:	2301      	movs	r3, #1
}
 80022fe:	4618      	mov	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <_kill>:

int _kill(int pid, int sig)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002312:	f003 fdbf 	bl	8005e94 <__errno>
 8002316:	4603      	mov	r3, r0
 8002318:	2216      	movs	r2, #22
 800231a:	601a      	str	r2, [r3, #0]
  return -1;
 800231c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <_exit>:

void _exit (int status)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002330:	f04f 31ff 	mov.w	r1, #4294967295
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff ffe7 	bl	8002308 <_kill>
  while (1) {}    /* Make sure we hang here */
 800233a:	bf00      	nop
 800233c:	e7fd      	b.n	800233a <_exit+0x12>

0800233e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b086      	sub	sp, #24
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	e00a      	b.n	8002366 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002350:	f7fe ff04 	bl	800115c <__io_getchar>
 8002354:	4601      	mov	r1, r0
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	60ba      	str	r2, [r7, #8]
 800235c:	b2ca      	uxtb	r2, r1
 800235e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	3301      	adds	r3, #1
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	429a      	cmp	r2, r3
 800236c:	dbf0      	blt.n	8002350 <_read+0x12>
  }

  return len;
 800236e:	687b      	ldr	r3, [r7, #4]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	e009      	b.n	800239e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	60ba      	str	r2, [r7, #8]
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe fed0 	bl	8001138 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	3301      	adds	r3, #1
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	dbf1      	blt.n	800238a <_write+0x12>
  }
  return len;
 80023a6:	687b      	ldr	r3, [r7, #4]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <_close>:

int _close(int file)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023bc:	4618      	mov	r0, r3
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023d8:	605a      	str	r2, [r3, #4]
  return 0;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <_isatty>:

int _isatty(int file)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023f0:	2301      	movs	r3, #1
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023fe:	b480      	push	{r7}
 8002400:	b085      	sub	sp, #20
 8002402:	af00      	add	r7, sp, #0
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002420:	4a14      	ldr	r2, [pc, #80]	@ (8002474 <_sbrk+0x5c>)
 8002422:	4b15      	ldr	r3, [pc, #84]	@ (8002478 <_sbrk+0x60>)
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800242c:	4b13      	ldr	r3, [pc, #76]	@ (800247c <_sbrk+0x64>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d102      	bne.n	800243a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002434:	4b11      	ldr	r3, [pc, #68]	@ (800247c <_sbrk+0x64>)
 8002436:	4a12      	ldr	r2, [pc, #72]	@ (8002480 <_sbrk+0x68>)
 8002438:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800243a:	4b10      	ldr	r3, [pc, #64]	@ (800247c <_sbrk+0x64>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4413      	add	r3, r2
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	429a      	cmp	r2, r3
 8002446:	d207      	bcs.n	8002458 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002448:	f003 fd24 	bl	8005e94 <__errno>
 800244c:	4603      	mov	r3, r0
 800244e:	220c      	movs	r2, #12
 8002450:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002452:	f04f 33ff 	mov.w	r3, #4294967295
 8002456:	e009      	b.n	800246c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002458:	4b08      	ldr	r3, [pc, #32]	@ (800247c <_sbrk+0x64>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800245e:	4b07      	ldr	r3, [pc, #28]	@ (800247c <_sbrk+0x64>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4413      	add	r3, r2
 8002466:	4a05      	ldr	r2, [pc, #20]	@ (800247c <_sbrk+0x64>)
 8002468:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800246a:	68fb      	ldr	r3, [r7, #12]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20020000 	.word	0x20020000
 8002478:	00000400 	.word	0x00000400
 800247c:	20000248 	.word	0x20000248
 8002480:	20000430 	.word	0x20000430

08002484 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002488:	4b06      	ldr	r3, [pc, #24]	@ (80024a4 <SystemInit+0x20>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800248e:	4a05      	ldr	r2, [pc, #20]	@ (80024a4 <SystemInit+0x20>)
 8002490:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002494:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ae:	463b      	mov	r3, r7
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6; // koristenje TIM6 za debounce
 80024b6:	4b15      	ldr	r3, [pc, #84]	@ (800250c <MX_TIM6_Init+0x64>)
 80024b8:	4a15      	ldr	r2, [pc, #84]	@ (8002510 <MX_TIM6_Init+0x68>)
 80024ba:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999; // prescaler koji postavlja frek. na 1 kHz
 80024bc:	4b13      	ldr	r3, [pc, #76]	@ (800250c <MX_TIM6_Init+0x64>)
 80024be:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80024c2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP; // counter broji prema gore
 80024c4:	4b11      	ldr	r3, [pc, #68]	@ (800250c <MX_TIM6_Init+0x64>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99; // period countera je 100 ms uz zadanu frekvenciju
 80024ca:	4b10      	ldr	r3, [pc, #64]	@ (800250c <MX_TIM6_Init+0x64>)
 80024cc:	2263      	movs	r2, #99	@ 0x63
 80024ce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024d0:	4b0e      	ldr	r3, [pc, #56]	@ (800250c <MX_TIM6_Init+0x64>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80024d6:	480d      	ldr	r0, [pc, #52]	@ (800250c <MX_TIM6_Init+0x64>)
 80024d8:	f001 fe66 	bl	80041a8 <HAL_TIM_Base_Init>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80024e2:	f7ff fe8d 	bl	8002200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024e6:	2300      	movs	r3, #0
 80024e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ea:	2300      	movs	r3, #0
 80024ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80024ee:	463b      	mov	r3, r7
 80024f0:	4619      	mov	r1, r3
 80024f2:	4806      	ldr	r0, [pc, #24]	@ (800250c <MX_TIM6_Init+0x64>)
 80024f4:	f002 f90c 	bl	8004710 <HAL_TIMEx_MasterConfigSynchronization>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80024fe:	f7ff fe7f 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	2000024c 	.word	0x2000024c
 8002510:	40001000 	.word	0x40001000

08002514 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a0e      	ldr	r2, [pc, #56]	@ (800255c <HAL_TIM_Base_MspInit+0x48>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d115      	bne.n	8002552 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	4b0d      	ldr	r3, [pc, #52]	@ (8002560 <HAL_TIM_Base_MspInit+0x4c>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252e:	4a0c      	ldr	r2, [pc, #48]	@ (8002560 <HAL_TIM_Base_MspInit+0x4c>)
 8002530:	f043 0310 	orr.w	r3, r3, #16
 8002534:	6413      	str	r3, [r2, #64]	@ 0x40
 8002536:	4b0a      	ldr	r3, [pc, #40]	@ (8002560 <HAL_TIM_Base_MspInit+0x4c>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8002542:	2200      	movs	r2, #0
 8002544:	2103      	movs	r1, #3
 8002546:	2036      	movs	r0, #54	@ 0x36
 8002548:	f000 fa19 	bl	800297e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800254c:	2036      	movs	r0, #54	@ 0x36
 800254e:	f000 fa32 	bl	80029b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002552:	bf00      	nop
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40001000 	.word	0x40001000
 8002560:	40023800 	.word	0x40023800

08002564 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2; // korištenje USART 2
 8002568:	4b11      	ldr	r3, [pc, #68]	@ (80025b0 <MX_USART2_UART_Init+0x4c>)
 800256a:	4a12      	ldr	r2, [pc, #72]	@ (80025b4 <MX_USART2_UART_Init+0x50>)
 800256c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600; // Baud je 9600 bit/s
 800256e:	4b10      	ldr	r3, [pc, #64]	@ (80025b0 <MX_USART2_UART_Init+0x4c>)
 8002570:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002574:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B; // duljina riječi je 8 bitova
 8002576:	4b0e      	ldr	r3, [pc, #56]	@ (80025b0 <MX_USART2_UART_Init+0x4c>)
 8002578:	2200      	movs	r2, #0
 800257a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1; // jedan bit za prekid
 800257c:	4b0c      	ldr	r3, [pc, #48]	@ (80025b0 <MX_USART2_UART_Init+0x4c>)
 800257e:	2200      	movs	r2, #0
 8002580:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE; // nema pariteta
 8002582:	4b0b      	ldr	r3, [pc, #44]	@ (80025b0 <MX_USART2_UART_Init+0x4c>)
 8002584:	2200      	movs	r2, #0
 8002586:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX; // dvosmjerna komunikacija
 8002588:	4b09      	ldr	r3, [pc, #36]	@ (80025b0 <MX_USART2_UART_Init+0x4c>)
 800258a:	220c      	movs	r2, #12
 800258c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800258e:	4b08      	ldr	r3, [pc, #32]	@ (80025b0 <MX_USART2_UART_Init+0x4c>)
 8002590:	2200      	movs	r2, #0
 8002592:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002594:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <MX_USART2_UART_Init+0x4c>)
 8002596:	2200      	movs	r2, #0
 8002598:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800259a:	4805      	ldr	r0, [pc, #20]	@ (80025b0 <MX_USART2_UART_Init+0x4c>)
 800259c:	f002 f948 	bl	8004830 <HAL_UART_Init>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80025a6:	f7ff fe2b 	bl	8002200 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000294 	.word	0x20000294
 80025b4:	40004400 	.word	0x40004400

080025b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08a      	sub	sp, #40	@ 0x28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	f107 0314 	add.w	r3, r7, #20
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a19      	ldr	r2, [pc, #100]	@ (800263c <HAL_UART_MspInit+0x84>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d12b      	bne.n	8002632 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	4b18      	ldr	r3, [pc, #96]	@ (8002640 <HAL_UART_MspInit+0x88>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	4a17      	ldr	r2, [pc, #92]	@ (8002640 <HAL_UART_MspInit+0x88>)
 80025e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ea:	4b15      	ldr	r3, [pc, #84]	@ (8002640 <HAL_UART_MspInit+0x88>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	4b11      	ldr	r3, [pc, #68]	@ (8002640 <HAL_UART_MspInit+0x88>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fe:	4a10      	ldr	r2, [pc, #64]	@ (8002640 <HAL_UART_MspInit+0x88>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6313      	str	r3, [r2, #48]	@ 0x30
 8002606:	4b0e      	ldr	r3, [pc, #56]	@ (8002640 <HAL_UART_MspInit+0x88>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3; // korsti pinove PA2 i PA3
 8002612:	230c      	movs	r3, #12
 8002614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // Push-Pull mod
 8002616:	2302      	movs	r3, #2
 8002618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL; // nema otpornika prema 3.3 V ili GND
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH; // visoka frekvencija
 800261e:	2303      	movs	r3, #3
 8002620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002622:	2307      	movs	r3, #7
 8002624:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002626:	f107 0314 	add.w	r3, r7, #20
 800262a:	4619      	mov	r1, r3
 800262c:	4805      	ldr	r0, [pc, #20]	@ (8002644 <HAL_UART_MspInit+0x8c>)
 800262e:	f000 f9dd 	bl	80029ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002632:	bf00      	nop
 8002634:	3728      	adds	r7, #40	@ 0x28
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40004400 	.word	0x40004400
 8002640:	40023800 	.word	0x40023800
 8002644:	40020000 	.word	0x40020000

08002648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002648:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002680 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800264c:	f7ff ff1a 	bl	8002484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002650:	480c      	ldr	r0, [pc, #48]	@ (8002684 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002652:	490d      	ldr	r1, [pc, #52]	@ (8002688 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002654:	4a0d      	ldr	r2, [pc, #52]	@ (800268c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002658:	e002      	b.n	8002660 <LoopCopyDataInit>

0800265a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800265a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800265c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800265e:	3304      	adds	r3, #4

08002660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002664:	d3f9      	bcc.n	800265a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002666:	4a0a      	ldr	r2, [pc, #40]	@ (8002690 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002668:	4c0a      	ldr	r4, [pc, #40]	@ (8002694 <LoopFillZerobss+0x22>)
  movs r3, #0
 800266a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800266c:	e001      	b.n	8002672 <LoopFillZerobss>

0800266e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800266e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002670:	3204      	adds	r2, #4

08002672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002674:	d3fb      	bcc.n	800266e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002676:	f003 fc13 	bl	8005ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800267a:	f7ff f9cd 	bl	8001a18 <main>
  bx  lr    
 800267e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002680:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002688:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800268c:	0800a3dc 	.word	0x0800a3dc
  ldr r2, =_sbss
 8002690:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002694:	2000042c 	.word	0x2000042c

08002698 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002698:	e7fe      	b.n	8002698 <ADC_IRQHandler>
	...

0800269c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026a0:	4b0e      	ldr	r3, [pc, #56]	@ (80026dc <HAL_Init+0x40>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a0d      	ldr	r2, [pc, #52]	@ (80026dc <HAL_Init+0x40>)
 80026a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026ac:	4b0b      	ldr	r3, [pc, #44]	@ (80026dc <HAL_Init+0x40>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a0a      	ldr	r2, [pc, #40]	@ (80026dc <HAL_Init+0x40>)
 80026b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026b8:	4b08      	ldr	r3, [pc, #32]	@ (80026dc <HAL_Init+0x40>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a07      	ldr	r2, [pc, #28]	@ (80026dc <HAL_Init+0x40>)
 80026be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026c4:	2003      	movs	r0, #3
 80026c6:	f000 f94f 	bl	8002968 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ca:	200f      	movs	r0, #15
 80026cc:	f000 f808 	bl	80026e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026d0:	f7ff fd9c 	bl	800220c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023c00 	.word	0x40023c00

080026e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026e8:	4b12      	ldr	r3, [pc, #72]	@ (8002734 <HAL_InitTick+0x54>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4b12      	ldr	r3, [pc, #72]	@ (8002738 <HAL_InitTick+0x58>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	4619      	mov	r1, r3
 80026f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 f967 	bl	80029d2 <HAL_SYSTICK_Config>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e00e      	b.n	800272c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b0f      	cmp	r3, #15
 8002712:	d80a      	bhi.n	800272a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002714:	2200      	movs	r2, #0
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	f04f 30ff 	mov.w	r0, #4294967295
 800271c:	f000 f92f 	bl	800297e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002720:	4a06      	ldr	r2, [pc, #24]	@ (800273c <HAL_InitTick+0x5c>)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	e000      	b.n	800272c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
}
 800272c:	4618      	mov	r0, r3
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	20000000 	.word	0x20000000
 8002738:	20000008 	.word	0x20000008
 800273c:	20000004 	.word	0x20000004

08002740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002744:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <HAL_IncTick+0x20>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	461a      	mov	r2, r3
 800274a:	4b06      	ldr	r3, [pc, #24]	@ (8002764 <HAL_IncTick+0x24>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4413      	add	r3, r2
 8002750:	4a04      	ldr	r2, [pc, #16]	@ (8002764 <HAL_IncTick+0x24>)
 8002752:	6013      	str	r3, [r2, #0]
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	20000008 	.word	0x20000008
 8002764:	200002dc 	.word	0x200002dc

08002768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return uwTick;
 800276c:	4b03      	ldr	r3, [pc, #12]	@ (800277c <HAL_GetTick+0x14>)
 800276e:	681b      	ldr	r3, [r3, #0]
}
 8002770:	4618      	mov	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	200002dc 	.word	0x200002dc

08002780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002788:	f7ff ffee 	bl	8002768 <HAL_GetTick>
 800278c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002798:	d005      	beq.n	80027a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800279a:	4b0a      	ldr	r3, [pc, #40]	@ (80027c4 <HAL_Delay+0x44>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4413      	add	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027a6:	bf00      	nop
 80027a8:	f7ff ffde 	bl	8002768 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d8f7      	bhi.n	80027a8 <HAL_Delay+0x28>
  {
  }
}
 80027b8:	bf00      	nop
 80027ba:	bf00      	nop
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000008 	.word	0x20000008

080027c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d8:	4b0c      	ldr	r3, [pc, #48]	@ (800280c <__NVIC_SetPriorityGrouping+0x44>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027e4:	4013      	ands	r3, r2
 80027e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027fa:	4a04      	ldr	r2, [pc, #16]	@ (800280c <__NVIC_SetPriorityGrouping+0x44>)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	60d3      	str	r3, [r2, #12]
}
 8002800:	bf00      	nop
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002814:	4b04      	ldr	r3, [pc, #16]	@ (8002828 <__NVIC_GetPriorityGrouping+0x18>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	0a1b      	lsrs	r3, r3, #8
 800281a:	f003 0307 	and.w	r3, r3, #7
}
 800281e:	4618      	mov	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	2b00      	cmp	r3, #0
 800283c:	db0b      	blt.n	8002856 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	f003 021f 	and.w	r2, r3, #31
 8002844:	4907      	ldr	r1, [pc, #28]	@ (8002864 <__NVIC_EnableIRQ+0x38>)
 8002846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284a:	095b      	lsrs	r3, r3, #5
 800284c:	2001      	movs	r0, #1
 800284e:	fa00 f202 	lsl.w	r2, r0, r2
 8002852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	e000e100 	.word	0xe000e100

08002868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	6039      	str	r1, [r7, #0]
 8002872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002878:	2b00      	cmp	r3, #0
 800287a:	db0a      	blt.n	8002892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	b2da      	uxtb	r2, r3
 8002880:	490c      	ldr	r1, [pc, #48]	@ (80028b4 <__NVIC_SetPriority+0x4c>)
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	0112      	lsls	r2, r2, #4
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	440b      	add	r3, r1
 800288c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002890:	e00a      	b.n	80028a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	b2da      	uxtb	r2, r3
 8002896:	4908      	ldr	r1, [pc, #32]	@ (80028b8 <__NVIC_SetPriority+0x50>)
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	3b04      	subs	r3, #4
 80028a0:	0112      	lsls	r2, r2, #4
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	440b      	add	r3, r1
 80028a6:	761a      	strb	r2, [r3, #24]
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	e000e100 	.word	0xe000e100
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028bc:	b480      	push	{r7}
 80028be:	b089      	sub	sp, #36	@ 0x24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f1c3 0307 	rsb	r3, r3, #7
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	bf28      	it	cs
 80028da:	2304      	movcs	r3, #4
 80028dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3304      	adds	r3, #4
 80028e2:	2b06      	cmp	r3, #6
 80028e4:	d902      	bls.n	80028ec <NVIC_EncodePriority+0x30>
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3b03      	subs	r3, #3
 80028ea:	e000      	b.n	80028ee <NVIC_EncodePriority+0x32>
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f0:	f04f 32ff 	mov.w	r2, #4294967295
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43da      	mvns	r2, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	401a      	ands	r2, r3
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002904:	f04f 31ff 	mov.w	r1, #4294967295
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	fa01 f303 	lsl.w	r3, r1, r3
 800290e:	43d9      	mvns	r1, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002914:	4313      	orrs	r3, r2
         );
}
 8002916:	4618      	mov	r0, r3
 8002918:	3724      	adds	r7, #36	@ 0x24
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
	...

08002924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3b01      	subs	r3, #1
 8002930:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002934:	d301      	bcc.n	800293a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002936:	2301      	movs	r3, #1
 8002938:	e00f      	b.n	800295a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800293a:	4a0a      	ldr	r2, [pc, #40]	@ (8002964 <SysTick_Config+0x40>)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3b01      	subs	r3, #1
 8002940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002942:	210f      	movs	r1, #15
 8002944:	f04f 30ff 	mov.w	r0, #4294967295
 8002948:	f7ff ff8e 	bl	8002868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800294c:	4b05      	ldr	r3, [pc, #20]	@ (8002964 <SysTick_Config+0x40>)
 800294e:	2200      	movs	r2, #0
 8002950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002952:	4b04      	ldr	r3, [pc, #16]	@ (8002964 <SysTick_Config+0x40>)
 8002954:	2207      	movs	r2, #7
 8002956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	e000e010 	.word	0xe000e010

08002968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7ff ff29 	bl	80027c8 <__NVIC_SetPriorityGrouping>
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800297e:	b580      	push	{r7, lr}
 8002980:	b086      	sub	sp, #24
 8002982:	af00      	add	r7, sp, #0
 8002984:	4603      	mov	r3, r0
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
 800298a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002990:	f7ff ff3e 	bl	8002810 <__NVIC_GetPriorityGrouping>
 8002994:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	68b9      	ldr	r1, [r7, #8]
 800299a:	6978      	ldr	r0, [r7, #20]
 800299c:	f7ff ff8e 	bl	80028bc <NVIC_EncodePriority>
 80029a0:	4602      	mov	r2, r0
 80029a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff ff5d 	bl	8002868 <__NVIC_SetPriority>
}
 80029ae:	bf00      	nop
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	4603      	mov	r3, r0
 80029be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff ff31 	bl	800282c <__NVIC_EnableIRQ>
}
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff ffa2 	bl	8002924 <SysTick_Config>
 80029e0:	4603      	mov	r3, r0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b089      	sub	sp, #36	@ 0x24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a02:	2300      	movs	r3, #0
 8002a04:	61fb      	str	r3, [r7, #28]
 8002a06:	e165      	b.n	8002cd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a08:	2201      	movs	r2, #1
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	f040 8154 	bne.w	8002cce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d005      	beq.n	8002a3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d130      	bne.n	8002aa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	2203      	movs	r2, #3
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4013      	ands	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a74:	2201      	movs	r2, #1
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	091b      	lsrs	r3, r3, #4
 8002a8a:	f003 0201 	and.w	r2, r3, #1
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d017      	beq.n	8002adc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d123      	bne.n	8002b30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	08da      	lsrs	r2, r3, #3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3208      	adds	r2, #8
 8002af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	220f      	movs	r2, #15
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	08da      	lsrs	r2, r3, #3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3208      	adds	r2, #8
 8002b2a:	69b9      	ldr	r1, [r7, #24]
 8002b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 0203 	and.w	r2, r3, #3
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80ae 	beq.w	8002cce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	4b5d      	ldr	r3, [pc, #372]	@ (8002cec <HAL_GPIO_Init+0x300>)
 8002b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7a:	4a5c      	ldr	r2, [pc, #368]	@ (8002cec <HAL_GPIO_Init+0x300>)
 8002b7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b80:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b82:	4b5a      	ldr	r3, [pc, #360]	@ (8002cec <HAL_GPIO_Init+0x300>)
 8002b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b8e:	4a58      	ldr	r2, [pc, #352]	@ (8002cf0 <HAL_GPIO_Init+0x304>)
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	089b      	lsrs	r3, r3, #2
 8002b94:	3302      	adds	r3, #2
 8002b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	220f      	movs	r2, #15
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43db      	mvns	r3, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a4f      	ldr	r2, [pc, #316]	@ (8002cf4 <HAL_GPIO_Init+0x308>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d025      	beq.n	8002c06 <HAL_GPIO_Init+0x21a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a4e      	ldr	r2, [pc, #312]	@ (8002cf8 <HAL_GPIO_Init+0x30c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d01f      	beq.n	8002c02 <HAL_GPIO_Init+0x216>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a4d      	ldr	r2, [pc, #308]	@ (8002cfc <HAL_GPIO_Init+0x310>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d019      	beq.n	8002bfe <HAL_GPIO_Init+0x212>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a4c      	ldr	r2, [pc, #304]	@ (8002d00 <HAL_GPIO_Init+0x314>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d013      	beq.n	8002bfa <HAL_GPIO_Init+0x20e>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a4b      	ldr	r2, [pc, #300]	@ (8002d04 <HAL_GPIO_Init+0x318>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d00d      	beq.n	8002bf6 <HAL_GPIO_Init+0x20a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a4a      	ldr	r2, [pc, #296]	@ (8002d08 <HAL_GPIO_Init+0x31c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d007      	beq.n	8002bf2 <HAL_GPIO_Init+0x206>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a49      	ldr	r2, [pc, #292]	@ (8002d0c <HAL_GPIO_Init+0x320>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d101      	bne.n	8002bee <HAL_GPIO_Init+0x202>
 8002bea:	2306      	movs	r3, #6
 8002bec:	e00c      	b.n	8002c08 <HAL_GPIO_Init+0x21c>
 8002bee:	2307      	movs	r3, #7
 8002bf0:	e00a      	b.n	8002c08 <HAL_GPIO_Init+0x21c>
 8002bf2:	2305      	movs	r3, #5
 8002bf4:	e008      	b.n	8002c08 <HAL_GPIO_Init+0x21c>
 8002bf6:	2304      	movs	r3, #4
 8002bf8:	e006      	b.n	8002c08 <HAL_GPIO_Init+0x21c>
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e004      	b.n	8002c08 <HAL_GPIO_Init+0x21c>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e002      	b.n	8002c08 <HAL_GPIO_Init+0x21c>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <HAL_GPIO_Init+0x21c>
 8002c06:	2300      	movs	r3, #0
 8002c08:	69fa      	ldr	r2, [r7, #28]
 8002c0a:	f002 0203 	and.w	r2, r2, #3
 8002c0e:	0092      	lsls	r2, r2, #2
 8002c10:	4093      	lsls	r3, r2
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c18:	4935      	ldr	r1, [pc, #212]	@ (8002cf0 <HAL_GPIO_Init+0x304>)
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	089b      	lsrs	r3, r3, #2
 8002c1e:	3302      	adds	r3, #2
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c26:	4b3a      	ldr	r3, [pc, #232]	@ (8002d10 <HAL_GPIO_Init+0x324>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4013      	ands	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c4a:	4a31      	ldr	r2, [pc, #196]	@ (8002d10 <HAL_GPIO_Init+0x324>)
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c50:	4b2f      	ldr	r3, [pc, #188]	@ (8002d10 <HAL_GPIO_Init+0x324>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c74:	4a26      	ldr	r2, [pc, #152]	@ (8002d10 <HAL_GPIO_Init+0x324>)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c7a:	4b25      	ldr	r3, [pc, #148]	@ (8002d10 <HAL_GPIO_Init+0x324>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	43db      	mvns	r3, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4013      	ands	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8002d10 <HAL_GPIO_Init+0x324>)
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d10 <HAL_GPIO_Init+0x324>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cc8:	4a11      	ldr	r2, [pc, #68]	@ (8002d10 <HAL_GPIO_Init+0x324>)
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	61fb      	str	r3, [r7, #28]
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	2b0f      	cmp	r3, #15
 8002cd8:	f67f ae96 	bls.w	8002a08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cdc:	bf00      	nop
 8002cde:	bf00      	nop
 8002ce0:	3724      	adds	r7, #36	@ 0x24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40013800 	.word	0x40013800
 8002cf4:	40020000 	.word	0x40020000
 8002cf8:	40020400 	.word	0x40020400
 8002cfc:	40020800 	.word	0x40020800
 8002d00:	40020c00 	.word	0x40020c00
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40021400 	.word	0x40021400
 8002d0c:	40021800 	.word	0x40021800
 8002d10:	40013c00 	.word	0x40013c00

08002d14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691a      	ldr	r2, [r3, #16]
 8002d24:	887b      	ldrh	r3, [r7, #2]
 8002d26:	4013      	ands	r3, r2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d002      	beq.n	8002d32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
 8002d30:	e001      	b.n	8002d36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d32:	2300      	movs	r3, #0
 8002d34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	807b      	strh	r3, [r7, #2]
 8002d50:	4613      	mov	r3, r2
 8002d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d54:	787b      	ldrb	r3, [r7, #1]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d5a:	887a      	ldrh	r2, [r7, #2]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d60:	e003      	b.n	8002d6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d62:	887b      	ldrh	r3, [r7, #2]
 8002d64:	041a      	lsls	r2, r3, #16
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	619a      	str	r2, [r3, #24]
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
	...

08002d78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d82:	4b08      	ldr	r3, [pc, #32]	@ (8002da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d84:	695a      	ldr	r2, [r3, #20]
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d006      	beq.n	8002d9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d8e:	4a05      	ldr	r2, [pc, #20]	@ (8002da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d90:	88fb      	ldrh	r3, [r7, #6]
 8002d92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d94:	88fb      	ldrh	r3, [r7, #6]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff f9d2 	bl	8002140 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d9c:	bf00      	nop
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40013c00 	.word	0x40013c00

08002da8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e12b      	b.n	8003012 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d106      	bne.n	8002dd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7fe f96a 	bl	80010a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2224      	movs	r2, #36	@ 0x24
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0201 	bic.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002dfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e0c:	f000 fd5c 	bl	80038c8 <HAL_RCC_GetPCLK1Freq>
 8002e10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	4a81      	ldr	r2, [pc, #516]	@ (800301c <HAL_I2C_Init+0x274>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d807      	bhi.n	8002e2c <HAL_I2C_Init+0x84>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4a80      	ldr	r2, [pc, #512]	@ (8003020 <HAL_I2C_Init+0x278>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	bf94      	ite	ls
 8002e24:	2301      	movls	r3, #1
 8002e26:	2300      	movhi	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	e006      	b.n	8002e3a <HAL_I2C_Init+0x92>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4a7d      	ldr	r2, [pc, #500]	@ (8003024 <HAL_I2C_Init+0x27c>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	bf94      	ite	ls
 8002e34:	2301      	movls	r3, #1
 8002e36:	2300      	movhi	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e0e7      	b.n	8003012 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4a78      	ldr	r2, [pc, #480]	@ (8003028 <HAL_I2C_Init+0x280>)
 8002e46:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4a:	0c9b      	lsrs	r3, r3, #18
 8002e4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	4a6a      	ldr	r2, [pc, #424]	@ (800301c <HAL_I2C_Init+0x274>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d802      	bhi.n	8002e7c <HAL_I2C_Init+0xd4>
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	e009      	b.n	8002e90 <HAL_I2C_Init+0xe8>
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e82:	fb02 f303 	mul.w	r3, r2, r3
 8002e86:	4a69      	ldr	r2, [pc, #420]	@ (800302c <HAL_I2C_Init+0x284>)
 8002e88:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8c:	099b      	lsrs	r3, r3, #6
 8002e8e:	3301      	adds	r3, #1
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	430b      	orrs	r3, r1
 8002e96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ea2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	495c      	ldr	r1, [pc, #368]	@ (800301c <HAL_I2C_Init+0x274>)
 8002eac:	428b      	cmp	r3, r1
 8002eae:	d819      	bhi.n	8002ee4 <HAL_I2C_Init+0x13c>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	1e59      	subs	r1, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ebe:	1c59      	adds	r1, r3, #1
 8002ec0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ec4:	400b      	ands	r3, r1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <HAL_I2C_Init+0x138>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	1e59      	subs	r1, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ed8:	3301      	adds	r3, #1
 8002eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ede:	e051      	b.n	8002f84 <HAL_I2C_Init+0x1dc>
 8002ee0:	2304      	movs	r3, #4
 8002ee2:	e04f      	b.n	8002f84 <HAL_I2C_Init+0x1dc>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d111      	bne.n	8002f10 <HAL_I2C_Init+0x168>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	1e58      	subs	r0, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6859      	ldr	r1, [r3, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	440b      	add	r3, r1
 8002efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002efe:	3301      	adds	r3, #1
 8002f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	bf0c      	ite	eq
 8002f08:	2301      	moveq	r3, #1
 8002f0a:	2300      	movne	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	e012      	b.n	8002f36 <HAL_I2C_Init+0x18e>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	1e58      	subs	r0, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6859      	ldr	r1, [r3, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	0099      	lsls	r1, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f26:	3301      	adds	r3, #1
 8002f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	bf0c      	ite	eq
 8002f30:	2301      	moveq	r3, #1
 8002f32:	2300      	movne	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_I2C_Init+0x196>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e022      	b.n	8002f84 <HAL_I2C_Init+0x1dc>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10e      	bne.n	8002f64 <HAL_I2C_Init+0x1bc>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	1e58      	subs	r0, r3, #1
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6859      	ldr	r1, [r3, #4]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	440b      	add	r3, r1
 8002f54:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f58:	3301      	adds	r3, #1
 8002f5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f62:	e00f      	b.n	8002f84 <HAL_I2C_Init+0x1dc>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	1e58      	subs	r0, r3, #1
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6859      	ldr	r1, [r3, #4]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	0099      	lsls	r1, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	6809      	ldr	r1, [r1, #0]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69da      	ldr	r2, [r3, #28]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002fb2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6911      	ldr	r1, [r2, #16]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	68d2      	ldr	r2, [r2, #12]
 8002fbe:	4311      	orrs	r1, r2
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6812      	ldr	r2, [r2, #0]
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0201 	orr.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	000186a0 	.word	0x000186a0
 8003020:	001e847f 	.word	0x001e847f
 8003024:	003d08ff 	.word	0x003d08ff
 8003028:	431bde83 	.word	0x431bde83
 800302c:	10624dd3 	.word	0x10624dd3

08003030 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b088      	sub	sp, #32
 8003034:	af02      	add	r7, sp, #8
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	607a      	str	r2, [r7, #4]
 800303a:	461a      	mov	r2, r3
 800303c:	460b      	mov	r3, r1
 800303e:	817b      	strh	r3, [r7, #10]
 8003040:	4613      	mov	r3, r2
 8003042:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003044:	f7ff fb90 	bl	8002768 <HAL_GetTick>
 8003048:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b20      	cmp	r3, #32
 8003054:	f040 80e0 	bne.w	8003218 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	2319      	movs	r3, #25
 800305e:	2201      	movs	r2, #1
 8003060:	4970      	ldr	r1, [pc, #448]	@ (8003224 <HAL_I2C_Master_Transmit+0x1f4>)
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 f964 	bl	8003330 <I2C_WaitOnFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800306e:	2302      	movs	r3, #2
 8003070:	e0d3      	b.n	800321a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_I2C_Master_Transmit+0x50>
 800307c:	2302      	movs	r3, #2
 800307e:	e0cc      	b.n	800321a <HAL_I2C_Master_Transmit+0x1ea>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b01      	cmp	r3, #1
 8003094:	d007      	beq.n	80030a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 0201 	orr.w	r2, r2, #1
 80030a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2221      	movs	r2, #33	@ 0x21
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2210      	movs	r2, #16
 80030c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	893a      	ldrh	r2, [r7, #8]
 80030d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4a50      	ldr	r2, [pc, #320]	@ (8003228 <HAL_I2C_Master_Transmit+0x1f8>)
 80030e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030e8:	8979      	ldrh	r1, [r7, #10]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	6a3a      	ldr	r2, [r7, #32]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 f89c 	bl	800322c <I2C_MasterRequestWrite>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e08d      	b.n	800321a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030fe:	2300      	movs	r3, #0
 8003100:	613b      	str	r3, [r7, #16]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	613b      	str	r3, [r7, #16]
 8003112:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003114:	e066      	b.n	80031e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	6a39      	ldr	r1, [r7, #32]
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 fa22 	bl	8003564 <I2C_WaitOnTXEFlagUntilTimeout>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00d      	beq.n	8003142 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312a:	2b04      	cmp	r3, #4
 800312c:	d107      	bne.n	800313e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800313c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e06b      	b.n	800321a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003146:	781a      	ldrb	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800315c:	b29b      	uxth	r3, r3
 800315e:	3b01      	subs	r3, #1
 8003160:	b29a      	uxth	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b04      	cmp	r3, #4
 800317e:	d11b      	bne.n	80031b8 <HAL_I2C_Master_Transmit+0x188>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003184:	2b00      	cmp	r3, #0
 8003186:	d017      	beq.n	80031b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318c:	781a      	ldrb	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	6a39      	ldr	r1, [r7, #32]
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 fa19 	bl	80035f4 <I2C_WaitOnBTFFlagUntilTimeout>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00d      	beq.n	80031e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d107      	bne.n	80031e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e01a      	b.n	800321a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d194      	bne.n	8003116 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003214:	2300      	movs	r3, #0
 8003216:	e000      	b.n	800321a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003218:	2302      	movs	r3, #2
  }
}
 800321a:	4618      	mov	r0, r3
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	00100002 	.word	0x00100002
 8003228:	ffff0000 	.word	0xffff0000

0800322c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af02      	add	r7, sp, #8
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	607a      	str	r2, [r7, #4]
 8003236:	603b      	str	r3, [r7, #0]
 8003238:	460b      	mov	r3, r1
 800323a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003240:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2b08      	cmp	r3, #8
 8003246:	d006      	beq.n	8003256 <I2C_MasterRequestWrite+0x2a>
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d003      	beq.n	8003256 <I2C_MasterRequestWrite+0x2a>
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003254:	d108      	bne.n	8003268 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	e00b      	b.n	8003280 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326c:	2b12      	cmp	r3, #18
 800326e:	d107      	bne.n	8003280 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800327e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 f84f 	bl	8003330 <I2C_WaitOnFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00d      	beq.n	80032b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032a6:	d103      	bne.n	80032b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e035      	b.n	8003320 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032bc:	d108      	bne.n	80032d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032be:	897b      	ldrh	r3, [r7, #10]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	461a      	mov	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032cc:	611a      	str	r2, [r3, #16]
 80032ce:	e01b      	b.n	8003308 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032d0:	897b      	ldrh	r3, [r7, #10]
 80032d2:	11db      	asrs	r3, r3, #7
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	f003 0306 	and.w	r3, r3, #6
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	f063 030f 	orn	r3, r3, #15
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	490e      	ldr	r1, [pc, #56]	@ (8003328 <I2C_MasterRequestWrite+0xfc>)
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 f898 	bl	8003424 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e010      	b.n	8003320 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032fe:	897b      	ldrh	r3, [r7, #10]
 8003300:	b2da      	uxtb	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	4907      	ldr	r1, [pc, #28]	@ (800332c <I2C_MasterRequestWrite+0x100>)
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 f888 	bl	8003424 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	00010008 	.word	0x00010008
 800332c:	00010002 	.word	0x00010002

08003330 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	4613      	mov	r3, r2
 800333e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003340:	e048      	b.n	80033d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003348:	d044      	beq.n	80033d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334a:	f7ff fa0d 	bl	8002768 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d302      	bcc.n	8003360 <I2C_WaitOnFlagUntilTimeout+0x30>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d139      	bne.n	80033d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	0c1b      	lsrs	r3, r3, #16
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b01      	cmp	r3, #1
 8003368:	d10d      	bne.n	8003386 <I2C_WaitOnFlagUntilTimeout+0x56>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	43da      	mvns	r2, r3
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	4013      	ands	r3, r2
 8003376:	b29b      	uxth	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	bf0c      	ite	eq
 800337c:	2301      	moveq	r3, #1
 800337e:	2300      	movne	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	461a      	mov	r2, r3
 8003384:	e00c      	b.n	80033a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	43da      	mvns	r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	4013      	ands	r3, r2
 8003392:	b29b      	uxth	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	bf0c      	ite	eq
 8003398:	2301      	moveq	r3, #1
 800339a:	2300      	movne	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	461a      	mov	r2, r3
 80033a0:	79fb      	ldrb	r3, [r7, #7]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d116      	bne.n	80033d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c0:	f043 0220 	orr.w	r2, r3, #32
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e023      	b.n	800341c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	0c1b      	lsrs	r3, r3, #16
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d10d      	bne.n	80033fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	43da      	mvns	r2, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	4013      	ands	r3, r2
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf0c      	ite	eq
 80033f0:	2301      	moveq	r3, #1
 80033f2:	2300      	movne	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	461a      	mov	r2, r3
 80033f8:	e00c      	b.n	8003414 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	43da      	mvns	r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	4013      	ands	r3, r2
 8003406:	b29b      	uxth	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	bf0c      	ite	eq
 800340c:	2301      	moveq	r3, #1
 800340e:	2300      	movne	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	461a      	mov	r2, r3
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	429a      	cmp	r2, r3
 8003418:	d093      	beq.n	8003342 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
 8003430:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003432:	e071      	b.n	8003518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800343e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003442:	d123      	bne.n	800348c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003452:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800345c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2220      	movs	r2, #32
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003478:	f043 0204 	orr.w	r2, r3, #4
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e067      	b.n	800355c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003492:	d041      	beq.n	8003518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003494:	f7ff f968 	bl	8002768 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d302      	bcc.n	80034aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d136      	bne.n	8003518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	0c1b      	lsrs	r3, r3, #16
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d10c      	bne.n	80034ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	43da      	mvns	r2, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	4013      	ands	r3, r2
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	bf14      	ite	ne
 80034c6:	2301      	movne	r3, #1
 80034c8:	2300      	moveq	r3, #0
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	e00b      	b.n	80034e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	43da      	mvns	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	4013      	ands	r3, r2
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	bf14      	ite	ne
 80034e0:	2301      	movne	r3, #1
 80034e2:	2300      	moveq	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d016      	beq.n	8003518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003504:	f043 0220 	orr.w	r2, r3, #32
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e021      	b.n	800355c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	0c1b      	lsrs	r3, r3, #16
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b01      	cmp	r3, #1
 8003520:	d10c      	bne.n	800353c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	43da      	mvns	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4013      	ands	r3, r2
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	bf14      	ite	ne
 8003534:	2301      	movne	r3, #1
 8003536:	2300      	moveq	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	e00b      	b.n	8003554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	43da      	mvns	r2, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	4013      	ands	r3, r2
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	bf14      	ite	ne
 800354e:	2301      	movne	r3, #1
 8003550:	2300      	moveq	r3, #0
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	f47f af6d 	bne.w	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003570:	e034      	b.n	80035dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f886 	bl	8003684 <I2C_IsAcknowledgeFailed>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e034      	b.n	80035ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003588:	d028      	beq.n	80035dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800358a:	f7ff f8ed 	bl	8002768 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	429a      	cmp	r2, r3
 8003598:	d302      	bcc.n	80035a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d11d      	bne.n	80035dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035aa:	2b80      	cmp	r3, #128	@ 0x80
 80035ac:	d016      	beq.n	80035dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c8:	f043 0220 	orr.w	r2, r3, #32
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e007      	b.n	80035ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e6:	2b80      	cmp	r3, #128	@ 0x80
 80035e8:	d1c3      	bne.n	8003572 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003600:	e034      	b.n	800366c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 f83e 	bl	8003684 <I2C_IsAcknowledgeFailed>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e034      	b.n	800367c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003618:	d028      	beq.n	800366c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800361a:	f7ff f8a5 	bl	8002768 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	429a      	cmp	r2, r3
 8003628:	d302      	bcc.n	8003630 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d11d      	bne.n	800366c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f003 0304 	and.w	r3, r3, #4
 800363a:	2b04      	cmp	r3, #4
 800363c:	d016      	beq.n	800366c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003658:	f043 0220 	orr.w	r2, r3, #32
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e007      	b.n	800367c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b04      	cmp	r3, #4
 8003678:	d1c3      	bne.n	8003602 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003696:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800369a:	d11b      	bne.n	80036d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c0:	f043 0204 	orr.w	r2, r3, #4
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e000      	b.n	80036d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
	...

080036e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e0cc      	b.n	8003892 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036f8:	4b68      	ldr	r3, [pc, #416]	@ (800389c <HAL_RCC_ClockConfig+0x1b8>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 030f 	and.w	r3, r3, #15
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d90c      	bls.n	8003720 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003706:	4b65      	ldr	r3, [pc, #404]	@ (800389c <HAL_RCC_ClockConfig+0x1b8>)
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800370e:	4b63      	ldr	r3, [pc, #396]	@ (800389c <HAL_RCC_ClockConfig+0x1b8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d001      	beq.n	8003720 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e0b8      	b.n	8003892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d020      	beq.n	800376e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003738:	4b59      	ldr	r3, [pc, #356]	@ (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	4a58      	ldr	r2, [pc, #352]	@ (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003742:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003750:	4b53      	ldr	r3, [pc, #332]	@ (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	4a52      	ldr	r2, [pc, #328]	@ (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800375a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800375c:	4b50      	ldr	r3, [pc, #320]	@ (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	494d      	ldr	r1, [pc, #308]	@ (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	4313      	orrs	r3, r2
 800376c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d044      	beq.n	8003804 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d107      	bne.n	8003792 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003782:	4b47      	ldr	r3, [pc, #284]	@ (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d119      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e07f      	b.n	8003892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d003      	beq.n	80037a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800379e:	2b03      	cmp	r3, #3
 80037a0:	d107      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a2:	4b3f      	ldr	r3, [pc, #252]	@ (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d109      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e06f      	b.n	8003892 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b2:	4b3b      	ldr	r3, [pc, #236]	@ (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e067      	b.n	8003892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037c2:	4b37      	ldr	r3, [pc, #220]	@ (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f023 0203 	bic.w	r2, r3, #3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	4934      	ldr	r1, [pc, #208]	@ (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037d4:	f7fe ffc8 	bl	8002768 <HAL_GetTick>
 80037d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037da:	e00a      	b.n	80037f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037dc:	f7fe ffc4 	bl	8002768 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e04f      	b.n	8003892 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f2:	4b2b      	ldr	r3, [pc, #172]	@ (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 020c 	and.w	r2, r3, #12
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	429a      	cmp	r2, r3
 8003802:	d1eb      	bne.n	80037dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003804:	4b25      	ldr	r3, [pc, #148]	@ (800389c <HAL_RCC_ClockConfig+0x1b8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 030f 	and.w	r3, r3, #15
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d20c      	bcs.n	800382c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003812:	4b22      	ldr	r3, [pc, #136]	@ (800389c <HAL_RCC_ClockConfig+0x1b8>)
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800381a:	4b20      	ldr	r3, [pc, #128]	@ (800389c <HAL_RCC_ClockConfig+0x1b8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d001      	beq.n	800382c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e032      	b.n	8003892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003838:	4b19      	ldr	r3, [pc, #100]	@ (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	4916      	ldr	r1, [pc, #88]	@ (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	4313      	orrs	r3, r2
 8003848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d009      	beq.n	800386a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003856:	4b12      	ldr	r3, [pc, #72]	@ (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	490e      	ldr	r1, [pc, #56]	@ (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	4313      	orrs	r3, r2
 8003868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800386a:	f000 f855 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 800386e:	4602      	mov	r2, r0
 8003870:	4b0b      	ldr	r3, [pc, #44]	@ (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	091b      	lsrs	r3, r3, #4
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	490a      	ldr	r1, [pc, #40]	@ (80038a4 <HAL_RCC_ClockConfig+0x1c0>)
 800387c:	5ccb      	ldrb	r3, [r1, r3]
 800387e:	fa22 f303 	lsr.w	r3, r2, r3
 8003882:	4a09      	ldr	r2, [pc, #36]	@ (80038a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003886:	4b09      	ldr	r3, [pc, #36]	@ (80038ac <HAL_RCC_ClockConfig+0x1c8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f7fe ff28 	bl	80026e0 <HAL_InitTick>

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40023c00 	.word	0x40023c00
 80038a0:	40023800 	.word	0x40023800
 80038a4:	08009c40 	.word	0x08009c40
 80038a8:	20000000 	.word	0x20000000
 80038ac:	20000004 	.word	0x20000004

080038b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038b4:	4b03      	ldr	r3, [pc, #12]	@ (80038c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038b6:	681b      	ldr	r3, [r3, #0]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	20000000 	.word	0x20000000

080038c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038cc:	f7ff fff0 	bl	80038b0 <HAL_RCC_GetHCLKFreq>
 80038d0:	4602      	mov	r2, r0
 80038d2:	4b05      	ldr	r3, [pc, #20]	@ (80038e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	0a9b      	lsrs	r3, r3, #10
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	4903      	ldr	r1, [pc, #12]	@ (80038ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80038de:	5ccb      	ldrb	r3, [r1, r3]
 80038e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40023800 	.word	0x40023800
 80038ec:	08009c50 	.word	0x08009c50

080038f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038f4:	f7ff ffdc 	bl	80038b0 <HAL_RCC_GetHCLKFreq>
 80038f8:	4602      	mov	r2, r0
 80038fa:	4b05      	ldr	r3, [pc, #20]	@ (8003910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	0b5b      	lsrs	r3, r3, #13
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	4903      	ldr	r1, [pc, #12]	@ (8003914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003906:	5ccb      	ldrb	r3, [r1, r3]
 8003908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800390c:	4618      	mov	r0, r3
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40023800 	.word	0x40023800
 8003914:	08009c50 	.word	0x08009c50

08003918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800391c:	b0a6      	sub	sp, #152	@ 0x98
 800391e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003938:	2300      	movs	r3, #0
 800393a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800393e:	4bc8      	ldr	r3, [pc, #800]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x348>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 030c 	and.w	r3, r3, #12
 8003946:	2b0c      	cmp	r3, #12
 8003948:	f200 817e 	bhi.w	8003c48 <HAL_RCC_GetSysClockFreq+0x330>
 800394c:	a201      	add	r2, pc, #4	@ (adr r2, 8003954 <HAL_RCC_GetSysClockFreq+0x3c>)
 800394e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003952:	bf00      	nop
 8003954:	08003989 	.word	0x08003989
 8003958:	08003c49 	.word	0x08003c49
 800395c:	08003c49 	.word	0x08003c49
 8003960:	08003c49 	.word	0x08003c49
 8003964:	08003991 	.word	0x08003991
 8003968:	08003c49 	.word	0x08003c49
 800396c:	08003c49 	.word	0x08003c49
 8003970:	08003c49 	.word	0x08003c49
 8003974:	08003999 	.word	0x08003999
 8003978:	08003c49 	.word	0x08003c49
 800397c:	08003c49 	.word	0x08003c49
 8003980:	08003c49 	.word	0x08003c49
 8003984:	08003b03 	.word	0x08003b03
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003988:	4bb6      	ldr	r3, [pc, #728]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x34c>)
 800398a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 800398e:	e15f      	b.n	8003c50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003990:	4bb5      	ldr	r3, [pc, #724]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x350>)
 8003992:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003996:	e15b      	b.n	8003c50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003998:	4bb1      	ldr	r3, [pc, #708]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x348>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039a4:	4bae      	ldr	r3, [pc, #696]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x348>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d031      	beq.n	8003a14 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039b0:	4bab      	ldr	r3, [pc, #684]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x348>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	099b      	lsrs	r3, r3, #6
 80039b6:	2200      	movs	r2, #0
 80039b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80039bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80039c4:	2300      	movs	r3, #0
 80039c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80039c8:	4ba7      	ldr	r3, [pc, #668]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x350>)
 80039ca:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80039ce:	462a      	mov	r2, r5
 80039d0:	fb03 f202 	mul.w	r2, r3, r2
 80039d4:	2300      	movs	r3, #0
 80039d6:	4621      	mov	r1, r4
 80039d8:	fb01 f303 	mul.w	r3, r1, r3
 80039dc:	4413      	add	r3, r2
 80039de:	4aa2      	ldr	r2, [pc, #648]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x350>)
 80039e0:	4621      	mov	r1, r4
 80039e2:	fba1 1202 	umull	r1, r2, r1, r2
 80039e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80039e8:	460a      	mov	r2, r1
 80039ea:	67ba      	str	r2, [r7, #120]	@ 0x78
 80039ec:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80039ee:	4413      	add	r3, r2
 80039f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80039f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039f6:	2200      	movs	r2, #0
 80039f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039fa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80039fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a00:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003a04:	f7fd f940 	bl	8000c88 <__aeabi_uldivmod>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a12:	e064      	b.n	8003ade <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a14:	4b92      	ldr	r3, [pc, #584]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	099b      	lsrs	r3, r3, #6
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a1e:	657a      	str	r2, [r7, #84]	@ 0x54
 8003a20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a28:	2300      	movs	r3, #0
 8003a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a2c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003a30:	4622      	mov	r2, r4
 8003a32:	462b      	mov	r3, r5
 8003a34:	f04f 0000 	mov.w	r0, #0
 8003a38:	f04f 0100 	mov.w	r1, #0
 8003a3c:	0159      	lsls	r1, r3, #5
 8003a3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a42:	0150      	lsls	r0, r2, #5
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4621      	mov	r1, r4
 8003a4a:	1a51      	subs	r1, r2, r1
 8003a4c:	6139      	str	r1, [r7, #16]
 8003a4e:	4629      	mov	r1, r5
 8003a50:	eb63 0301 	sbc.w	r3, r3, r1
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a62:	4659      	mov	r1, fp
 8003a64:	018b      	lsls	r3, r1, #6
 8003a66:	4651      	mov	r1, sl
 8003a68:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a6c:	4651      	mov	r1, sl
 8003a6e:	018a      	lsls	r2, r1, #6
 8003a70:	4651      	mov	r1, sl
 8003a72:	ebb2 0801 	subs.w	r8, r2, r1
 8003a76:	4659      	mov	r1, fp
 8003a78:	eb63 0901 	sbc.w	r9, r3, r1
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a88:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a8c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a90:	4690      	mov	r8, r2
 8003a92:	4699      	mov	r9, r3
 8003a94:	4623      	mov	r3, r4
 8003a96:	eb18 0303 	adds.w	r3, r8, r3
 8003a9a:	60bb      	str	r3, [r7, #8]
 8003a9c:	462b      	mov	r3, r5
 8003a9e:	eb49 0303 	adc.w	r3, r9, r3
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ab0:	4629      	mov	r1, r5
 8003ab2:	028b      	lsls	r3, r1, #10
 8003ab4:	4621      	mov	r1, r4
 8003ab6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003aba:	4621      	mov	r1, r4
 8003abc:	028a      	lsls	r2, r1, #10
 8003abe:	4610      	mov	r0, r2
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003aca:	647a      	str	r2, [r7, #68]	@ 0x44
 8003acc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ad0:	f7fd f8da 	bl	8000c88 <__aeabi_uldivmod>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4613      	mov	r3, r2
 8003ada:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ade:	4b60      	ldr	r3, [pc, #384]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x348>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	0c1b      	lsrs	r3, r3, #16
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	3301      	adds	r3, #1
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8003af0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003af4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003b00:	e0a6      	b.n	8003c50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b02:	4b57      	ldr	r3, [pc, #348]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b0e:	4b54      	ldr	r3, [pc, #336]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d02a      	beq.n	8003b70 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b1a:	4b51      	ldr	r3, [pc, #324]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	099b      	lsrs	r3, r3, #6
 8003b20:	2200      	movs	r2, #0
 8003b22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b24:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	4b4e      	ldr	r3, [pc, #312]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x350>)
 8003b30:	fb03 f201 	mul.w	r2, r3, r1
 8003b34:	2300      	movs	r3, #0
 8003b36:	fb00 f303 	mul.w	r3, r0, r3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	4a4a      	ldr	r2, [pc, #296]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x350>)
 8003b3e:	fba0 1202 	umull	r1, r2, r0, r2
 8003b42:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b44:	460a      	mov	r2, r1
 8003b46:	673a      	str	r2, [r7, #112]	@ 0x70
 8003b48:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003b4a:	4413      	add	r3, r2
 8003b4c:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b52:	2200      	movs	r2, #0
 8003b54:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b56:	637a      	str	r2, [r7, #52]	@ 0x34
 8003b58:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003b5c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003b60:	f7fd f892 	bl	8000c88 <__aeabi_uldivmod>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	4613      	mov	r3, r2
 8003b6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b6e:	e05b      	b.n	8003c28 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b70:	4b3b      	ldr	r3, [pc, #236]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	099b      	lsrs	r3, r3, #6
 8003b76:	2200      	movs	r2, #0
 8003b78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b82:	623b      	str	r3, [r7, #32]
 8003b84:	2300      	movs	r3, #0
 8003b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b8c:	4642      	mov	r2, r8
 8003b8e:	464b      	mov	r3, r9
 8003b90:	f04f 0000 	mov.w	r0, #0
 8003b94:	f04f 0100 	mov.w	r1, #0
 8003b98:	0159      	lsls	r1, r3, #5
 8003b9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b9e:	0150      	lsls	r0, r2, #5
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4641      	mov	r1, r8
 8003ba6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003baa:	4649      	mov	r1, r9
 8003bac:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003bc4:	ebb2 040a 	subs.w	r4, r2, sl
 8003bc8:	eb63 050b 	sbc.w	r5, r3, fp
 8003bcc:	f04f 0200 	mov.w	r2, #0
 8003bd0:	f04f 0300 	mov.w	r3, #0
 8003bd4:	00eb      	lsls	r3, r5, #3
 8003bd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bda:	00e2      	lsls	r2, r4, #3
 8003bdc:	4614      	mov	r4, r2
 8003bde:	461d      	mov	r5, r3
 8003be0:	4643      	mov	r3, r8
 8003be2:	18e3      	adds	r3, r4, r3
 8003be4:	603b      	str	r3, [r7, #0]
 8003be6:	464b      	mov	r3, r9
 8003be8:	eb45 0303 	adc.w	r3, r5, r3
 8003bec:	607b      	str	r3, [r7, #4]
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bfa:	4629      	mov	r1, r5
 8003bfc:	028b      	lsls	r3, r1, #10
 8003bfe:	4621      	mov	r1, r4
 8003c00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c04:	4621      	mov	r1, r4
 8003c06:	028a      	lsls	r2, r1, #10
 8003c08:	4610      	mov	r0, r2
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c10:	2200      	movs	r2, #0
 8003c12:	61bb      	str	r3, [r7, #24]
 8003c14:	61fa      	str	r2, [r7, #28]
 8003c16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c1a:	f7fd f835 	bl	8000c88 <__aeabi_uldivmod>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	4613      	mov	r3, r2
 8003c24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003c28:	4b0d      	ldr	r3, [pc, #52]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x348>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	0f1b      	lsrs	r3, r3, #28
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8003c36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003c46:	e003      	b.n	8003c50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c48:	4b06      	ldr	r3, [pc, #24]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003c4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003c4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3798      	adds	r7, #152	@ 0x98
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c5e:	bf00      	nop
 8003c60:	40023800 	.word	0x40023800
 8003c64:	00f42400 	.word	0x00f42400
 8003c68:	017d7840 	.word	0x017d7840

08003c6c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e28d      	b.n	800419a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 8083 	beq.w	8003d92 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c8c:	4b94      	ldr	r3, [pc, #592]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 030c 	and.w	r3, r3, #12
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	d019      	beq.n	8003ccc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c98:	4b91      	ldr	r3, [pc, #580]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d106      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ca4:	4b8e      	ldr	r3, [pc, #568]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cb0:	d00c      	beq.n	8003ccc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cb2:	4b8b      	ldr	r3, [pc, #556]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003cba:	2b0c      	cmp	r3, #12
 8003cbc:	d112      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cbe:	4b88      	ldr	r3, [pc, #544]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cca:	d10b      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ccc:	4b84      	ldr	r3, [pc, #528]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d05b      	beq.n	8003d90 <HAL_RCC_OscConfig+0x124>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d157      	bne.n	8003d90 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e25a      	b.n	800419a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cec:	d106      	bne.n	8003cfc <HAL_RCC_OscConfig+0x90>
 8003cee:	4b7c      	ldr	r3, [pc, #496]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a7b      	ldr	r2, [pc, #492]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	e01d      	b.n	8003d38 <HAL_RCC_OscConfig+0xcc>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d04:	d10c      	bne.n	8003d20 <HAL_RCC_OscConfig+0xb4>
 8003d06:	4b76      	ldr	r3, [pc, #472]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a75      	ldr	r2, [pc, #468]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003d0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	4b73      	ldr	r3, [pc, #460]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a72      	ldr	r2, [pc, #456]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	e00b      	b.n	8003d38 <HAL_RCC_OscConfig+0xcc>
 8003d20:	4b6f      	ldr	r3, [pc, #444]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a6e      	ldr	r2, [pc, #440]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003d26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d2a:	6013      	str	r3, [r2, #0]
 8003d2c:	4b6c      	ldr	r3, [pc, #432]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a6b      	ldr	r2, [pc, #428]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003d32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d013      	beq.n	8003d68 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d40:	f7fe fd12 	bl	8002768 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d48:	f7fe fd0e 	bl	8002768 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b64      	cmp	r3, #100	@ 0x64
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e21f      	b.n	800419a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d5a:	4b61      	ldr	r3, [pc, #388]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0f0      	beq.n	8003d48 <HAL_RCC_OscConfig+0xdc>
 8003d66:	e014      	b.n	8003d92 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d68:	f7fe fcfe 	bl	8002768 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d70:	f7fe fcfa 	bl	8002768 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b64      	cmp	r3, #100	@ 0x64
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e20b      	b.n	800419a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d82:	4b57      	ldr	r3, [pc, #348]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f0      	bne.n	8003d70 <HAL_RCC_OscConfig+0x104>
 8003d8e:	e000      	b.n	8003d92 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d06f      	beq.n	8003e7e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d9e:	4b50      	ldr	r3, [pc, #320]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 030c 	and.w	r3, r3, #12
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d017      	beq.n	8003dda <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003daa:	4b4d      	ldr	r3, [pc, #308]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d105      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003db6:	4b4a      	ldr	r3, [pc, #296]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00b      	beq.n	8003dda <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dc2:	4b47      	ldr	r3, [pc, #284]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003dca:	2b0c      	cmp	r3, #12
 8003dcc:	d11c      	bne.n	8003e08 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dce:	4b44      	ldr	r3, [pc, #272]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d116      	bne.n	8003e08 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dda:	4b41      	ldr	r3, [pc, #260]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d005      	beq.n	8003df2 <HAL_RCC_OscConfig+0x186>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d001      	beq.n	8003df2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e1d3      	b.n	800419a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4937      	ldr	r1, [pc, #220]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e06:	e03a      	b.n	8003e7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d020      	beq.n	8003e52 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e10:	4b34      	ldr	r3, [pc, #208]	@ (8003ee4 <HAL_RCC_OscConfig+0x278>)
 8003e12:	2201      	movs	r2, #1
 8003e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e16:	f7fe fca7 	bl	8002768 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e1e:	f7fe fca3 	bl	8002768 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e1b4      	b.n	800419a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e30:	4b2b      	ldr	r3, [pc, #172]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0f0      	beq.n	8003e1e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e3c:	4b28      	ldr	r3, [pc, #160]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	4925      	ldr	r1, [pc, #148]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	600b      	str	r3, [r1, #0]
 8003e50:	e015      	b.n	8003e7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e52:	4b24      	ldr	r3, [pc, #144]	@ (8003ee4 <HAL_RCC_OscConfig+0x278>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e58:	f7fe fc86 	bl	8002768 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e60:	f7fe fc82 	bl	8002768 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e193      	b.n	800419a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e72:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1f0      	bne.n	8003e60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d036      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d016      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e92:	4b15      	ldr	r3, [pc, #84]	@ (8003ee8 <HAL_RCC_OscConfig+0x27c>)
 8003e94:	2201      	movs	r2, #1
 8003e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e98:	f7fe fc66 	bl	8002768 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ea0:	f7fe fc62 	bl	8002768 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e173      	b.n	800419a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0f0      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x234>
 8003ebe:	e01b      	b.n	8003ef8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ec0:	4b09      	ldr	r3, [pc, #36]	@ (8003ee8 <HAL_RCC_OscConfig+0x27c>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec6:	f7fe fc4f 	bl	8002768 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ecc:	e00e      	b.n	8003eec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ece:	f7fe fc4b 	bl	8002768 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d907      	bls.n	8003eec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e15c      	b.n	800419a <HAL_RCC_OscConfig+0x52e>
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	42470000 	.word	0x42470000
 8003ee8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eec:	4b8a      	ldr	r3, [pc, #552]	@ (8004118 <HAL_RCC_OscConfig+0x4ac>)
 8003eee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1ea      	bne.n	8003ece <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 8097 	beq.w	8004034 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f06:	2300      	movs	r3, #0
 8003f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f0a:	4b83      	ldr	r3, [pc, #524]	@ (8004118 <HAL_RCC_OscConfig+0x4ac>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10f      	bne.n	8003f36 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f16:	2300      	movs	r3, #0
 8003f18:	60bb      	str	r3, [r7, #8]
 8003f1a:	4b7f      	ldr	r3, [pc, #508]	@ (8004118 <HAL_RCC_OscConfig+0x4ac>)
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1e:	4a7e      	ldr	r2, [pc, #504]	@ (8004118 <HAL_RCC_OscConfig+0x4ac>)
 8003f20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f24:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f26:	4b7c      	ldr	r3, [pc, #496]	@ (8004118 <HAL_RCC_OscConfig+0x4ac>)
 8003f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f2e:	60bb      	str	r3, [r7, #8]
 8003f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f32:	2301      	movs	r3, #1
 8003f34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f36:	4b79      	ldr	r3, [pc, #484]	@ (800411c <HAL_RCC_OscConfig+0x4b0>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d118      	bne.n	8003f74 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f42:	4b76      	ldr	r3, [pc, #472]	@ (800411c <HAL_RCC_OscConfig+0x4b0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a75      	ldr	r2, [pc, #468]	@ (800411c <HAL_RCC_OscConfig+0x4b0>)
 8003f48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f4e:	f7fe fc0b 	bl	8002768 <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f56:	f7fe fc07 	bl	8002768 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e118      	b.n	800419a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f68:	4b6c      	ldr	r3, [pc, #432]	@ (800411c <HAL_RCC_OscConfig+0x4b0>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0f0      	beq.n	8003f56 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d106      	bne.n	8003f8a <HAL_RCC_OscConfig+0x31e>
 8003f7c:	4b66      	ldr	r3, [pc, #408]	@ (8004118 <HAL_RCC_OscConfig+0x4ac>)
 8003f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f80:	4a65      	ldr	r2, [pc, #404]	@ (8004118 <HAL_RCC_OscConfig+0x4ac>)
 8003f82:	f043 0301 	orr.w	r3, r3, #1
 8003f86:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f88:	e01c      	b.n	8003fc4 <HAL_RCC_OscConfig+0x358>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	2b05      	cmp	r3, #5
 8003f90:	d10c      	bne.n	8003fac <HAL_RCC_OscConfig+0x340>
 8003f92:	4b61      	ldr	r3, [pc, #388]	@ (8004118 <HAL_RCC_OscConfig+0x4ac>)
 8003f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f96:	4a60      	ldr	r2, [pc, #384]	@ (8004118 <HAL_RCC_OscConfig+0x4ac>)
 8003f98:	f043 0304 	orr.w	r3, r3, #4
 8003f9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f9e:	4b5e      	ldr	r3, [pc, #376]	@ (8004118 <HAL_RCC_OscConfig+0x4ac>)
 8003fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa2:	4a5d      	ldr	r2, [pc, #372]	@ (8004118 <HAL_RCC_OscConfig+0x4ac>)
 8003fa4:	f043 0301 	orr.w	r3, r3, #1
 8003fa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003faa:	e00b      	b.n	8003fc4 <HAL_RCC_OscConfig+0x358>
 8003fac:	4b5a      	ldr	r3, [pc, #360]	@ (8004118 <HAL_RCC_OscConfig+0x4ac>)
 8003fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb0:	4a59      	ldr	r2, [pc, #356]	@ (8004118 <HAL_RCC_OscConfig+0x4ac>)
 8003fb2:	f023 0301 	bic.w	r3, r3, #1
 8003fb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fb8:	4b57      	ldr	r3, [pc, #348]	@ (8004118 <HAL_RCC_OscConfig+0x4ac>)
 8003fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fbc:	4a56      	ldr	r2, [pc, #344]	@ (8004118 <HAL_RCC_OscConfig+0x4ac>)
 8003fbe:	f023 0304 	bic.w	r3, r3, #4
 8003fc2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d015      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fcc:	f7fe fbcc 	bl	8002768 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd2:	e00a      	b.n	8003fea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fd4:	f7fe fbc8 	bl	8002768 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e0d7      	b.n	800419a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fea:	4b4b      	ldr	r3, [pc, #300]	@ (8004118 <HAL_RCC_OscConfig+0x4ac>)
 8003fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0ee      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x368>
 8003ff6:	e014      	b.n	8004022 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff8:	f7fe fbb6 	bl	8002768 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ffe:	e00a      	b.n	8004016 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004000:	f7fe fbb2 	bl	8002768 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800400e:	4293      	cmp	r3, r2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e0c1      	b.n	800419a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004016:	4b40      	ldr	r3, [pc, #256]	@ (8004118 <HAL_RCC_OscConfig+0x4ac>)
 8004018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1ee      	bne.n	8004000 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004022:	7dfb      	ldrb	r3, [r7, #23]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d105      	bne.n	8004034 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004028:	4b3b      	ldr	r3, [pc, #236]	@ (8004118 <HAL_RCC_OscConfig+0x4ac>)
 800402a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402c:	4a3a      	ldr	r2, [pc, #232]	@ (8004118 <HAL_RCC_OscConfig+0x4ac>)
 800402e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004032:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 80ad 	beq.w	8004198 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800403e:	4b36      	ldr	r3, [pc, #216]	@ (8004118 <HAL_RCC_OscConfig+0x4ac>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 030c 	and.w	r3, r3, #12
 8004046:	2b08      	cmp	r3, #8
 8004048:	d060      	beq.n	800410c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d145      	bne.n	80040de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004052:	4b33      	ldr	r3, [pc, #204]	@ (8004120 <HAL_RCC_OscConfig+0x4b4>)
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004058:	f7fe fb86 	bl	8002768 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004060:	f7fe fb82 	bl	8002768 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e093      	b.n	800419a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004072:	4b29      	ldr	r3, [pc, #164]	@ (8004118 <HAL_RCC_OscConfig+0x4ac>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1f0      	bne.n	8004060 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69da      	ldr	r2, [r3, #28]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	431a      	orrs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408c:	019b      	lsls	r3, r3, #6
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004094:	085b      	lsrs	r3, r3, #1
 8004096:	3b01      	subs	r3, #1
 8004098:	041b      	lsls	r3, r3, #16
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a0:	061b      	lsls	r3, r3, #24
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a8:	071b      	lsls	r3, r3, #28
 80040aa:	491b      	ldr	r1, [pc, #108]	@ (8004118 <HAL_RCC_OscConfig+0x4ac>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004120 <HAL_RCC_OscConfig+0x4b4>)
 80040b2:	2201      	movs	r2, #1
 80040b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b6:	f7fe fb57 	bl	8002768 <HAL_GetTick>
 80040ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040be:	f7fe fb53 	bl	8002768 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e064      	b.n	800419a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d0:	4b11      	ldr	r3, [pc, #68]	@ (8004118 <HAL_RCC_OscConfig+0x4ac>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0f0      	beq.n	80040be <HAL_RCC_OscConfig+0x452>
 80040dc:	e05c      	b.n	8004198 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040de:	4b10      	ldr	r3, [pc, #64]	@ (8004120 <HAL_RCC_OscConfig+0x4b4>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e4:	f7fe fb40 	bl	8002768 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ec:	f7fe fb3c 	bl	8002768 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e04d      	b.n	800419a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fe:	4b06      	ldr	r3, [pc, #24]	@ (8004118 <HAL_RCC_OscConfig+0x4ac>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1f0      	bne.n	80040ec <HAL_RCC_OscConfig+0x480>
 800410a:	e045      	b.n	8004198 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d107      	bne.n	8004124 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e040      	b.n	800419a <HAL_RCC_OscConfig+0x52e>
 8004118:	40023800 	.word	0x40023800
 800411c:	40007000 	.word	0x40007000
 8004120:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004124:	4b1f      	ldr	r3, [pc, #124]	@ (80041a4 <HAL_RCC_OscConfig+0x538>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d030      	beq.n	8004194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800413c:	429a      	cmp	r2, r3
 800413e:	d129      	bne.n	8004194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800414a:	429a      	cmp	r2, r3
 800414c:	d122      	bne.n	8004194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004154:	4013      	ands	r3, r2
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800415a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800415c:	4293      	cmp	r3, r2
 800415e:	d119      	bne.n	8004194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416a:	085b      	lsrs	r3, r3, #1
 800416c:	3b01      	subs	r3, #1
 800416e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004170:	429a      	cmp	r2, r3
 8004172:	d10f      	bne.n	8004194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004180:	429a      	cmp	r2, r3
 8004182:	d107      	bne.n	8004194 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004190:	429a      	cmp	r2, r3
 8004192:	d001      	beq.n	8004198 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e000      	b.n	800419a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40023800 	.word	0x40023800

080041a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e041      	b.n	800423e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d106      	bne.n	80041d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7fe f9a0 	bl	8002514 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3304      	adds	r3, #4
 80041e4:	4619      	mov	r1, r3
 80041e6:	4610      	mov	r0, r2
 80041e8:	f000 f9e6 	bl	80045b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
	...

08004248 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b01      	cmp	r3, #1
 800425a:	d001      	beq.n	8004260 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e04e      	b.n	80042fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68da      	ldr	r2, [r3, #12]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a23      	ldr	r2, [pc, #140]	@ (800430c <HAL_TIM_Base_Start_IT+0xc4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d022      	beq.n	80042c8 <HAL_TIM_Base_Start_IT+0x80>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800428a:	d01d      	beq.n	80042c8 <HAL_TIM_Base_Start_IT+0x80>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a1f      	ldr	r2, [pc, #124]	@ (8004310 <HAL_TIM_Base_Start_IT+0xc8>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d018      	beq.n	80042c8 <HAL_TIM_Base_Start_IT+0x80>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a1e      	ldr	r2, [pc, #120]	@ (8004314 <HAL_TIM_Base_Start_IT+0xcc>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d013      	beq.n	80042c8 <HAL_TIM_Base_Start_IT+0x80>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004318 <HAL_TIM_Base_Start_IT+0xd0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00e      	beq.n	80042c8 <HAL_TIM_Base_Start_IT+0x80>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a1b      	ldr	r2, [pc, #108]	@ (800431c <HAL_TIM_Base_Start_IT+0xd4>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d009      	beq.n	80042c8 <HAL_TIM_Base_Start_IT+0x80>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a19      	ldr	r2, [pc, #100]	@ (8004320 <HAL_TIM_Base_Start_IT+0xd8>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d004      	beq.n	80042c8 <HAL_TIM_Base_Start_IT+0x80>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a18      	ldr	r2, [pc, #96]	@ (8004324 <HAL_TIM_Base_Start_IT+0xdc>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d111      	bne.n	80042ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2b06      	cmp	r3, #6
 80042d8:	d010      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f042 0201 	orr.w	r2, r2, #1
 80042e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ea:	e007      	b.n	80042fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f042 0201 	orr.w	r2, r2, #1
 80042fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40010000 	.word	0x40010000
 8004310:	40000400 	.word	0x40000400
 8004314:	40000800 	.word	0x40000800
 8004318:	40000c00 	.word	0x40000c00
 800431c:	40010400 	.word	0x40010400
 8004320:	40014000 	.word	0x40014000
 8004324:	40001800 	.word	0x40001800

08004328 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0201 	bic.w	r2, r2, #1
 800433e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6a1a      	ldr	r2, [r3, #32]
 8004346:	f241 1311 	movw	r3, #4369	@ 0x1111
 800434a:	4013      	ands	r3, r2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10f      	bne.n	8004370 <HAL_TIM_Base_Stop_IT+0x48>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6a1a      	ldr	r2, [r3, #32]
 8004356:	f240 4344 	movw	r3, #1092	@ 0x444
 800435a:	4013      	ands	r3, r2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d107      	bne.n	8004370 <HAL_TIM_Base_Stop_IT+0x48>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0201 	bic.w	r2, r2, #1
 800436e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b084      	sub	sp, #16
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d020      	beq.n	80043ea <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d01b      	beq.n	80043ea <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f06f 0202 	mvn.w	r2, #2
 80043ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	f003 0303 	and.w	r3, r3, #3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f8d2 	bl	800457a <HAL_TIM_IC_CaptureCallback>
 80043d6:	e005      	b.n	80043e4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f8c4 	bl	8004566 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f8d5 	bl	800458e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d020      	beq.n	8004436 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d01b      	beq.n	8004436 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f06f 0204 	mvn.w	r2, #4
 8004406:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f8ac 	bl	800457a <HAL_TIM_IC_CaptureCallback>
 8004422:	e005      	b.n	8004430 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f89e 	bl	8004566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f8af 	bl	800458e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	f003 0308 	and.w	r3, r3, #8
 800443c:	2b00      	cmp	r3, #0
 800443e:	d020      	beq.n	8004482 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d01b      	beq.n	8004482 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f06f 0208 	mvn.w	r2, #8
 8004452:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2204      	movs	r2, #4
 8004458:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	f003 0303 	and.w	r3, r3, #3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f886 	bl	800457a <HAL_TIM_IC_CaptureCallback>
 800446e:	e005      	b.n	800447c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f878 	bl	8004566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f889 	bl	800458e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	f003 0310 	and.w	r3, r3, #16
 8004488:	2b00      	cmp	r3, #0
 800448a:	d020      	beq.n	80044ce <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f003 0310 	and.w	r3, r3, #16
 8004492:	2b00      	cmp	r3, #0
 8004494:	d01b      	beq.n	80044ce <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f06f 0210 	mvn.w	r2, #16
 800449e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2208      	movs	r2, #8
 80044a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d003      	beq.n	80044bc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f860 	bl	800457a <HAL_TIM_IC_CaptureCallback>
 80044ba:	e005      	b.n	80044c8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f852 	bl	8004566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f863 	bl	800458e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00c      	beq.n	80044f2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d007      	beq.n	80044f2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f06f 0201 	mvn.w	r2, #1
 80044ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7fd fe3f 	bl	8002170 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00c      	beq.n	8004516 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004502:	2b00      	cmp	r3, #0
 8004504:	d007      	beq.n	8004516 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800450e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f983 	bl	800481c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00c      	beq.n	800453a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004526:	2b00      	cmp	r3, #0
 8004528:	d007      	beq.n	800453a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f834 	bl	80045a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f003 0320 	and.w	r3, r3, #32
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00c      	beq.n	800455e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b00      	cmp	r3, #0
 800454c:	d007      	beq.n	800455e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f06f 0220 	mvn.w	r2, #32
 8004556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f955 	bl	8004808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800455e:	bf00      	nop
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004566:	b480      	push	{r7}
 8004568:	b083      	sub	sp, #12
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004596:	bf00      	nop
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
	...

080045b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a46      	ldr	r2, [pc, #280]	@ (80046e4 <TIM_Base_SetConfig+0x12c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d013      	beq.n	80045f8 <TIM_Base_SetConfig+0x40>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045d6:	d00f      	beq.n	80045f8 <TIM_Base_SetConfig+0x40>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a43      	ldr	r2, [pc, #268]	@ (80046e8 <TIM_Base_SetConfig+0x130>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d00b      	beq.n	80045f8 <TIM_Base_SetConfig+0x40>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a42      	ldr	r2, [pc, #264]	@ (80046ec <TIM_Base_SetConfig+0x134>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d007      	beq.n	80045f8 <TIM_Base_SetConfig+0x40>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a41      	ldr	r2, [pc, #260]	@ (80046f0 <TIM_Base_SetConfig+0x138>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d003      	beq.n	80045f8 <TIM_Base_SetConfig+0x40>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a40      	ldr	r2, [pc, #256]	@ (80046f4 <TIM_Base_SetConfig+0x13c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d108      	bne.n	800460a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	4313      	orrs	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a35      	ldr	r2, [pc, #212]	@ (80046e4 <TIM_Base_SetConfig+0x12c>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d02b      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004618:	d027      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a32      	ldr	r2, [pc, #200]	@ (80046e8 <TIM_Base_SetConfig+0x130>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d023      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a31      	ldr	r2, [pc, #196]	@ (80046ec <TIM_Base_SetConfig+0x134>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d01f      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a30      	ldr	r2, [pc, #192]	@ (80046f0 <TIM_Base_SetConfig+0x138>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d01b      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a2f      	ldr	r2, [pc, #188]	@ (80046f4 <TIM_Base_SetConfig+0x13c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d017      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a2e      	ldr	r2, [pc, #184]	@ (80046f8 <TIM_Base_SetConfig+0x140>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d013      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a2d      	ldr	r2, [pc, #180]	@ (80046fc <TIM_Base_SetConfig+0x144>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d00f      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a2c      	ldr	r2, [pc, #176]	@ (8004700 <TIM_Base_SetConfig+0x148>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d00b      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a2b      	ldr	r2, [pc, #172]	@ (8004704 <TIM_Base_SetConfig+0x14c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d007      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a2a      	ldr	r2, [pc, #168]	@ (8004708 <TIM_Base_SetConfig+0x150>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d003      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a29      	ldr	r2, [pc, #164]	@ (800470c <TIM_Base_SetConfig+0x154>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d108      	bne.n	800467c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4313      	orrs	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a10      	ldr	r2, [pc, #64]	@ (80046e4 <TIM_Base_SetConfig+0x12c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d003      	beq.n	80046b0 <TIM_Base_SetConfig+0xf8>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a12      	ldr	r2, [pc, #72]	@ (80046f4 <TIM_Base_SetConfig+0x13c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d103      	bne.n	80046b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	691a      	ldr	r2, [r3, #16]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d105      	bne.n	80046d6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	f023 0201 	bic.w	r2, r3, #1
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	611a      	str	r2, [r3, #16]
  }
}
 80046d6:	bf00      	nop
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40010000 	.word	0x40010000
 80046e8:	40000400 	.word	0x40000400
 80046ec:	40000800 	.word	0x40000800
 80046f0:	40000c00 	.word	0x40000c00
 80046f4:	40010400 	.word	0x40010400
 80046f8:	40014000 	.word	0x40014000
 80046fc:	40014400 	.word	0x40014400
 8004700:	40014800 	.word	0x40014800
 8004704:	40001800 	.word	0x40001800
 8004708:	40001c00 	.word	0x40001c00
 800470c:	40002000 	.word	0x40002000

08004710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004720:	2b01      	cmp	r3, #1
 8004722:	d101      	bne.n	8004728 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004724:	2302      	movs	r3, #2
 8004726:	e05a      	b.n	80047de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800474e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	4313      	orrs	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a21      	ldr	r2, [pc, #132]	@ (80047ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d022      	beq.n	80047b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004774:	d01d      	beq.n	80047b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a1d      	ldr	r2, [pc, #116]	@ (80047f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d018      	beq.n	80047b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a1b      	ldr	r2, [pc, #108]	@ (80047f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d013      	beq.n	80047b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a1a      	ldr	r2, [pc, #104]	@ (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d00e      	beq.n	80047b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a18      	ldr	r2, [pc, #96]	@ (80047fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d009      	beq.n	80047b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a17      	ldr	r2, [pc, #92]	@ (8004800 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d004      	beq.n	80047b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a15      	ldr	r2, [pc, #84]	@ (8004804 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d10c      	bne.n	80047cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	40010000 	.word	0x40010000
 80047f0:	40000400 	.word	0x40000400
 80047f4:	40000800 	.word	0x40000800
 80047f8:	40000c00 	.word	0x40000c00
 80047fc:	40010400 	.word	0x40010400
 8004800:	40014000 	.word	0x40014000
 8004804:	40001800 	.word	0x40001800

08004808 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e042      	b.n	80048c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d106      	bne.n	800485c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7fd feae 	bl	80025b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2224      	movs	r2, #36	@ 0x24
 8004860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004872:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 fa09 	bl	8004c8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	691a      	ldr	r2, [r3, #16]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004888:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695a      	ldr	r2, [r3, #20]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004898:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08a      	sub	sp, #40	@ 0x28
 80048d4:	af02      	add	r7, sp, #8
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	603b      	str	r3, [r7, #0]
 80048dc:	4613      	mov	r3, r2
 80048de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b20      	cmp	r3, #32
 80048ee:	d175      	bne.n	80049dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <HAL_UART_Transmit+0x2c>
 80048f6:	88fb      	ldrh	r3, [r7, #6]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e06e      	b.n	80049de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2221      	movs	r2, #33	@ 0x21
 800490a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800490e:	f7fd ff2b 	bl	8002768 <HAL_GetTick>
 8004912:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	88fa      	ldrh	r2, [r7, #6]
 8004918:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	88fa      	ldrh	r2, [r7, #6]
 800491e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004928:	d108      	bne.n	800493c <HAL_UART_Transmit+0x6c>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d104      	bne.n	800493c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004932:	2300      	movs	r3, #0
 8004934:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	61bb      	str	r3, [r7, #24]
 800493a:	e003      	b.n	8004944 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004940:	2300      	movs	r3, #0
 8004942:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004944:	e02e      	b.n	80049a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	2200      	movs	r2, #0
 800494e:	2180      	movs	r1, #128	@ 0x80
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 f8df 	bl	8004b14 <UART_WaitOnFlagUntilTimeout>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d005      	beq.n	8004968 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e03a      	b.n	80049de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10b      	bne.n	8004986 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800497c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	3302      	adds	r3, #2
 8004982:	61bb      	str	r3, [r7, #24]
 8004984:	e007      	b.n	8004996 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	781a      	ldrb	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	3301      	adds	r3, #1
 8004994:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800499a:	b29b      	uxth	r3, r3
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1cb      	bne.n	8004946 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2200      	movs	r2, #0
 80049b6:	2140      	movs	r1, #64	@ 0x40
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 f8ab 	bl	8004b14 <UART_WaitOnFlagUntilTimeout>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e006      	b.n	80049de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80049d8:	2300      	movs	r3, #0
 80049da:	e000      	b.n	80049de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80049dc:	2302      	movs	r3, #2
  }
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3720      	adds	r7, #32
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b08a      	sub	sp, #40	@ 0x28
 80049ea:	af02      	add	r7, sp, #8
 80049ec:	60f8      	str	r0, [r7, #12]
 80049ee:	60b9      	str	r1, [r7, #8]
 80049f0:	603b      	str	r3, [r7, #0]
 80049f2:	4613      	mov	r3, r2
 80049f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b20      	cmp	r3, #32
 8004a04:	f040 8081 	bne.w	8004b0a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <HAL_UART_Receive+0x2e>
 8004a0e:	88fb      	ldrh	r3, [r7, #6]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e079      	b.n	8004b0c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2222      	movs	r2, #34	@ 0x22
 8004a22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a2c:	f7fd fe9c 	bl	8002768 <HAL_GetTick>
 8004a30:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	88fa      	ldrh	r2, [r7, #6]
 8004a36:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	88fa      	ldrh	r2, [r7, #6]
 8004a3c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a46:	d108      	bne.n	8004a5a <HAL_UART_Receive+0x74>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d104      	bne.n	8004a5a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	61bb      	str	r3, [r7, #24]
 8004a58:	e003      	b.n	8004a62 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004a62:	e047      	b.n	8004af4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	2120      	movs	r1, #32
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 f850 	bl	8004b14 <UART_WaitOnFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d005      	beq.n	8004a86 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e042      	b.n	8004b0c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10c      	bne.n	8004aa6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	3302      	adds	r3, #2
 8004aa2:	61bb      	str	r3, [r7, #24]
 8004aa4:	e01f      	b.n	8004ae6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aae:	d007      	beq.n	8004ac0 <HAL_UART_Receive+0xda>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10a      	bne.n	8004ace <HAL_UART_Receive+0xe8>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d106      	bne.n	8004ace <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	701a      	strb	r2, [r3, #0]
 8004acc:	e008      	b.n	8004ae0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1b2      	bne.n	8004a64 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004b06:	2300      	movs	r3, #0
 8004b08:	e000      	b.n	8004b0c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004b0a:	2302      	movs	r3, #2
  }
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3720      	adds	r7, #32
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	4613      	mov	r3, r2
 8004b22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b24:	e03b      	b.n	8004b9e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2c:	d037      	beq.n	8004b9e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b2e:	f7fd fe1b 	bl	8002768 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	6a3a      	ldr	r2, [r7, #32]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d302      	bcc.n	8004b44 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e03a      	b.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f003 0304 	and.w	r3, r3, #4
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d023      	beq.n	8004b9e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2b80      	cmp	r3, #128	@ 0x80
 8004b5a:	d020      	beq.n	8004b9e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2b40      	cmp	r3, #64	@ 0x40
 8004b60:	d01d      	beq.n	8004b9e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0308 	and.w	r3, r3, #8
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	d116      	bne.n	8004b9e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004b70:	2300      	movs	r3, #0
 8004b72:	617b      	str	r3, [r7, #20]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	617b      	str	r3, [r7, #20]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	617b      	str	r3, [r7, #20]
 8004b84:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 f81d 	bl	8004bc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2208      	movs	r2, #8
 8004b90:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e00f      	b.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	bf0c      	ite	eq
 8004bae:	2301      	moveq	r3, #1
 8004bb0:	2300      	movne	r3, #0
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	79fb      	ldrb	r3, [r7, #7]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d0b4      	beq.n	8004b26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b095      	sub	sp, #84	@ 0x54
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	330c      	adds	r3, #12
 8004bd4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004be4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	330c      	adds	r3, #12
 8004bec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bee:	643a      	str	r2, [r7, #64]	@ 0x40
 8004bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004bf4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004bf6:	e841 2300 	strex	r3, r2, [r1]
 8004bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1e5      	bne.n	8004bce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3314      	adds	r3, #20
 8004c08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	e853 3f00 	ldrex	r3, [r3]
 8004c10:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	f023 0301 	bic.w	r3, r3, #1
 8004c18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3314      	adds	r3, #20
 8004c20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c2a:	e841 2300 	strex	r3, r2, [r1]
 8004c2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1e5      	bne.n	8004c02 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d119      	bne.n	8004c72 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	330c      	adds	r3, #12
 8004c44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	e853 3f00 	ldrex	r3, [r3]
 8004c4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	f023 0310 	bic.w	r3, r3, #16
 8004c54:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	330c      	adds	r3, #12
 8004c5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c5e:	61ba      	str	r2, [r7, #24]
 8004c60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c62:	6979      	ldr	r1, [r7, #20]
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	e841 2300 	strex	r3, r2, [r1]
 8004c6a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1e5      	bne.n	8004c3e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004c80:	bf00      	nop
 8004c82:	3754      	adds	r7, #84	@ 0x54
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c90:	b0c0      	sub	sp, #256	@ 0x100
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca8:	68d9      	ldr	r1, [r3, #12]
 8004caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	ea40 0301 	orr.w	r3, r0, r1
 8004cb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004ce4:	f021 010c 	bic.w	r1, r1, #12
 8004ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004cf2:	430b      	orrs	r3, r1
 8004cf4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d06:	6999      	ldr	r1, [r3, #24]
 8004d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	ea40 0301 	orr.w	r3, r0, r1
 8004d12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	4b8f      	ldr	r3, [pc, #572]	@ (8004f58 <UART_SetConfig+0x2cc>)
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d005      	beq.n	8004d2c <UART_SetConfig+0xa0>
 8004d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	4b8d      	ldr	r3, [pc, #564]	@ (8004f5c <UART_SetConfig+0x2d0>)
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d104      	bne.n	8004d36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d2c:	f7fe fde0 	bl	80038f0 <HAL_RCC_GetPCLK2Freq>
 8004d30:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004d34:	e003      	b.n	8004d3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d36:	f7fe fdc7 	bl	80038c8 <HAL_RCC_GetPCLK1Freq>
 8004d3a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d48:	f040 810c 	bne.w	8004f64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d50:	2200      	movs	r2, #0
 8004d52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d56:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004d5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004d5e:	4622      	mov	r2, r4
 8004d60:	462b      	mov	r3, r5
 8004d62:	1891      	adds	r1, r2, r2
 8004d64:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004d66:	415b      	adcs	r3, r3
 8004d68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d6e:	4621      	mov	r1, r4
 8004d70:	eb12 0801 	adds.w	r8, r2, r1
 8004d74:	4629      	mov	r1, r5
 8004d76:	eb43 0901 	adc.w	r9, r3, r1
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d8e:	4690      	mov	r8, r2
 8004d90:	4699      	mov	r9, r3
 8004d92:	4623      	mov	r3, r4
 8004d94:	eb18 0303 	adds.w	r3, r8, r3
 8004d98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d9c:	462b      	mov	r3, r5
 8004d9e:	eb49 0303 	adc.w	r3, r9, r3
 8004da2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004db2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004db6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004dba:	460b      	mov	r3, r1
 8004dbc:	18db      	adds	r3, r3, r3
 8004dbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	eb42 0303 	adc.w	r3, r2, r3
 8004dc6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004dc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004dcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004dd0:	f7fb ff5a 	bl	8000c88 <__aeabi_uldivmod>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4b61      	ldr	r3, [pc, #388]	@ (8004f60 <UART_SetConfig+0x2d4>)
 8004dda:	fba3 2302 	umull	r2, r3, r3, r2
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	011c      	lsls	r4, r3, #4
 8004de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004de6:	2200      	movs	r2, #0
 8004de8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004dec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004df0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004df4:	4642      	mov	r2, r8
 8004df6:	464b      	mov	r3, r9
 8004df8:	1891      	adds	r1, r2, r2
 8004dfa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004dfc:	415b      	adcs	r3, r3
 8004dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e04:	4641      	mov	r1, r8
 8004e06:	eb12 0a01 	adds.w	sl, r2, r1
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	eb43 0b01 	adc.w	fp, r3, r1
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e24:	4692      	mov	sl, r2
 8004e26:	469b      	mov	fp, r3
 8004e28:	4643      	mov	r3, r8
 8004e2a:	eb1a 0303 	adds.w	r3, sl, r3
 8004e2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e32:	464b      	mov	r3, r9
 8004e34:	eb4b 0303 	adc.w	r3, fp, r3
 8004e38:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e48:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004e4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004e50:	460b      	mov	r3, r1
 8004e52:	18db      	adds	r3, r3, r3
 8004e54:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e56:	4613      	mov	r3, r2
 8004e58:	eb42 0303 	adc.w	r3, r2, r3
 8004e5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004e66:	f7fb ff0f 	bl	8000c88 <__aeabi_uldivmod>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	4611      	mov	r1, r2
 8004e70:	4b3b      	ldr	r3, [pc, #236]	@ (8004f60 <UART_SetConfig+0x2d4>)
 8004e72:	fba3 2301 	umull	r2, r3, r3, r1
 8004e76:	095b      	lsrs	r3, r3, #5
 8004e78:	2264      	movs	r2, #100	@ 0x64
 8004e7a:	fb02 f303 	mul.w	r3, r2, r3
 8004e7e:	1acb      	subs	r3, r1, r3
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004e86:	4b36      	ldr	r3, [pc, #216]	@ (8004f60 <UART_SetConfig+0x2d4>)
 8004e88:	fba3 2302 	umull	r2, r3, r3, r2
 8004e8c:	095b      	lsrs	r3, r3, #5
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004e94:	441c      	add	r4, r3
 8004e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ea0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ea4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ea8:	4642      	mov	r2, r8
 8004eaa:	464b      	mov	r3, r9
 8004eac:	1891      	adds	r1, r2, r2
 8004eae:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004eb0:	415b      	adcs	r3, r3
 8004eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004eb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004eb8:	4641      	mov	r1, r8
 8004eba:	1851      	adds	r1, r2, r1
 8004ebc:	6339      	str	r1, [r7, #48]	@ 0x30
 8004ebe:	4649      	mov	r1, r9
 8004ec0:	414b      	adcs	r3, r1
 8004ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ec4:	f04f 0200 	mov.w	r2, #0
 8004ec8:	f04f 0300 	mov.w	r3, #0
 8004ecc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004ed0:	4659      	mov	r1, fp
 8004ed2:	00cb      	lsls	r3, r1, #3
 8004ed4:	4651      	mov	r1, sl
 8004ed6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eda:	4651      	mov	r1, sl
 8004edc:	00ca      	lsls	r2, r1, #3
 8004ede:	4610      	mov	r0, r2
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	4642      	mov	r2, r8
 8004ee6:	189b      	adds	r3, r3, r2
 8004ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004eec:	464b      	mov	r3, r9
 8004eee:	460a      	mov	r2, r1
 8004ef0:	eb42 0303 	adc.w	r3, r2, r3
 8004ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004f08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	18db      	adds	r3, r3, r3
 8004f10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f12:	4613      	mov	r3, r2
 8004f14:	eb42 0303 	adc.w	r3, r2, r3
 8004f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004f22:	f7fb feb1 	bl	8000c88 <__aeabi_uldivmod>
 8004f26:	4602      	mov	r2, r0
 8004f28:	460b      	mov	r3, r1
 8004f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f60 <UART_SetConfig+0x2d4>)
 8004f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f30:	095b      	lsrs	r3, r3, #5
 8004f32:	2164      	movs	r1, #100	@ 0x64
 8004f34:	fb01 f303 	mul.w	r3, r1, r3
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	3332      	adds	r3, #50	@ 0x32
 8004f3e:	4a08      	ldr	r2, [pc, #32]	@ (8004f60 <UART_SetConfig+0x2d4>)
 8004f40:	fba2 2303 	umull	r2, r3, r2, r3
 8004f44:	095b      	lsrs	r3, r3, #5
 8004f46:	f003 0207 	and.w	r2, r3, #7
 8004f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4422      	add	r2, r4
 8004f52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f54:	e106      	b.n	8005164 <UART_SetConfig+0x4d8>
 8004f56:	bf00      	nop
 8004f58:	40011000 	.word	0x40011000
 8004f5c:	40011400 	.word	0x40011400
 8004f60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f6e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004f72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004f76:	4642      	mov	r2, r8
 8004f78:	464b      	mov	r3, r9
 8004f7a:	1891      	adds	r1, r2, r2
 8004f7c:	6239      	str	r1, [r7, #32]
 8004f7e:	415b      	adcs	r3, r3
 8004f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f86:	4641      	mov	r1, r8
 8004f88:	1854      	adds	r4, r2, r1
 8004f8a:	4649      	mov	r1, r9
 8004f8c:	eb43 0501 	adc.w	r5, r3, r1
 8004f90:	f04f 0200 	mov.w	r2, #0
 8004f94:	f04f 0300 	mov.w	r3, #0
 8004f98:	00eb      	lsls	r3, r5, #3
 8004f9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f9e:	00e2      	lsls	r2, r4, #3
 8004fa0:	4614      	mov	r4, r2
 8004fa2:	461d      	mov	r5, r3
 8004fa4:	4643      	mov	r3, r8
 8004fa6:	18e3      	adds	r3, r4, r3
 8004fa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004fac:	464b      	mov	r3, r9
 8004fae:	eb45 0303 	adc.w	r3, r5, r3
 8004fb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004fc2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004fc6:	f04f 0200 	mov.w	r2, #0
 8004fca:	f04f 0300 	mov.w	r3, #0
 8004fce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004fd2:	4629      	mov	r1, r5
 8004fd4:	008b      	lsls	r3, r1, #2
 8004fd6:	4621      	mov	r1, r4
 8004fd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fdc:	4621      	mov	r1, r4
 8004fde:	008a      	lsls	r2, r1, #2
 8004fe0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004fe4:	f7fb fe50 	bl	8000c88 <__aeabi_uldivmod>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4b60      	ldr	r3, [pc, #384]	@ (8005170 <UART_SetConfig+0x4e4>)
 8004fee:	fba3 2302 	umull	r2, r3, r3, r2
 8004ff2:	095b      	lsrs	r3, r3, #5
 8004ff4:	011c      	lsls	r4, r3, #4
 8004ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005000:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005004:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005008:	4642      	mov	r2, r8
 800500a:	464b      	mov	r3, r9
 800500c:	1891      	adds	r1, r2, r2
 800500e:	61b9      	str	r1, [r7, #24]
 8005010:	415b      	adcs	r3, r3
 8005012:	61fb      	str	r3, [r7, #28]
 8005014:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005018:	4641      	mov	r1, r8
 800501a:	1851      	adds	r1, r2, r1
 800501c:	6139      	str	r1, [r7, #16]
 800501e:	4649      	mov	r1, r9
 8005020:	414b      	adcs	r3, r1
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005030:	4659      	mov	r1, fp
 8005032:	00cb      	lsls	r3, r1, #3
 8005034:	4651      	mov	r1, sl
 8005036:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800503a:	4651      	mov	r1, sl
 800503c:	00ca      	lsls	r2, r1, #3
 800503e:	4610      	mov	r0, r2
 8005040:	4619      	mov	r1, r3
 8005042:	4603      	mov	r3, r0
 8005044:	4642      	mov	r2, r8
 8005046:	189b      	adds	r3, r3, r2
 8005048:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800504c:	464b      	mov	r3, r9
 800504e:	460a      	mov	r2, r1
 8005050:	eb42 0303 	adc.w	r3, r2, r3
 8005054:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005062:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	f04f 0300 	mov.w	r3, #0
 800506c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005070:	4649      	mov	r1, r9
 8005072:	008b      	lsls	r3, r1, #2
 8005074:	4641      	mov	r1, r8
 8005076:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800507a:	4641      	mov	r1, r8
 800507c:	008a      	lsls	r2, r1, #2
 800507e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005082:	f7fb fe01 	bl	8000c88 <__aeabi_uldivmod>
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	4611      	mov	r1, r2
 800508c:	4b38      	ldr	r3, [pc, #224]	@ (8005170 <UART_SetConfig+0x4e4>)
 800508e:	fba3 2301 	umull	r2, r3, r3, r1
 8005092:	095b      	lsrs	r3, r3, #5
 8005094:	2264      	movs	r2, #100	@ 0x64
 8005096:	fb02 f303 	mul.w	r3, r2, r3
 800509a:	1acb      	subs	r3, r1, r3
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	3332      	adds	r3, #50	@ 0x32
 80050a0:	4a33      	ldr	r2, [pc, #204]	@ (8005170 <UART_SetConfig+0x4e4>)
 80050a2:	fba2 2303 	umull	r2, r3, r2, r3
 80050a6:	095b      	lsrs	r3, r3, #5
 80050a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050ac:	441c      	add	r4, r3
 80050ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050b2:	2200      	movs	r2, #0
 80050b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80050b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80050b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80050bc:	4642      	mov	r2, r8
 80050be:	464b      	mov	r3, r9
 80050c0:	1891      	adds	r1, r2, r2
 80050c2:	60b9      	str	r1, [r7, #8]
 80050c4:	415b      	adcs	r3, r3
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050cc:	4641      	mov	r1, r8
 80050ce:	1851      	adds	r1, r2, r1
 80050d0:	6039      	str	r1, [r7, #0]
 80050d2:	4649      	mov	r1, r9
 80050d4:	414b      	adcs	r3, r1
 80050d6:	607b      	str	r3, [r7, #4]
 80050d8:	f04f 0200 	mov.w	r2, #0
 80050dc:	f04f 0300 	mov.w	r3, #0
 80050e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050e4:	4659      	mov	r1, fp
 80050e6:	00cb      	lsls	r3, r1, #3
 80050e8:	4651      	mov	r1, sl
 80050ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050ee:	4651      	mov	r1, sl
 80050f0:	00ca      	lsls	r2, r1, #3
 80050f2:	4610      	mov	r0, r2
 80050f4:	4619      	mov	r1, r3
 80050f6:	4603      	mov	r3, r0
 80050f8:	4642      	mov	r2, r8
 80050fa:	189b      	adds	r3, r3, r2
 80050fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050fe:	464b      	mov	r3, r9
 8005100:	460a      	mov	r2, r1
 8005102:	eb42 0303 	adc.w	r3, r2, r3
 8005106:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	663b      	str	r3, [r7, #96]	@ 0x60
 8005112:	667a      	str	r2, [r7, #100]	@ 0x64
 8005114:	f04f 0200 	mov.w	r2, #0
 8005118:	f04f 0300 	mov.w	r3, #0
 800511c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005120:	4649      	mov	r1, r9
 8005122:	008b      	lsls	r3, r1, #2
 8005124:	4641      	mov	r1, r8
 8005126:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800512a:	4641      	mov	r1, r8
 800512c:	008a      	lsls	r2, r1, #2
 800512e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005132:	f7fb fda9 	bl	8000c88 <__aeabi_uldivmod>
 8005136:	4602      	mov	r2, r0
 8005138:	460b      	mov	r3, r1
 800513a:	4b0d      	ldr	r3, [pc, #52]	@ (8005170 <UART_SetConfig+0x4e4>)
 800513c:	fba3 1302 	umull	r1, r3, r3, r2
 8005140:	095b      	lsrs	r3, r3, #5
 8005142:	2164      	movs	r1, #100	@ 0x64
 8005144:	fb01 f303 	mul.w	r3, r1, r3
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	3332      	adds	r3, #50	@ 0x32
 800514e:	4a08      	ldr	r2, [pc, #32]	@ (8005170 <UART_SetConfig+0x4e4>)
 8005150:	fba2 2303 	umull	r2, r3, r2, r3
 8005154:	095b      	lsrs	r3, r3, #5
 8005156:	f003 020f 	and.w	r2, r3, #15
 800515a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4422      	add	r2, r4
 8005162:	609a      	str	r2, [r3, #8]
}
 8005164:	bf00      	nop
 8005166:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800516a:	46bd      	mov	sp, r7
 800516c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005170:	51eb851f 	.word	0x51eb851f

08005174 <__cvt>:
 8005174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005178:	ec57 6b10 	vmov	r6, r7, d0
 800517c:	2f00      	cmp	r7, #0
 800517e:	460c      	mov	r4, r1
 8005180:	4619      	mov	r1, r3
 8005182:	463b      	mov	r3, r7
 8005184:	bfbb      	ittet	lt
 8005186:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800518a:	461f      	movlt	r7, r3
 800518c:	2300      	movge	r3, #0
 800518e:	232d      	movlt	r3, #45	@ 0x2d
 8005190:	700b      	strb	r3, [r1, #0]
 8005192:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005194:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005198:	4691      	mov	r9, r2
 800519a:	f023 0820 	bic.w	r8, r3, #32
 800519e:	bfbc      	itt	lt
 80051a0:	4632      	movlt	r2, r6
 80051a2:	4616      	movlt	r6, r2
 80051a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80051a8:	d005      	beq.n	80051b6 <__cvt+0x42>
 80051aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80051ae:	d100      	bne.n	80051b2 <__cvt+0x3e>
 80051b0:	3401      	adds	r4, #1
 80051b2:	2102      	movs	r1, #2
 80051b4:	e000      	b.n	80051b8 <__cvt+0x44>
 80051b6:	2103      	movs	r1, #3
 80051b8:	ab03      	add	r3, sp, #12
 80051ba:	9301      	str	r3, [sp, #4]
 80051bc:	ab02      	add	r3, sp, #8
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	ec47 6b10 	vmov	d0, r6, r7
 80051c4:	4653      	mov	r3, sl
 80051c6:	4622      	mov	r2, r4
 80051c8:	f000 ff1a 	bl	8006000 <_dtoa_r>
 80051cc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80051d0:	4605      	mov	r5, r0
 80051d2:	d119      	bne.n	8005208 <__cvt+0x94>
 80051d4:	f019 0f01 	tst.w	r9, #1
 80051d8:	d00e      	beq.n	80051f8 <__cvt+0x84>
 80051da:	eb00 0904 	add.w	r9, r0, r4
 80051de:	2200      	movs	r2, #0
 80051e0:	2300      	movs	r3, #0
 80051e2:	4630      	mov	r0, r6
 80051e4:	4639      	mov	r1, r7
 80051e6:	f7fb fc8f 	bl	8000b08 <__aeabi_dcmpeq>
 80051ea:	b108      	cbz	r0, 80051f0 <__cvt+0x7c>
 80051ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80051f0:	2230      	movs	r2, #48	@ 0x30
 80051f2:	9b03      	ldr	r3, [sp, #12]
 80051f4:	454b      	cmp	r3, r9
 80051f6:	d31e      	bcc.n	8005236 <__cvt+0xc2>
 80051f8:	9b03      	ldr	r3, [sp, #12]
 80051fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80051fc:	1b5b      	subs	r3, r3, r5
 80051fe:	4628      	mov	r0, r5
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	b004      	add	sp, #16
 8005204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005208:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800520c:	eb00 0904 	add.w	r9, r0, r4
 8005210:	d1e5      	bne.n	80051de <__cvt+0x6a>
 8005212:	7803      	ldrb	r3, [r0, #0]
 8005214:	2b30      	cmp	r3, #48	@ 0x30
 8005216:	d10a      	bne.n	800522e <__cvt+0xba>
 8005218:	2200      	movs	r2, #0
 800521a:	2300      	movs	r3, #0
 800521c:	4630      	mov	r0, r6
 800521e:	4639      	mov	r1, r7
 8005220:	f7fb fc72 	bl	8000b08 <__aeabi_dcmpeq>
 8005224:	b918      	cbnz	r0, 800522e <__cvt+0xba>
 8005226:	f1c4 0401 	rsb	r4, r4, #1
 800522a:	f8ca 4000 	str.w	r4, [sl]
 800522e:	f8da 3000 	ldr.w	r3, [sl]
 8005232:	4499      	add	r9, r3
 8005234:	e7d3      	b.n	80051de <__cvt+0x6a>
 8005236:	1c59      	adds	r1, r3, #1
 8005238:	9103      	str	r1, [sp, #12]
 800523a:	701a      	strb	r2, [r3, #0]
 800523c:	e7d9      	b.n	80051f2 <__cvt+0x7e>

0800523e <__exponent>:
 800523e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005240:	2900      	cmp	r1, #0
 8005242:	bfba      	itte	lt
 8005244:	4249      	neglt	r1, r1
 8005246:	232d      	movlt	r3, #45	@ 0x2d
 8005248:	232b      	movge	r3, #43	@ 0x2b
 800524a:	2909      	cmp	r1, #9
 800524c:	7002      	strb	r2, [r0, #0]
 800524e:	7043      	strb	r3, [r0, #1]
 8005250:	dd29      	ble.n	80052a6 <__exponent+0x68>
 8005252:	f10d 0307 	add.w	r3, sp, #7
 8005256:	461d      	mov	r5, r3
 8005258:	270a      	movs	r7, #10
 800525a:	461a      	mov	r2, r3
 800525c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005260:	fb07 1416 	mls	r4, r7, r6, r1
 8005264:	3430      	adds	r4, #48	@ 0x30
 8005266:	f802 4c01 	strb.w	r4, [r2, #-1]
 800526a:	460c      	mov	r4, r1
 800526c:	2c63      	cmp	r4, #99	@ 0x63
 800526e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005272:	4631      	mov	r1, r6
 8005274:	dcf1      	bgt.n	800525a <__exponent+0x1c>
 8005276:	3130      	adds	r1, #48	@ 0x30
 8005278:	1e94      	subs	r4, r2, #2
 800527a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800527e:	1c41      	adds	r1, r0, #1
 8005280:	4623      	mov	r3, r4
 8005282:	42ab      	cmp	r3, r5
 8005284:	d30a      	bcc.n	800529c <__exponent+0x5e>
 8005286:	f10d 0309 	add.w	r3, sp, #9
 800528a:	1a9b      	subs	r3, r3, r2
 800528c:	42ac      	cmp	r4, r5
 800528e:	bf88      	it	hi
 8005290:	2300      	movhi	r3, #0
 8005292:	3302      	adds	r3, #2
 8005294:	4403      	add	r3, r0
 8005296:	1a18      	subs	r0, r3, r0
 8005298:	b003      	add	sp, #12
 800529a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800529c:	f813 6b01 	ldrb.w	r6, [r3], #1
 80052a0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80052a4:	e7ed      	b.n	8005282 <__exponent+0x44>
 80052a6:	2330      	movs	r3, #48	@ 0x30
 80052a8:	3130      	adds	r1, #48	@ 0x30
 80052aa:	7083      	strb	r3, [r0, #2]
 80052ac:	70c1      	strb	r1, [r0, #3]
 80052ae:	1d03      	adds	r3, r0, #4
 80052b0:	e7f1      	b.n	8005296 <__exponent+0x58>
	...

080052b4 <_printf_float>:
 80052b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b8:	b08d      	sub	sp, #52	@ 0x34
 80052ba:	460c      	mov	r4, r1
 80052bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80052c0:	4616      	mov	r6, r2
 80052c2:	461f      	mov	r7, r3
 80052c4:	4605      	mov	r5, r0
 80052c6:	f000 fd9b 	bl	8005e00 <_localeconv_r>
 80052ca:	6803      	ldr	r3, [r0, #0]
 80052cc:	9304      	str	r3, [sp, #16]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fa ffee 	bl	80002b0 <strlen>
 80052d4:	2300      	movs	r3, #0
 80052d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80052d8:	f8d8 3000 	ldr.w	r3, [r8]
 80052dc:	9005      	str	r0, [sp, #20]
 80052de:	3307      	adds	r3, #7
 80052e0:	f023 0307 	bic.w	r3, r3, #7
 80052e4:	f103 0208 	add.w	r2, r3, #8
 80052e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80052ec:	f8d4 b000 	ldr.w	fp, [r4]
 80052f0:	f8c8 2000 	str.w	r2, [r8]
 80052f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80052f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80052fc:	9307      	str	r3, [sp, #28]
 80052fe:	f8cd 8018 	str.w	r8, [sp, #24]
 8005302:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005306:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800530a:	4b9c      	ldr	r3, [pc, #624]	@ (800557c <_printf_float+0x2c8>)
 800530c:	f04f 32ff 	mov.w	r2, #4294967295
 8005310:	f7fb fc2c 	bl	8000b6c <__aeabi_dcmpun>
 8005314:	bb70      	cbnz	r0, 8005374 <_printf_float+0xc0>
 8005316:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800531a:	4b98      	ldr	r3, [pc, #608]	@ (800557c <_printf_float+0x2c8>)
 800531c:	f04f 32ff 	mov.w	r2, #4294967295
 8005320:	f7fb fc06 	bl	8000b30 <__aeabi_dcmple>
 8005324:	bb30      	cbnz	r0, 8005374 <_printf_float+0xc0>
 8005326:	2200      	movs	r2, #0
 8005328:	2300      	movs	r3, #0
 800532a:	4640      	mov	r0, r8
 800532c:	4649      	mov	r1, r9
 800532e:	f7fb fbf5 	bl	8000b1c <__aeabi_dcmplt>
 8005332:	b110      	cbz	r0, 800533a <_printf_float+0x86>
 8005334:	232d      	movs	r3, #45	@ 0x2d
 8005336:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800533a:	4a91      	ldr	r2, [pc, #580]	@ (8005580 <_printf_float+0x2cc>)
 800533c:	4b91      	ldr	r3, [pc, #580]	@ (8005584 <_printf_float+0x2d0>)
 800533e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005342:	bf94      	ite	ls
 8005344:	4690      	movls	r8, r2
 8005346:	4698      	movhi	r8, r3
 8005348:	2303      	movs	r3, #3
 800534a:	6123      	str	r3, [r4, #16]
 800534c:	f02b 0304 	bic.w	r3, fp, #4
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	f04f 0900 	mov.w	r9, #0
 8005356:	9700      	str	r7, [sp, #0]
 8005358:	4633      	mov	r3, r6
 800535a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800535c:	4621      	mov	r1, r4
 800535e:	4628      	mov	r0, r5
 8005360:	f000 f9d2 	bl	8005708 <_printf_common>
 8005364:	3001      	adds	r0, #1
 8005366:	f040 808d 	bne.w	8005484 <_printf_float+0x1d0>
 800536a:	f04f 30ff 	mov.w	r0, #4294967295
 800536e:	b00d      	add	sp, #52	@ 0x34
 8005370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005374:	4642      	mov	r2, r8
 8005376:	464b      	mov	r3, r9
 8005378:	4640      	mov	r0, r8
 800537a:	4649      	mov	r1, r9
 800537c:	f7fb fbf6 	bl	8000b6c <__aeabi_dcmpun>
 8005380:	b140      	cbz	r0, 8005394 <_printf_float+0xe0>
 8005382:	464b      	mov	r3, r9
 8005384:	2b00      	cmp	r3, #0
 8005386:	bfbc      	itt	lt
 8005388:	232d      	movlt	r3, #45	@ 0x2d
 800538a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800538e:	4a7e      	ldr	r2, [pc, #504]	@ (8005588 <_printf_float+0x2d4>)
 8005390:	4b7e      	ldr	r3, [pc, #504]	@ (800558c <_printf_float+0x2d8>)
 8005392:	e7d4      	b.n	800533e <_printf_float+0x8a>
 8005394:	6863      	ldr	r3, [r4, #4]
 8005396:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800539a:	9206      	str	r2, [sp, #24]
 800539c:	1c5a      	adds	r2, r3, #1
 800539e:	d13b      	bne.n	8005418 <_printf_float+0x164>
 80053a0:	2306      	movs	r3, #6
 80053a2:	6063      	str	r3, [r4, #4]
 80053a4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80053a8:	2300      	movs	r3, #0
 80053aa:	6022      	str	r2, [r4, #0]
 80053ac:	9303      	str	r3, [sp, #12]
 80053ae:	ab0a      	add	r3, sp, #40	@ 0x28
 80053b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80053b4:	ab09      	add	r3, sp, #36	@ 0x24
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	6861      	ldr	r1, [r4, #4]
 80053ba:	ec49 8b10 	vmov	d0, r8, r9
 80053be:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80053c2:	4628      	mov	r0, r5
 80053c4:	f7ff fed6 	bl	8005174 <__cvt>
 80053c8:	9b06      	ldr	r3, [sp, #24]
 80053ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80053cc:	2b47      	cmp	r3, #71	@ 0x47
 80053ce:	4680      	mov	r8, r0
 80053d0:	d129      	bne.n	8005426 <_printf_float+0x172>
 80053d2:	1cc8      	adds	r0, r1, #3
 80053d4:	db02      	blt.n	80053dc <_printf_float+0x128>
 80053d6:	6863      	ldr	r3, [r4, #4]
 80053d8:	4299      	cmp	r1, r3
 80053da:	dd41      	ble.n	8005460 <_printf_float+0x1ac>
 80053dc:	f1aa 0a02 	sub.w	sl, sl, #2
 80053e0:	fa5f fa8a 	uxtb.w	sl, sl
 80053e4:	3901      	subs	r1, #1
 80053e6:	4652      	mov	r2, sl
 80053e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80053ec:	9109      	str	r1, [sp, #36]	@ 0x24
 80053ee:	f7ff ff26 	bl	800523e <__exponent>
 80053f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80053f4:	1813      	adds	r3, r2, r0
 80053f6:	2a01      	cmp	r2, #1
 80053f8:	4681      	mov	r9, r0
 80053fa:	6123      	str	r3, [r4, #16]
 80053fc:	dc02      	bgt.n	8005404 <_printf_float+0x150>
 80053fe:	6822      	ldr	r2, [r4, #0]
 8005400:	07d2      	lsls	r2, r2, #31
 8005402:	d501      	bpl.n	8005408 <_printf_float+0x154>
 8005404:	3301      	adds	r3, #1
 8005406:	6123      	str	r3, [r4, #16]
 8005408:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800540c:	2b00      	cmp	r3, #0
 800540e:	d0a2      	beq.n	8005356 <_printf_float+0xa2>
 8005410:	232d      	movs	r3, #45	@ 0x2d
 8005412:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005416:	e79e      	b.n	8005356 <_printf_float+0xa2>
 8005418:	9a06      	ldr	r2, [sp, #24]
 800541a:	2a47      	cmp	r2, #71	@ 0x47
 800541c:	d1c2      	bne.n	80053a4 <_printf_float+0xf0>
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1c0      	bne.n	80053a4 <_printf_float+0xf0>
 8005422:	2301      	movs	r3, #1
 8005424:	e7bd      	b.n	80053a2 <_printf_float+0xee>
 8005426:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800542a:	d9db      	bls.n	80053e4 <_printf_float+0x130>
 800542c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005430:	d118      	bne.n	8005464 <_printf_float+0x1b0>
 8005432:	2900      	cmp	r1, #0
 8005434:	6863      	ldr	r3, [r4, #4]
 8005436:	dd0b      	ble.n	8005450 <_printf_float+0x19c>
 8005438:	6121      	str	r1, [r4, #16]
 800543a:	b913      	cbnz	r3, 8005442 <_printf_float+0x18e>
 800543c:	6822      	ldr	r2, [r4, #0]
 800543e:	07d0      	lsls	r0, r2, #31
 8005440:	d502      	bpl.n	8005448 <_printf_float+0x194>
 8005442:	3301      	adds	r3, #1
 8005444:	440b      	add	r3, r1
 8005446:	6123      	str	r3, [r4, #16]
 8005448:	65a1      	str	r1, [r4, #88]	@ 0x58
 800544a:	f04f 0900 	mov.w	r9, #0
 800544e:	e7db      	b.n	8005408 <_printf_float+0x154>
 8005450:	b913      	cbnz	r3, 8005458 <_printf_float+0x1a4>
 8005452:	6822      	ldr	r2, [r4, #0]
 8005454:	07d2      	lsls	r2, r2, #31
 8005456:	d501      	bpl.n	800545c <_printf_float+0x1a8>
 8005458:	3302      	adds	r3, #2
 800545a:	e7f4      	b.n	8005446 <_printf_float+0x192>
 800545c:	2301      	movs	r3, #1
 800545e:	e7f2      	b.n	8005446 <_printf_float+0x192>
 8005460:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005464:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005466:	4299      	cmp	r1, r3
 8005468:	db05      	blt.n	8005476 <_printf_float+0x1c2>
 800546a:	6823      	ldr	r3, [r4, #0]
 800546c:	6121      	str	r1, [r4, #16]
 800546e:	07d8      	lsls	r0, r3, #31
 8005470:	d5ea      	bpl.n	8005448 <_printf_float+0x194>
 8005472:	1c4b      	adds	r3, r1, #1
 8005474:	e7e7      	b.n	8005446 <_printf_float+0x192>
 8005476:	2900      	cmp	r1, #0
 8005478:	bfd4      	ite	le
 800547a:	f1c1 0202 	rsble	r2, r1, #2
 800547e:	2201      	movgt	r2, #1
 8005480:	4413      	add	r3, r2
 8005482:	e7e0      	b.n	8005446 <_printf_float+0x192>
 8005484:	6823      	ldr	r3, [r4, #0]
 8005486:	055a      	lsls	r2, r3, #21
 8005488:	d407      	bmi.n	800549a <_printf_float+0x1e6>
 800548a:	6923      	ldr	r3, [r4, #16]
 800548c:	4642      	mov	r2, r8
 800548e:	4631      	mov	r1, r6
 8005490:	4628      	mov	r0, r5
 8005492:	47b8      	blx	r7
 8005494:	3001      	adds	r0, #1
 8005496:	d12b      	bne.n	80054f0 <_printf_float+0x23c>
 8005498:	e767      	b.n	800536a <_printf_float+0xb6>
 800549a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800549e:	f240 80dd 	bls.w	800565c <_printf_float+0x3a8>
 80054a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80054a6:	2200      	movs	r2, #0
 80054a8:	2300      	movs	r3, #0
 80054aa:	f7fb fb2d 	bl	8000b08 <__aeabi_dcmpeq>
 80054ae:	2800      	cmp	r0, #0
 80054b0:	d033      	beq.n	800551a <_printf_float+0x266>
 80054b2:	4a37      	ldr	r2, [pc, #220]	@ (8005590 <_printf_float+0x2dc>)
 80054b4:	2301      	movs	r3, #1
 80054b6:	4631      	mov	r1, r6
 80054b8:	4628      	mov	r0, r5
 80054ba:	47b8      	blx	r7
 80054bc:	3001      	adds	r0, #1
 80054be:	f43f af54 	beq.w	800536a <_printf_float+0xb6>
 80054c2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80054c6:	4543      	cmp	r3, r8
 80054c8:	db02      	blt.n	80054d0 <_printf_float+0x21c>
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	07d8      	lsls	r0, r3, #31
 80054ce:	d50f      	bpl.n	80054f0 <_printf_float+0x23c>
 80054d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054d4:	4631      	mov	r1, r6
 80054d6:	4628      	mov	r0, r5
 80054d8:	47b8      	blx	r7
 80054da:	3001      	adds	r0, #1
 80054dc:	f43f af45 	beq.w	800536a <_printf_float+0xb6>
 80054e0:	f04f 0900 	mov.w	r9, #0
 80054e4:	f108 38ff 	add.w	r8, r8, #4294967295
 80054e8:	f104 0a1a 	add.w	sl, r4, #26
 80054ec:	45c8      	cmp	r8, r9
 80054ee:	dc09      	bgt.n	8005504 <_printf_float+0x250>
 80054f0:	6823      	ldr	r3, [r4, #0]
 80054f2:	079b      	lsls	r3, r3, #30
 80054f4:	f100 8103 	bmi.w	80056fe <_printf_float+0x44a>
 80054f8:	68e0      	ldr	r0, [r4, #12]
 80054fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054fc:	4298      	cmp	r0, r3
 80054fe:	bfb8      	it	lt
 8005500:	4618      	movlt	r0, r3
 8005502:	e734      	b.n	800536e <_printf_float+0xba>
 8005504:	2301      	movs	r3, #1
 8005506:	4652      	mov	r2, sl
 8005508:	4631      	mov	r1, r6
 800550a:	4628      	mov	r0, r5
 800550c:	47b8      	blx	r7
 800550e:	3001      	adds	r0, #1
 8005510:	f43f af2b 	beq.w	800536a <_printf_float+0xb6>
 8005514:	f109 0901 	add.w	r9, r9, #1
 8005518:	e7e8      	b.n	80054ec <_printf_float+0x238>
 800551a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800551c:	2b00      	cmp	r3, #0
 800551e:	dc39      	bgt.n	8005594 <_printf_float+0x2e0>
 8005520:	4a1b      	ldr	r2, [pc, #108]	@ (8005590 <_printf_float+0x2dc>)
 8005522:	2301      	movs	r3, #1
 8005524:	4631      	mov	r1, r6
 8005526:	4628      	mov	r0, r5
 8005528:	47b8      	blx	r7
 800552a:	3001      	adds	r0, #1
 800552c:	f43f af1d 	beq.w	800536a <_printf_float+0xb6>
 8005530:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005534:	ea59 0303 	orrs.w	r3, r9, r3
 8005538:	d102      	bne.n	8005540 <_printf_float+0x28c>
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	07d9      	lsls	r1, r3, #31
 800553e:	d5d7      	bpl.n	80054f0 <_printf_float+0x23c>
 8005540:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005544:	4631      	mov	r1, r6
 8005546:	4628      	mov	r0, r5
 8005548:	47b8      	blx	r7
 800554a:	3001      	adds	r0, #1
 800554c:	f43f af0d 	beq.w	800536a <_printf_float+0xb6>
 8005550:	f04f 0a00 	mov.w	sl, #0
 8005554:	f104 0b1a 	add.w	fp, r4, #26
 8005558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800555a:	425b      	negs	r3, r3
 800555c:	4553      	cmp	r3, sl
 800555e:	dc01      	bgt.n	8005564 <_printf_float+0x2b0>
 8005560:	464b      	mov	r3, r9
 8005562:	e793      	b.n	800548c <_printf_float+0x1d8>
 8005564:	2301      	movs	r3, #1
 8005566:	465a      	mov	r2, fp
 8005568:	4631      	mov	r1, r6
 800556a:	4628      	mov	r0, r5
 800556c:	47b8      	blx	r7
 800556e:	3001      	adds	r0, #1
 8005570:	f43f aefb 	beq.w	800536a <_printf_float+0xb6>
 8005574:	f10a 0a01 	add.w	sl, sl, #1
 8005578:	e7ee      	b.n	8005558 <_printf_float+0x2a4>
 800557a:	bf00      	nop
 800557c:	7fefffff 	.word	0x7fefffff
 8005580:	08009c58 	.word	0x08009c58
 8005584:	08009c5c 	.word	0x08009c5c
 8005588:	08009c60 	.word	0x08009c60
 800558c:	08009c64 	.word	0x08009c64
 8005590:	08009e97 	.word	0x08009e97
 8005594:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005596:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800559a:	4553      	cmp	r3, sl
 800559c:	bfa8      	it	ge
 800559e:	4653      	movge	r3, sl
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	4699      	mov	r9, r3
 80055a4:	dc36      	bgt.n	8005614 <_printf_float+0x360>
 80055a6:	f04f 0b00 	mov.w	fp, #0
 80055aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055ae:	f104 021a 	add.w	r2, r4, #26
 80055b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80055b4:	9306      	str	r3, [sp, #24]
 80055b6:	eba3 0309 	sub.w	r3, r3, r9
 80055ba:	455b      	cmp	r3, fp
 80055bc:	dc31      	bgt.n	8005622 <_printf_float+0x36e>
 80055be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055c0:	459a      	cmp	sl, r3
 80055c2:	dc3a      	bgt.n	800563a <_printf_float+0x386>
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	07da      	lsls	r2, r3, #31
 80055c8:	d437      	bmi.n	800563a <_printf_float+0x386>
 80055ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055cc:	ebaa 0903 	sub.w	r9, sl, r3
 80055d0:	9b06      	ldr	r3, [sp, #24]
 80055d2:	ebaa 0303 	sub.w	r3, sl, r3
 80055d6:	4599      	cmp	r9, r3
 80055d8:	bfa8      	it	ge
 80055da:	4699      	movge	r9, r3
 80055dc:	f1b9 0f00 	cmp.w	r9, #0
 80055e0:	dc33      	bgt.n	800564a <_printf_float+0x396>
 80055e2:	f04f 0800 	mov.w	r8, #0
 80055e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055ea:	f104 0b1a 	add.w	fp, r4, #26
 80055ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055f0:	ebaa 0303 	sub.w	r3, sl, r3
 80055f4:	eba3 0309 	sub.w	r3, r3, r9
 80055f8:	4543      	cmp	r3, r8
 80055fa:	f77f af79 	ble.w	80054f0 <_printf_float+0x23c>
 80055fe:	2301      	movs	r3, #1
 8005600:	465a      	mov	r2, fp
 8005602:	4631      	mov	r1, r6
 8005604:	4628      	mov	r0, r5
 8005606:	47b8      	blx	r7
 8005608:	3001      	adds	r0, #1
 800560a:	f43f aeae 	beq.w	800536a <_printf_float+0xb6>
 800560e:	f108 0801 	add.w	r8, r8, #1
 8005612:	e7ec      	b.n	80055ee <_printf_float+0x33a>
 8005614:	4642      	mov	r2, r8
 8005616:	4631      	mov	r1, r6
 8005618:	4628      	mov	r0, r5
 800561a:	47b8      	blx	r7
 800561c:	3001      	adds	r0, #1
 800561e:	d1c2      	bne.n	80055a6 <_printf_float+0x2f2>
 8005620:	e6a3      	b.n	800536a <_printf_float+0xb6>
 8005622:	2301      	movs	r3, #1
 8005624:	4631      	mov	r1, r6
 8005626:	4628      	mov	r0, r5
 8005628:	9206      	str	r2, [sp, #24]
 800562a:	47b8      	blx	r7
 800562c:	3001      	adds	r0, #1
 800562e:	f43f ae9c 	beq.w	800536a <_printf_float+0xb6>
 8005632:	9a06      	ldr	r2, [sp, #24]
 8005634:	f10b 0b01 	add.w	fp, fp, #1
 8005638:	e7bb      	b.n	80055b2 <_printf_float+0x2fe>
 800563a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800563e:	4631      	mov	r1, r6
 8005640:	4628      	mov	r0, r5
 8005642:	47b8      	blx	r7
 8005644:	3001      	adds	r0, #1
 8005646:	d1c0      	bne.n	80055ca <_printf_float+0x316>
 8005648:	e68f      	b.n	800536a <_printf_float+0xb6>
 800564a:	9a06      	ldr	r2, [sp, #24]
 800564c:	464b      	mov	r3, r9
 800564e:	4442      	add	r2, r8
 8005650:	4631      	mov	r1, r6
 8005652:	4628      	mov	r0, r5
 8005654:	47b8      	blx	r7
 8005656:	3001      	adds	r0, #1
 8005658:	d1c3      	bne.n	80055e2 <_printf_float+0x32e>
 800565a:	e686      	b.n	800536a <_printf_float+0xb6>
 800565c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005660:	f1ba 0f01 	cmp.w	sl, #1
 8005664:	dc01      	bgt.n	800566a <_printf_float+0x3b6>
 8005666:	07db      	lsls	r3, r3, #31
 8005668:	d536      	bpl.n	80056d8 <_printf_float+0x424>
 800566a:	2301      	movs	r3, #1
 800566c:	4642      	mov	r2, r8
 800566e:	4631      	mov	r1, r6
 8005670:	4628      	mov	r0, r5
 8005672:	47b8      	blx	r7
 8005674:	3001      	adds	r0, #1
 8005676:	f43f ae78 	beq.w	800536a <_printf_float+0xb6>
 800567a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800567e:	4631      	mov	r1, r6
 8005680:	4628      	mov	r0, r5
 8005682:	47b8      	blx	r7
 8005684:	3001      	adds	r0, #1
 8005686:	f43f ae70 	beq.w	800536a <_printf_float+0xb6>
 800568a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800568e:	2200      	movs	r2, #0
 8005690:	2300      	movs	r3, #0
 8005692:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005696:	f7fb fa37 	bl	8000b08 <__aeabi_dcmpeq>
 800569a:	b9c0      	cbnz	r0, 80056ce <_printf_float+0x41a>
 800569c:	4653      	mov	r3, sl
 800569e:	f108 0201 	add.w	r2, r8, #1
 80056a2:	4631      	mov	r1, r6
 80056a4:	4628      	mov	r0, r5
 80056a6:	47b8      	blx	r7
 80056a8:	3001      	adds	r0, #1
 80056aa:	d10c      	bne.n	80056c6 <_printf_float+0x412>
 80056ac:	e65d      	b.n	800536a <_printf_float+0xb6>
 80056ae:	2301      	movs	r3, #1
 80056b0:	465a      	mov	r2, fp
 80056b2:	4631      	mov	r1, r6
 80056b4:	4628      	mov	r0, r5
 80056b6:	47b8      	blx	r7
 80056b8:	3001      	adds	r0, #1
 80056ba:	f43f ae56 	beq.w	800536a <_printf_float+0xb6>
 80056be:	f108 0801 	add.w	r8, r8, #1
 80056c2:	45d0      	cmp	r8, sl
 80056c4:	dbf3      	blt.n	80056ae <_printf_float+0x3fa>
 80056c6:	464b      	mov	r3, r9
 80056c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80056cc:	e6df      	b.n	800548e <_printf_float+0x1da>
 80056ce:	f04f 0800 	mov.w	r8, #0
 80056d2:	f104 0b1a 	add.w	fp, r4, #26
 80056d6:	e7f4      	b.n	80056c2 <_printf_float+0x40e>
 80056d8:	2301      	movs	r3, #1
 80056da:	4642      	mov	r2, r8
 80056dc:	e7e1      	b.n	80056a2 <_printf_float+0x3ee>
 80056de:	2301      	movs	r3, #1
 80056e0:	464a      	mov	r2, r9
 80056e2:	4631      	mov	r1, r6
 80056e4:	4628      	mov	r0, r5
 80056e6:	47b8      	blx	r7
 80056e8:	3001      	adds	r0, #1
 80056ea:	f43f ae3e 	beq.w	800536a <_printf_float+0xb6>
 80056ee:	f108 0801 	add.w	r8, r8, #1
 80056f2:	68e3      	ldr	r3, [r4, #12]
 80056f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80056f6:	1a5b      	subs	r3, r3, r1
 80056f8:	4543      	cmp	r3, r8
 80056fa:	dcf0      	bgt.n	80056de <_printf_float+0x42a>
 80056fc:	e6fc      	b.n	80054f8 <_printf_float+0x244>
 80056fe:	f04f 0800 	mov.w	r8, #0
 8005702:	f104 0919 	add.w	r9, r4, #25
 8005706:	e7f4      	b.n	80056f2 <_printf_float+0x43e>

08005708 <_printf_common>:
 8005708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800570c:	4616      	mov	r6, r2
 800570e:	4698      	mov	r8, r3
 8005710:	688a      	ldr	r2, [r1, #8]
 8005712:	690b      	ldr	r3, [r1, #16]
 8005714:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005718:	4293      	cmp	r3, r2
 800571a:	bfb8      	it	lt
 800571c:	4613      	movlt	r3, r2
 800571e:	6033      	str	r3, [r6, #0]
 8005720:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005724:	4607      	mov	r7, r0
 8005726:	460c      	mov	r4, r1
 8005728:	b10a      	cbz	r2, 800572e <_printf_common+0x26>
 800572a:	3301      	adds	r3, #1
 800572c:	6033      	str	r3, [r6, #0]
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	0699      	lsls	r1, r3, #26
 8005732:	bf42      	ittt	mi
 8005734:	6833      	ldrmi	r3, [r6, #0]
 8005736:	3302      	addmi	r3, #2
 8005738:	6033      	strmi	r3, [r6, #0]
 800573a:	6825      	ldr	r5, [r4, #0]
 800573c:	f015 0506 	ands.w	r5, r5, #6
 8005740:	d106      	bne.n	8005750 <_printf_common+0x48>
 8005742:	f104 0a19 	add.w	sl, r4, #25
 8005746:	68e3      	ldr	r3, [r4, #12]
 8005748:	6832      	ldr	r2, [r6, #0]
 800574a:	1a9b      	subs	r3, r3, r2
 800574c:	42ab      	cmp	r3, r5
 800574e:	dc26      	bgt.n	800579e <_printf_common+0x96>
 8005750:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005754:	6822      	ldr	r2, [r4, #0]
 8005756:	3b00      	subs	r3, #0
 8005758:	bf18      	it	ne
 800575a:	2301      	movne	r3, #1
 800575c:	0692      	lsls	r2, r2, #26
 800575e:	d42b      	bmi.n	80057b8 <_printf_common+0xb0>
 8005760:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005764:	4641      	mov	r1, r8
 8005766:	4638      	mov	r0, r7
 8005768:	47c8      	blx	r9
 800576a:	3001      	adds	r0, #1
 800576c:	d01e      	beq.n	80057ac <_printf_common+0xa4>
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	6922      	ldr	r2, [r4, #16]
 8005772:	f003 0306 	and.w	r3, r3, #6
 8005776:	2b04      	cmp	r3, #4
 8005778:	bf02      	ittt	eq
 800577a:	68e5      	ldreq	r5, [r4, #12]
 800577c:	6833      	ldreq	r3, [r6, #0]
 800577e:	1aed      	subeq	r5, r5, r3
 8005780:	68a3      	ldr	r3, [r4, #8]
 8005782:	bf0c      	ite	eq
 8005784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005788:	2500      	movne	r5, #0
 800578a:	4293      	cmp	r3, r2
 800578c:	bfc4      	itt	gt
 800578e:	1a9b      	subgt	r3, r3, r2
 8005790:	18ed      	addgt	r5, r5, r3
 8005792:	2600      	movs	r6, #0
 8005794:	341a      	adds	r4, #26
 8005796:	42b5      	cmp	r5, r6
 8005798:	d11a      	bne.n	80057d0 <_printf_common+0xc8>
 800579a:	2000      	movs	r0, #0
 800579c:	e008      	b.n	80057b0 <_printf_common+0xa8>
 800579e:	2301      	movs	r3, #1
 80057a0:	4652      	mov	r2, sl
 80057a2:	4641      	mov	r1, r8
 80057a4:	4638      	mov	r0, r7
 80057a6:	47c8      	blx	r9
 80057a8:	3001      	adds	r0, #1
 80057aa:	d103      	bne.n	80057b4 <_printf_common+0xac>
 80057ac:	f04f 30ff 	mov.w	r0, #4294967295
 80057b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057b4:	3501      	adds	r5, #1
 80057b6:	e7c6      	b.n	8005746 <_printf_common+0x3e>
 80057b8:	18e1      	adds	r1, r4, r3
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	2030      	movs	r0, #48	@ 0x30
 80057be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80057c2:	4422      	add	r2, r4
 80057c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80057c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80057cc:	3302      	adds	r3, #2
 80057ce:	e7c7      	b.n	8005760 <_printf_common+0x58>
 80057d0:	2301      	movs	r3, #1
 80057d2:	4622      	mov	r2, r4
 80057d4:	4641      	mov	r1, r8
 80057d6:	4638      	mov	r0, r7
 80057d8:	47c8      	blx	r9
 80057da:	3001      	adds	r0, #1
 80057dc:	d0e6      	beq.n	80057ac <_printf_common+0xa4>
 80057de:	3601      	adds	r6, #1
 80057e0:	e7d9      	b.n	8005796 <_printf_common+0x8e>
	...

080057e4 <_printf_i>:
 80057e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057e8:	7e0f      	ldrb	r7, [r1, #24]
 80057ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80057ec:	2f78      	cmp	r7, #120	@ 0x78
 80057ee:	4691      	mov	r9, r2
 80057f0:	4680      	mov	r8, r0
 80057f2:	460c      	mov	r4, r1
 80057f4:	469a      	mov	sl, r3
 80057f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80057fa:	d807      	bhi.n	800580c <_printf_i+0x28>
 80057fc:	2f62      	cmp	r7, #98	@ 0x62
 80057fe:	d80a      	bhi.n	8005816 <_printf_i+0x32>
 8005800:	2f00      	cmp	r7, #0
 8005802:	f000 80d2 	beq.w	80059aa <_printf_i+0x1c6>
 8005806:	2f58      	cmp	r7, #88	@ 0x58
 8005808:	f000 80b9 	beq.w	800597e <_printf_i+0x19a>
 800580c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005810:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005814:	e03a      	b.n	800588c <_printf_i+0xa8>
 8005816:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800581a:	2b15      	cmp	r3, #21
 800581c:	d8f6      	bhi.n	800580c <_printf_i+0x28>
 800581e:	a101      	add	r1, pc, #4	@ (adr r1, 8005824 <_printf_i+0x40>)
 8005820:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005824:	0800587d 	.word	0x0800587d
 8005828:	08005891 	.word	0x08005891
 800582c:	0800580d 	.word	0x0800580d
 8005830:	0800580d 	.word	0x0800580d
 8005834:	0800580d 	.word	0x0800580d
 8005838:	0800580d 	.word	0x0800580d
 800583c:	08005891 	.word	0x08005891
 8005840:	0800580d 	.word	0x0800580d
 8005844:	0800580d 	.word	0x0800580d
 8005848:	0800580d 	.word	0x0800580d
 800584c:	0800580d 	.word	0x0800580d
 8005850:	08005991 	.word	0x08005991
 8005854:	080058bb 	.word	0x080058bb
 8005858:	0800594b 	.word	0x0800594b
 800585c:	0800580d 	.word	0x0800580d
 8005860:	0800580d 	.word	0x0800580d
 8005864:	080059b3 	.word	0x080059b3
 8005868:	0800580d 	.word	0x0800580d
 800586c:	080058bb 	.word	0x080058bb
 8005870:	0800580d 	.word	0x0800580d
 8005874:	0800580d 	.word	0x0800580d
 8005878:	08005953 	.word	0x08005953
 800587c:	6833      	ldr	r3, [r6, #0]
 800587e:	1d1a      	adds	r2, r3, #4
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	6032      	str	r2, [r6, #0]
 8005884:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005888:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800588c:	2301      	movs	r3, #1
 800588e:	e09d      	b.n	80059cc <_printf_i+0x1e8>
 8005890:	6833      	ldr	r3, [r6, #0]
 8005892:	6820      	ldr	r0, [r4, #0]
 8005894:	1d19      	adds	r1, r3, #4
 8005896:	6031      	str	r1, [r6, #0]
 8005898:	0606      	lsls	r6, r0, #24
 800589a:	d501      	bpl.n	80058a0 <_printf_i+0xbc>
 800589c:	681d      	ldr	r5, [r3, #0]
 800589e:	e003      	b.n	80058a8 <_printf_i+0xc4>
 80058a0:	0645      	lsls	r5, r0, #25
 80058a2:	d5fb      	bpl.n	800589c <_printf_i+0xb8>
 80058a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80058a8:	2d00      	cmp	r5, #0
 80058aa:	da03      	bge.n	80058b4 <_printf_i+0xd0>
 80058ac:	232d      	movs	r3, #45	@ 0x2d
 80058ae:	426d      	negs	r5, r5
 80058b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058b4:	4859      	ldr	r0, [pc, #356]	@ (8005a1c <_printf_i+0x238>)
 80058b6:	230a      	movs	r3, #10
 80058b8:	e011      	b.n	80058de <_printf_i+0xfa>
 80058ba:	6821      	ldr	r1, [r4, #0]
 80058bc:	6833      	ldr	r3, [r6, #0]
 80058be:	0608      	lsls	r0, r1, #24
 80058c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80058c4:	d402      	bmi.n	80058cc <_printf_i+0xe8>
 80058c6:	0649      	lsls	r1, r1, #25
 80058c8:	bf48      	it	mi
 80058ca:	b2ad      	uxthmi	r5, r5
 80058cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80058ce:	4853      	ldr	r0, [pc, #332]	@ (8005a1c <_printf_i+0x238>)
 80058d0:	6033      	str	r3, [r6, #0]
 80058d2:	bf14      	ite	ne
 80058d4:	230a      	movne	r3, #10
 80058d6:	2308      	moveq	r3, #8
 80058d8:	2100      	movs	r1, #0
 80058da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80058de:	6866      	ldr	r6, [r4, #4]
 80058e0:	60a6      	str	r6, [r4, #8]
 80058e2:	2e00      	cmp	r6, #0
 80058e4:	bfa2      	ittt	ge
 80058e6:	6821      	ldrge	r1, [r4, #0]
 80058e8:	f021 0104 	bicge.w	r1, r1, #4
 80058ec:	6021      	strge	r1, [r4, #0]
 80058ee:	b90d      	cbnz	r5, 80058f4 <_printf_i+0x110>
 80058f0:	2e00      	cmp	r6, #0
 80058f2:	d04b      	beq.n	800598c <_printf_i+0x1a8>
 80058f4:	4616      	mov	r6, r2
 80058f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80058fa:	fb03 5711 	mls	r7, r3, r1, r5
 80058fe:	5dc7      	ldrb	r7, [r0, r7]
 8005900:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005904:	462f      	mov	r7, r5
 8005906:	42bb      	cmp	r3, r7
 8005908:	460d      	mov	r5, r1
 800590a:	d9f4      	bls.n	80058f6 <_printf_i+0x112>
 800590c:	2b08      	cmp	r3, #8
 800590e:	d10b      	bne.n	8005928 <_printf_i+0x144>
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	07df      	lsls	r7, r3, #31
 8005914:	d508      	bpl.n	8005928 <_printf_i+0x144>
 8005916:	6923      	ldr	r3, [r4, #16]
 8005918:	6861      	ldr	r1, [r4, #4]
 800591a:	4299      	cmp	r1, r3
 800591c:	bfde      	ittt	le
 800591e:	2330      	movle	r3, #48	@ 0x30
 8005920:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005924:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005928:	1b92      	subs	r2, r2, r6
 800592a:	6122      	str	r2, [r4, #16]
 800592c:	f8cd a000 	str.w	sl, [sp]
 8005930:	464b      	mov	r3, r9
 8005932:	aa03      	add	r2, sp, #12
 8005934:	4621      	mov	r1, r4
 8005936:	4640      	mov	r0, r8
 8005938:	f7ff fee6 	bl	8005708 <_printf_common>
 800593c:	3001      	adds	r0, #1
 800593e:	d14a      	bne.n	80059d6 <_printf_i+0x1f2>
 8005940:	f04f 30ff 	mov.w	r0, #4294967295
 8005944:	b004      	add	sp, #16
 8005946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800594a:	6823      	ldr	r3, [r4, #0]
 800594c:	f043 0320 	orr.w	r3, r3, #32
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	4833      	ldr	r0, [pc, #204]	@ (8005a20 <_printf_i+0x23c>)
 8005954:	2778      	movs	r7, #120	@ 0x78
 8005956:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	6831      	ldr	r1, [r6, #0]
 800595e:	061f      	lsls	r7, r3, #24
 8005960:	f851 5b04 	ldr.w	r5, [r1], #4
 8005964:	d402      	bmi.n	800596c <_printf_i+0x188>
 8005966:	065f      	lsls	r7, r3, #25
 8005968:	bf48      	it	mi
 800596a:	b2ad      	uxthmi	r5, r5
 800596c:	6031      	str	r1, [r6, #0]
 800596e:	07d9      	lsls	r1, r3, #31
 8005970:	bf44      	itt	mi
 8005972:	f043 0320 	orrmi.w	r3, r3, #32
 8005976:	6023      	strmi	r3, [r4, #0]
 8005978:	b11d      	cbz	r5, 8005982 <_printf_i+0x19e>
 800597a:	2310      	movs	r3, #16
 800597c:	e7ac      	b.n	80058d8 <_printf_i+0xf4>
 800597e:	4827      	ldr	r0, [pc, #156]	@ (8005a1c <_printf_i+0x238>)
 8005980:	e7e9      	b.n	8005956 <_printf_i+0x172>
 8005982:	6823      	ldr	r3, [r4, #0]
 8005984:	f023 0320 	bic.w	r3, r3, #32
 8005988:	6023      	str	r3, [r4, #0]
 800598a:	e7f6      	b.n	800597a <_printf_i+0x196>
 800598c:	4616      	mov	r6, r2
 800598e:	e7bd      	b.n	800590c <_printf_i+0x128>
 8005990:	6833      	ldr	r3, [r6, #0]
 8005992:	6825      	ldr	r5, [r4, #0]
 8005994:	6961      	ldr	r1, [r4, #20]
 8005996:	1d18      	adds	r0, r3, #4
 8005998:	6030      	str	r0, [r6, #0]
 800599a:	062e      	lsls	r6, r5, #24
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	d501      	bpl.n	80059a4 <_printf_i+0x1c0>
 80059a0:	6019      	str	r1, [r3, #0]
 80059a2:	e002      	b.n	80059aa <_printf_i+0x1c6>
 80059a4:	0668      	lsls	r0, r5, #25
 80059a6:	d5fb      	bpl.n	80059a0 <_printf_i+0x1bc>
 80059a8:	8019      	strh	r1, [r3, #0]
 80059aa:	2300      	movs	r3, #0
 80059ac:	6123      	str	r3, [r4, #16]
 80059ae:	4616      	mov	r6, r2
 80059b0:	e7bc      	b.n	800592c <_printf_i+0x148>
 80059b2:	6833      	ldr	r3, [r6, #0]
 80059b4:	1d1a      	adds	r2, r3, #4
 80059b6:	6032      	str	r2, [r6, #0]
 80059b8:	681e      	ldr	r6, [r3, #0]
 80059ba:	6862      	ldr	r2, [r4, #4]
 80059bc:	2100      	movs	r1, #0
 80059be:	4630      	mov	r0, r6
 80059c0:	f7fa fc26 	bl	8000210 <memchr>
 80059c4:	b108      	cbz	r0, 80059ca <_printf_i+0x1e6>
 80059c6:	1b80      	subs	r0, r0, r6
 80059c8:	6060      	str	r0, [r4, #4]
 80059ca:	6863      	ldr	r3, [r4, #4]
 80059cc:	6123      	str	r3, [r4, #16]
 80059ce:	2300      	movs	r3, #0
 80059d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059d4:	e7aa      	b.n	800592c <_printf_i+0x148>
 80059d6:	6923      	ldr	r3, [r4, #16]
 80059d8:	4632      	mov	r2, r6
 80059da:	4649      	mov	r1, r9
 80059dc:	4640      	mov	r0, r8
 80059de:	47d0      	blx	sl
 80059e0:	3001      	adds	r0, #1
 80059e2:	d0ad      	beq.n	8005940 <_printf_i+0x15c>
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	079b      	lsls	r3, r3, #30
 80059e8:	d413      	bmi.n	8005a12 <_printf_i+0x22e>
 80059ea:	68e0      	ldr	r0, [r4, #12]
 80059ec:	9b03      	ldr	r3, [sp, #12]
 80059ee:	4298      	cmp	r0, r3
 80059f0:	bfb8      	it	lt
 80059f2:	4618      	movlt	r0, r3
 80059f4:	e7a6      	b.n	8005944 <_printf_i+0x160>
 80059f6:	2301      	movs	r3, #1
 80059f8:	4632      	mov	r2, r6
 80059fa:	4649      	mov	r1, r9
 80059fc:	4640      	mov	r0, r8
 80059fe:	47d0      	blx	sl
 8005a00:	3001      	adds	r0, #1
 8005a02:	d09d      	beq.n	8005940 <_printf_i+0x15c>
 8005a04:	3501      	adds	r5, #1
 8005a06:	68e3      	ldr	r3, [r4, #12]
 8005a08:	9903      	ldr	r1, [sp, #12]
 8005a0a:	1a5b      	subs	r3, r3, r1
 8005a0c:	42ab      	cmp	r3, r5
 8005a0e:	dcf2      	bgt.n	80059f6 <_printf_i+0x212>
 8005a10:	e7eb      	b.n	80059ea <_printf_i+0x206>
 8005a12:	2500      	movs	r5, #0
 8005a14:	f104 0619 	add.w	r6, r4, #25
 8005a18:	e7f5      	b.n	8005a06 <_printf_i+0x222>
 8005a1a:	bf00      	nop
 8005a1c:	08009c68 	.word	0x08009c68
 8005a20:	08009c79 	.word	0x08009c79

08005a24 <std>:
 8005a24:	2300      	movs	r3, #0
 8005a26:	b510      	push	{r4, lr}
 8005a28:	4604      	mov	r4, r0
 8005a2a:	e9c0 3300 	strd	r3, r3, [r0]
 8005a2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a32:	6083      	str	r3, [r0, #8]
 8005a34:	8181      	strh	r1, [r0, #12]
 8005a36:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a38:	81c2      	strh	r2, [r0, #14]
 8005a3a:	6183      	str	r3, [r0, #24]
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	2208      	movs	r2, #8
 8005a40:	305c      	adds	r0, #92	@ 0x5c
 8005a42:	f000 f9d4 	bl	8005dee <memset>
 8005a46:	4b0d      	ldr	r3, [pc, #52]	@ (8005a7c <std+0x58>)
 8005a48:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a80 <std+0x5c>)
 8005a4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a84 <std+0x60>)
 8005a50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a52:	4b0d      	ldr	r3, [pc, #52]	@ (8005a88 <std+0x64>)
 8005a54:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a56:	4b0d      	ldr	r3, [pc, #52]	@ (8005a8c <std+0x68>)
 8005a58:	6224      	str	r4, [r4, #32]
 8005a5a:	429c      	cmp	r4, r3
 8005a5c:	d006      	beq.n	8005a6c <std+0x48>
 8005a5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005a62:	4294      	cmp	r4, r2
 8005a64:	d002      	beq.n	8005a6c <std+0x48>
 8005a66:	33d0      	adds	r3, #208	@ 0xd0
 8005a68:	429c      	cmp	r4, r3
 8005a6a:	d105      	bne.n	8005a78 <std+0x54>
 8005a6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a74:	f000 ba38 	b.w	8005ee8 <__retarget_lock_init_recursive>
 8005a78:	bd10      	pop	{r4, pc}
 8005a7a:	bf00      	nop
 8005a7c:	08005d69 	.word	0x08005d69
 8005a80:	08005d8b 	.word	0x08005d8b
 8005a84:	08005dc3 	.word	0x08005dc3
 8005a88:	08005de7 	.word	0x08005de7
 8005a8c:	200002e0 	.word	0x200002e0

08005a90 <stdio_exit_handler>:
 8005a90:	4a02      	ldr	r2, [pc, #8]	@ (8005a9c <stdio_exit_handler+0xc>)
 8005a92:	4903      	ldr	r1, [pc, #12]	@ (8005aa0 <stdio_exit_handler+0x10>)
 8005a94:	4803      	ldr	r0, [pc, #12]	@ (8005aa4 <stdio_exit_handler+0x14>)
 8005a96:	f000 b869 	b.w	8005b6c <_fwalk_sglue>
 8005a9a:	bf00      	nop
 8005a9c:	2000000c 	.word	0x2000000c
 8005aa0:	08007e15 	.word	0x08007e15
 8005aa4:	2000001c 	.word	0x2000001c

08005aa8 <cleanup_stdio>:
 8005aa8:	6841      	ldr	r1, [r0, #4]
 8005aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8005adc <cleanup_stdio+0x34>)
 8005aac:	4299      	cmp	r1, r3
 8005aae:	b510      	push	{r4, lr}
 8005ab0:	4604      	mov	r4, r0
 8005ab2:	d001      	beq.n	8005ab8 <cleanup_stdio+0x10>
 8005ab4:	f002 f9ae 	bl	8007e14 <_fflush_r>
 8005ab8:	68a1      	ldr	r1, [r4, #8]
 8005aba:	4b09      	ldr	r3, [pc, #36]	@ (8005ae0 <cleanup_stdio+0x38>)
 8005abc:	4299      	cmp	r1, r3
 8005abe:	d002      	beq.n	8005ac6 <cleanup_stdio+0x1e>
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f002 f9a7 	bl	8007e14 <_fflush_r>
 8005ac6:	68e1      	ldr	r1, [r4, #12]
 8005ac8:	4b06      	ldr	r3, [pc, #24]	@ (8005ae4 <cleanup_stdio+0x3c>)
 8005aca:	4299      	cmp	r1, r3
 8005acc:	d004      	beq.n	8005ad8 <cleanup_stdio+0x30>
 8005ace:	4620      	mov	r0, r4
 8005ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ad4:	f002 b99e 	b.w	8007e14 <_fflush_r>
 8005ad8:	bd10      	pop	{r4, pc}
 8005ada:	bf00      	nop
 8005adc:	200002e0 	.word	0x200002e0
 8005ae0:	20000348 	.word	0x20000348
 8005ae4:	200003b0 	.word	0x200003b0

08005ae8 <global_stdio_init.part.0>:
 8005ae8:	b510      	push	{r4, lr}
 8005aea:	4b0b      	ldr	r3, [pc, #44]	@ (8005b18 <global_stdio_init.part.0+0x30>)
 8005aec:	4c0b      	ldr	r4, [pc, #44]	@ (8005b1c <global_stdio_init.part.0+0x34>)
 8005aee:	4a0c      	ldr	r2, [pc, #48]	@ (8005b20 <global_stdio_init.part.0+0x38>)
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	4620      	mov	r0, r4
 8005af4:	2200      	movs	r2, #0
 8005af6:	2104      	movs	r1, #4
 8005af8:	f7ff ff94 	bl	8005a24 <std>
 8005afc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b00:	2201      	movs	r2, #1
 8005b02:	2109      	movs	r1, #9
 8005b04:	f7ff ff8e 	bl	8005a24 <std>
 8005b08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b0c:	2202      	movs	r2, #2
 8005b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b12:	2112      	movs	r1, #18
 8005b14:	f7ff bf86 	b.w	8005a24 <std>
 8005b18:	20000418 	.word	0x20000418
 8005b1c:	200002e0 	.word	0x200002e0
 8005b20:	08005a91 	.word	0x08005a91

08005b24 <__sfp_lock_acquire>:
 8005b24:	4801      	ldr	r0, [pc, #4]	@ (8005b2c <__sfp_lock_acquire+0x8>)
 8005b26:	f000 b9e0 	b.w	8005eea <__retarget_lock_acquire_recursive>
 8005b2a:	bf00      	nop
 8005b2c:	20000421 	.word	0x20000421

08005b30 <__sfp_lock_release>:
 8005b30:	4801      	ldr	r0, [pc, #4]	@ (8005b38 <__sfp_lock_release+0x8>)
 8005b32:	f000 b9db 	b.w	8005eec <__retarget_lock_release_recursive>
 8005b36:	bf00      	nop
 8005b38:	20000421 	.word	0x20000421

08005b3c <__sinit>:
 8005b3c:	b510      	push	{r4, lr}
 8005b3e:	4604      	mov	r4, r0
 8005b40:	f7ff fff0 	bl	8005b24 <__sfp_lock_acquire>
 8005b44:	6a23      	ldr	r3, [r4, #32]
 8005b46:	b11b      	cbz	r3, 8005b50 <__sinit+0x14>
 8005b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b4c:	f7ff bff0 	b.w	8005b30 <__sfp_lock_release>
 8005b50:	4b04      	ldr	r3, [pc, #16]	@ (8005b64 <__sinit+0x28>)
 8005b52:	6223      	str	r3, [r4, #32]
 8005b54:	4b04      	ldr	r3, [pc, #16]	@ (8005b68 <__sinit+0x2c>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1f5      	bne.n	8005b48 <__sinit+0xc>
 8005b5c:	f7ff ffc4 	bl	8005ae8 <global_stdio_init.part.0>
 8005b60:	e7f2      	b.n	8005b48 <__sinit+0xc>
 8005b62:	bf00      	nop
 8005b64:	08005aa9 	.word	0x08005aa9
 8005b68:	20000418 	.word	0x20000418

08005b6c <_fwalk_sglue>:
 8005b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b70:	4607      	mov	r7, r0
 8005b72:	4688      	mov	r8, r1
 8005b74:	4614      	mov	r4, r2
 8005b76:	2600      	movs	r6, #0
 8005b78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b7c:	f1b9 0901 	subs.w	r9, r9, #1
 8005b80:	d505      	bpl.n	8005b8e <_fwalk_sglue+0x22>
 8005b82:	6824      	ldr	r4, [r4, #0]
 8005b84:	2c00      	cmp	r4, #0
 8005b86:	d1f7      	bne.n	8005b78 <_fwalk_sglue+0xc>
 8005b88:	4630      	mov	r0, r6
 8005b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b8e:	89ab      	ldrh	r3, [r5, #12]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d907      	bls.n	8005ba4 <_fwalk_sglue+0x38>
 8005b94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	d003      	beq.n	8005ba4 <_fwalk_sglue+0x38>
 8005b9c:	4629      	mov	r1, r5
 8005b9e:	4638      	mov	r0, r7
 8005ba0:	47c0      	blx	r8
 8005ba2:	4306      	orrs	r6, r0
 8005ba4:	3568      	adds	r5, #104	@ 0x68
 8005ba6:	e7e9      	b.n	8005b7c <_fwalk_sglue+0x10>

08005ba8 <iprintf>:
 8005ba8:	b40f      	push	{r0, r1, r2, r3}
 8005baa:	b507      	push	{r0, r1, r2, lr}
 8005bac:	4906      	ldr	r1, [pc, #24]	@ (8005bc8 <iprintf+0x20>)
 8005bae:	ab04      	add	r3, sp, #16
 8005bb0:	6808      	ldr	r0, [r1, #0]
 8005bb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bb6:	6881      	ldr	r1, [r0, #8]
 8005bb8:	9301      	str	r3, [sp, #4]
 8005bba:	f001 fc91 	bl	80074e0 <_vfiprintf_r>
 8005bbe:	b003      	add	sp, #12
 8005bc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bc4:	b004      	add	sp, #16
 8005bc6:	4770      	bx	lr
 8005bc8:	20000018 	.word	0x20000018

08005bcc <putchar>:
 8005bcc:	4b02      	ldr	r3, [pc, #8]	@ (8005bd8 <putchar+0xc>)
 8005bce:	4601      	mov	r1, r0
 8005bd0:	6818      	ldr	r0, [r3, #0]
 8005bd2:	6882      	ldr	r2, [r0, #8]
 8005bd4:	f002 b9a8 	b.w	8007f28 <_putc_r>
 8005bd8:	20000018 	.word	0x20000018

08005bdc <iscanf>:
 8005bdc:	b40f      	push	{r0, r1, r2, r3}
 8005bde:	b507      	push	{r0, r1, r2, lr}
 8005be0:	4906      	ldr	r1, [pc, #24]	@ (8005bfc <iscanf+0x20>)
 8005be2:	ab04      	add	r3, sp, #16
 8005be4:	6808      	ldr	r0, [r1, #0]
 8005be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bea:	6841      	ldr	r1, [r0, #4]
 8005bec:	9301      	str	r3, [sp, #4]
 8005bee:	f001 ff2b 	bl	8007a48 <_vfiscanf_r>
 8005bf2:	b003      	add	sp, #12
 8005bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bf8:	b004      	add	sp, #16
 8005bfa:	4770      	bx	lr
 8005bfc:	20000018 	.word	0x20000018

08005c00 <setvbuf>:
 8005c00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005c04:	461d      	mov	r5, r3
 8005c06:	4b57      	ldr	r3, [pc, #348]	@ (8005d64 <setvbuf+0x164>)
 8005c08:	681f      	ldr	r7, [r3, #0]
 8005c0a:	4604      	mov	r4, r0
 8005c0c:	460e      	mov	r6, r1
 8005c0e:	4690      	mov	r8, r2
 8005c10:	b127      	cbz	r7, 8005c1c <setvbuf+0x1c>
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	b913      	cbnz	r3, 8005c1c <setvbuf+0x1c>
 8005c16:	4638      	mov	r0, r7
 8005c18:	f7ff ff90 	bl	8005b3c <__sinit>
 8005c1c:	f1b8 0f02 	cmp.w	r8, #2
 8005c20:	d006      	beq.n	8005c30 <setvbuf+0x30>
 8005c22:	f1b8 0f01 	cmp.w	r8, #1
 8005c26:	f200 809a 	bhi.w	8005d5e <setvbuf+0x15e>
 8005c2a:	2d00      	cmp	r5, #0
 8005c2c:	f2c0 8097 	blt.w	8005d5e <setvbuf+0x15e>
 8005c30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c32:	07d9      	lsls	r1, r3, #31
 8005c34:	d405      	bmi.n	8005c42 <setvbuf+0x42>
 8005c36:	89a3      	ldrh	r3, [r4, #12]
 8005c38:	059a      	lsls	r2, r3, #22
 8005c3a:	d402      	bmi.n	8005c42 <setvbuf+0x42>
 8005c3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c3e:	f000 f954 	bl	8005eea <__retarget_lock_acquire_recursive>
 8005c42:	4621      	mov	r1, r4
 8005c44:	4638      	mov	r0, r7
 8005c46:	f002 f8e5 	bl	8007e14 <_fflush_r>
 8005c4a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c4c:	b141      	cbz	r1, 8005c60 <setvbuf+0x60>
 8005c4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c52:	4299      	cmp	r1, r3
 8005c54:	d002      	beq.n	8005c5c <setvbuf+0x5c>
 8005c56:	4638      	mov	r0, r7
 8005c58:	f000 ff96 	bl	8006b88 <_free_r>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c60:	2300      	movs	r3, #0
 8005c62:	61a3      	str	r3, [r4, #24]
 8005c64:	6063      	str	r3, [r4, #4]
 8005c66:	89a3      	ldrh	r3, [r4, #12]
 8005c68:	061b      	lsls	r3, r3, #24
 8005c6a:	d503      	bpl.n	8005c74 <setvbuf+0x74>
 8005c6c:	6921      	ldr	r1, [r4, #16]
 8005c6e:	4638      	mov	r0, r7
 8005c70:	f000 ff8a 	bl	8006b88 <_free_r>
 8005c74:	89a3      	ldrh	r3, [r4, #12]
 8005c76:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8005c7a:	f023 0303 	bic.w	r3, r3, #3
 8005c7e:	f1b8 0f02 	cmp.w	r8, #2
 8005c82:	81a3      	strh	r3, [r4, #12]
 8005c84:	d061      	beq.n	8005d4a <setvbuf+0x14a>
 8005c86:	ab01      	add	r3, sp, #4
 8005c88:	466a      	mov	r2, sp
 8005c8a:	4621      	mov	r1, r4
 8005c8c:	4638      	mov	r0, r7
 8005c8e:	f002 f8e9 	bl	8007e64 <__swhatbuf_r>
 8005c92:	89a3      	ldrh	r3, [r4, #12]
 8005c94:	4318      	orrs	r0, r3
 8005c96:	81a0      	strh	r0, [r4, #12]
 8005c98:	bb2d      	cbnz	r5, 8005ce6 <setvbuf+0xe6>
 8005c9a:	9d00      	ldr	r5, [sp, #0]
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	f000 ffbd 	bl	8006c1c <malloc>
 8005ca2:	4606      	mov	r6, r0
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	d152      	bne.n	8005d4e <setvbuf+0x14e>
 8005ca8:	f8dd 9000 	ldr.w	r9, [sp]
 8005cac:	45a9      	cmp	r9, r5
 8005cae:	d140      	bne.n	8005d32 <setvbuf+0x132>
 8005cb0:	f04f 35ff 	mov.w	r5, #4294967295
 8005cb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cb8:	f043 0202 	orr.w	r2, r3, #2
 8005cbc:	81a2      	strh	r2, [r4, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	60a2      	str	r2, [r4, #8]
 8005cc2:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8005cc6:	6022      	str	r2, [r4, #0]
 8005cc8:	6122      	str	r2, [r4, #16]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	6162      	str	r2, [r4, #20]
 8005cce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005cd0:	07d6      	lsls	r6, r2, #31
 8005cd2:	d404      	bmi.n	8005cde <setvbuf+0xde>
 8005cd4:	0598      	lsls	r0, r3, #22
 8005cd6:	d402      	bmi.n	8005cde <setvbuf+0xde>
 8005cd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cda:	f000 f907 	bl	8005eec <__retarget_lock_release_recursive>
 8005cde:	4628      	mov	r0, r5
 8005ce0:	b003      	add	sp, #12
 8005ce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ce6:	2e00      	cmp	r6, #0
 8005ce8:	d0d8      	beq.n	8005c9c <setvbuf+0x9c>
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	b913      	cbnz	r3, 8005cf4 <setvbuf+0xf4>
 8005cee:	4638      	mov	r0, r7
 8005cf0:	f7ff ff24 	bl	8005b3c <__sinit>
 8005cf4:	f1b8 0f01 	cmp.w	r8, #1
 8005cf8:	bf08      	it	eq
 8005cfa:	89a3      	ldrheq	r3, [r4, #12]
 8005cfc:	6026      	str	r6, [r4, #0]
 8005cfe:	bf04      	itt	eq
 8005d00:	f043 0301 	orreq.w	r3, r3, #1
 8005d04:	81a3      	strheq	r3, [r4, #12]
 8005d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d0a:	f013 0208 	ands.w	r2, r3, #8
 8005d0e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005d12:	d01e      	beq.n	8005d52 <setvbuf+0x152>
 8005d14:	07d9      	lsls	r1, r3, #31
 8005d16:	bf41      	itttt	mi
 8005d18:	2200      	movmi	r2, #0
 8005d1a:	426d      	negmi	r5, r5
 8005d1c:	60a2      	strmi	r2, [r4, #8]
 8005d1e:	61a5      	strmi	r5, [r4, #24]
 8005d20:	bf58      	it	pl
 8005d22:	60a5      	strpl	r5, [r4, #8]
 8005d24:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005d26:	07d2      	lsls	r2, r2, #31
 8005d28:	d401      	bmi.n	8005d2e <setvbuf+0x12e>
 8005d2a:	059b      	lsls	r3, r3, #22
 8005d2c:	d513      	bpl.n	8005d56 <setvbuf+0x156>
 8005d2e:	2500      	movs	r5, #0
 8005d30:	e7d5      	b.n	8005cde <setvbuf+0xde>
 8005d32:	4648      	mov	r0, r9
 8005d34:	f000 ff72 	bl	8006c1c <malloc>
 8005d38:	4606      	mov	r6, r0
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	d0b8      	beq.n	8005cb0 <setvbuf+0xb0>
 8005d3e:	89a3      	ldrh	r3, [r4, #12]
 8005d40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d44:	81a3      	strh	r3, [r4, #12]
 8005d46:	464d      	mov	r5, r9
 8005d48:	e7cf      	b.n	8005cea <setvbuf+0xea>
 8005d4a:	2500      	movs	r5, #0
 8005d4c:	e7b2      	b.n	8005cb4 <setvbuf+0xb4>
 8005d4e:	46a9      	mov	r9, r5
 8005d50:	e7f5      	b.n	8005d3e <setvbuf+0x13e>
 8005d52:	60a2      	str	r2, [r4, #8]
 8005d54:	e7e6      	b.n	8005d24 <setvbuf+0x124>
 8005d56:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d58:	f000 f8c8 	bl	8005eec <__retarget_lock_release_recursive>
 8005d5c:	e7e7      	b.n	8005d2e <setvbuf+0x12e>
 8005d5e:	f04f 35ff 	mov.w	r5, #4294967295
 8005d62:	e7bc      	b.n	8005cde <setvbuf+0xde>
 8005d64:	20000018 	.word	0x20000018

08005d68 <__sread>:
 8005d68:	b510      	push	{r4, lr}
 8005d6a:	460c      	mov	r4, r1
 8005d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d70:	f000 f86c 	bl	8005e4c <_read_r>
 8005d74:	2800      	cmp	r0, #0
 8005d76:	bfab      	itete	ge
 8005d78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d7a:	89a3      	ldrhlt	r3, [r4, #12]
 8005d7c:	181b      	addge	r3, r3, r0
 8005d7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d82:	bfac      	ite	ge
 8005d84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d86:	81a3      	strhlt	r3, [r4, #12]
 8005d88:	bd10      	pop	{r4, pc}

08005d8a <__swrite>:
 8005d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d8e:	461f      	mov	r7, r3
 8005d90:	898b      	ldrh	r3, [r1, #12]
 8005d92:	05db      	lsls	r3, r3, #23
 8005d94:	4605      	mov	r5, r0
 8005d96:	460c      	mov	r4, r1
 8005d98:	4616      	mov	r6, r2
 8005d9a:	d505      	bpl.n	8005da8 <__swrite+0x1e>
 8005d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005da0:	2302      	movs	r3, #2
 8005da2:	2200      	movs	r2, #0
 8005da4:	f000 f840 	bl	8005e28 <_lseek_r>
 8005da8:	89a3      	ldrh	r3, [r4, #12]
 8005daa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005db2:	81a3      	strh	r3, [r4, #12]
 8005db4:	4632      	mov	r2, r6
 8005db6:	463b      	mov	r3, r7
 8005db8:	4628      	mov	r0, r5
 8005dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dbe:	f000 b857 	b.w	8005e70 <_write_r>

08005dc2 <__sseek>:
 8005dc2:	b510      	push	{r4, lr}
 8005dc4:	460c      	mov	r4, r1
 8005dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dca:	f000 f82d 	bl	8005e28 <_lseek_r>
 8005dce:	1c43      	adds	r3, r0, #1
 8005dd0:	89a3      	ldrh	r3, [r4, #12]
 8005dd2:	bf15      	itete	ne
 8005dd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005dd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005dda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005dde:	81a3      	strheq	r3, [r4, #12]
 8005de0:	bf18      	it	ne
 8005de2:	81a3      	strhne	r3, [r4, #12]
 8005de4:	bd10      	pop	{r4, pc}

08005de6 <__sclose>:
 8005de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dea:	f000 b80d 	b.w	8005e08 <_close_r>

08005dee <memset>:
 8005dee:	4402      	add	r2, r0
 8005df0:	4603      	mov	r3, r0
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d100      	bne.n	8005df8 <memset+0xa>
 8005df6:	4770      	bx	lr
 8005df8:	f803 1b01 	strb.w	r1, [r3], #1
 8005dfc:	e7f9      	b.n	8005df2 <memset+0x4>
	...

08005e00 <_localeconv_r>:
 8005e00:	4800      	ldr	r0, [pc, #0]	@ (8005e04 <_localeconv_r+0x4>)
 8005e02:	4770      	bx	lr
 8005e04:	20000158 	.word	0x20000158

08005e08 <_close_r>:
 8005e08:	b538      	push	{r3, r4, r5, lr}
 8005e0a:	4d06      	ldr	r5, [pc, #24]	@ (8005e24 <_close_r+0x1c>)
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	4604      	mov	r4, r0
 8005e10:	4608      	mov	r0, r1
 8005e12:	602b      	str	r3, [r5, #0]
 8005e14:	f7fc facc 	bl	80023b0 <_close>
 8005e18:	1c43      	adds	r3, r0, #1
 8005e1a:	d102      	bne.n	8005e22 <_close_r+0x1a>
 8005e1c:	682b      	ldr	r3, [r5, #0]
 8005e1e:	b103      	cbz	r3, 8005e22 <_close_r+0x1a>
 8005e20:	6023      	str	r3, [r4, #0]
 8005e22:	bd38      	pop	{r3, r4, r5, pc}
 8005e24:	2000041c 	.word	0x2000041c

08005e28 <_lseek_r>:
 8005e28:	b538      	push	{r3, r4, r5, lr}
 8005e2a:	4d07      	ldr	r5, [pc, #28]	@ (8005e48 <_lseek_r+0x20>)
 8005e2c:	4604      	mov	r4, r0
 8005e2e:	4608      	mov	r0, r1
 8005e30:	4611      	mov	r1, r2
 8005e32:	2200      	movs	r2, #0
 8005e34:	602a      	str	r2, [r5, #0]
 8005e36:	461a      	mov	r2, r3
 8005e38:	f7fc fae1 	bl	80023fe <_lseek>
 8005e3c:	1c43      	adds	r3, r0, #1
 8005e3e:	d102      	bne.n	8005e46 <_lseek_r+0x1e>
 8005e40:	682b      	ldr	r3, [r5, #0]
 8005e42:	b103      	cbz	r3, 8005e46 <_lseek_r+0x1e>
 8005e44:	6023      	str	r3, [r4, #0]
 8005e46:	bd38      	pop	{r3, r4, r5, pc}
 8005e48:	2000041c 	.word	0x2000041c

08005e4c <_read_r>:
 8005e4c:	b538      	push	{r3, r4, r5, lr}
 8005e4e:	4d07      	ldr	r5, [pc, #28]	@ (8005e6c <_read_r+0x20>)
 8005e50:	4604      	mov	r4, r0
 8005e52:	4608      	mov	r0, r1
 8005e54:	4611      	mov	r1, r2
 8005e56:	2200      	movs	r2, #0
 8005e58:	602a      	str	r2, [r5, #0]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f7fc fa6f 	bl	800233e <_read>
 8005e60:	1c43      	adds	r3, r0, #1
 8005e62:	d102      	bne.n	8005e6a <_read_r+0x1e>
 8005e64:	682b      	ldr	r3, [r5, #0]
 8005e66:	b103      	cbz	r3, 8005e6a <_read_r+0x1e>
 8005e68:	6023      	str	r3, [r4, #0]
 8005e6a:	bd38      	pop	{r3, r4, r5, pc}
 8005e6c:	2000041c 	.word	0x2000041c

08005e70 <_write_r>:
 8005e70:	b538      	push	{r3, r4, r5, lr}
 8005e72:	4d07      	ldr	r5, [pc, #28]	@ (8005e90 <_write_r+0x20>)
 8005e74:	4604      	mov	r4, r0
 8005e76:	4608      	mov	r0, r1
 8005e78:	4611      	mov	r1, r2
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	602a      	str	r2, [r5, #0]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	f7fc fa7a 	bl	8002378 <_write>
 8005e84:	1c43      	adds	r3, r0, #1
 8005e86:	d102      	bne.n	8005e8e <_write_r+0x1e>
 8005e88:	682b      	ldr	r3, [r5, #0]
 8005e8a:	b103      	cbz	r3, 8005e8e <_write_r+0x1e>
 8005e8c:	6023      	str	r3, [r4, #0]
 8005e8e:	bd38      	pop	{r3, r4, r5, pc}
 8005e90:	2000041c 	.word	0x2000041c

08005e94 <__errno>:
 8005e94:	4b01      	ldr	r3, [pc, #4]	@ (8005e9c <__errno+0x8>)
 8005e96:	6818      	ldr	r0, [r3, #0]
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	20000018 	.word	0x20000018

08005ea0 <__libc_init_array>:
 8005ea0:	b570      	push	{r4, r5, r6, lr}
 8005ea2:	4d0d      	ldr	r5, [pc, #52]	@ (8005ed8 <__libc_init_array+0x38>)
 8005ea4:	4c0d      	ldr	r4, [pc, #52]	@ (8005edc <__libc_init_array+0x3c>)
 8005ea6:	1b64      	subs	r4, r4, r5
 8005ea8:	10a4      	asrs	r4, r4, #2
 8005eaa:	2600      	movs	r6, #0
 8005eac:	42a6      	cmp	r6, r4
 8005eae:	d109      	bne.n	8005ec4 <__libc_init_array+0x24>
 8005eb0:	4d0b      	ldr	r5, [pc, #44]	@ (8005ee0 <__libc_init_array+0x40>)
 8005eb2:	4c0c      	ldr	r4, [pc, #48]	@ (8005ee4 <__libc_init_array+0x44>)
 8005eb4:	f003 fea8 	bl	8009c08 <_init>
 8005eb8:	1b64      	subs	r4, r4, r5
 8005eba:	10a4      	asrs	r4, r4, #2
 8005ebc:	2600      	movs	r6, #0
 8005ebe:	42a6      	cmp	r6, r4
 8005ec0:	d105      	bne.n	8005ece <__libc_init_array+0x2e>
 8005ec2:	bd70      	pop	{r4, r5, r6, pc}
 8005ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ec8:	4798      	blx	r3
 8005eca:	3601      	adds	r6, #1
 8005ecc:	e7ee      	b.n	8005eac <__libc_init_array+0xc>
 8005ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ed2:	4798      	blx	r3
 8005ed4:	3601      	adds	r6, #1
 8005ed6:	e7f2      	b.n	8005ebe <__libc_init_array+0x1e>
 8005ed8:	0800a3d4 	.word	0x0800a3d4
 8005edc:	0800a3d4 	.word	0x0800a3d4
 8005ee0:	0800a3d4 	.word	0x0800a3d4
 8005ee4:	0800a3d8 	.word	0x0800a3d8

08005ee8 <__retarget_lock_init_recursive>:
 8005ee8:	4770      	bx	lr

08005eea <__retarget_lock_acquire_recursive>:
 8005eea:	4770      	bx	lr

08005eec <__retarget_lock_release_recursive>:
 8005eec:	4770      	bx	lr

08005eee <quorem>:
 8005eee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef2:	6903      	ldr	r3, [r0, #16]
 8005ef4:	690c      	ldr	r4, [r1, #16]
 8005ef6:	42a3      	cmp	r3, r4
 8005ef8:	4607      	mov	r7, r0
 8005efa:	db7e      	blt.n	8005ffa <quorem+0x10c>
 8005efc:	3c01      	subs	r4, #1
 8005efe:	f101 0814 	add.w	r8, r1, #20
 8005f02:	00a3      	lsls	r3, r4, #2
 8005f04:	f100 0514 	add.w	r5, r0, #20
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f0e:	9301      	str	r3, [sp, #4]
 8005f10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f20:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f24:	d32e      	bcc.n	8005f84 <quorem+0x96>
 8005f26:	f04f 0a00 	mov.w	sl, #0
 8005f2a:	46c4      	mov	ip, r8
 8005f2c:	46ae      	mov	lr, r5
 8005f2e:	46d3      	mov	fp, sl
 8005f30:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005f34:	b298      	uxth	r0, r3
 8005f36:	fb06 a000 	mla	r0, r6, r0, sl
 8005f3a:	0c02      	lsrs	r2, r0, #16
 8005f3c:	0c1b      	lsrs	r3, r3, #16
 8005f3e:	fb06 2303 	mla	r3, r6, r3, r2
 8005f42:	f8de 2000 	ldr.w	r2, [lr]
 8005f46:	b280      	uxth	r0, r0
 8005f48:	b292      	uxth	r2, r2
 8005f4a:	1a12      	subs	r2, r2, r0
 8005f4c:	445a      	add	r2, fp
 8005f4e:	f8de 0000 	ldr.w	r0, [lr]
 8005f52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005f5c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005f60:	b292      	uxth	r2, r2
 8005f62:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005f66:	45e1      	cmp	r9, ip
 8005f68:	f84e 2b04 	str.w	r2, [lr], #4
 8005f6c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005f70:	d2de      	bcs.n	8005f30 <quorem+0x42>
 8005f72:	9b00      	ldr	r3, [sp, #0]
 8005f74:	58eb      	ldr	r3, [r5, r3]
 8005f76:	b92b      	cbnz	r3, 8005f84 <quorem+0x96>
 8005f78:	9b01      	ldr	r3, [sp, #4]
 8005f7a:	3b04      	subs	r3, #4
 8005f7c:	429d      	cmp	r5, r3
 8005f7e:	461a      	mov	r2, r3
 8005f80:	d32f      	bcc.n	8005fe2 <quorem+0xf4>
 8005f82:	613c      	str	r4, [r7, #16]
 8005f84:	4638      	mov	r0, r7
 8005f86:	f001 f979 	bl	800727c <__mcmp>
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	db25      	blt.n	8005fda <quorem+0xec>
 8005f8e:	4629      	mov	r1, r5
 8005f90:	2000      	movs	r0, #0
 8005f92:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f96:	f8d1 c000 	ldr.w	ip, [r1]
 8005f9a:	fa1f fe82 	uxth.w	lr, r2
 8005f9e:	fa1f f38c 	uxth.w	r3, ip
 8005fa2:	eba3 030e 	sub.w	r3, r3, lr
 8005fa6:	4403      	add	r3, r0
 8005fa8:	0c12      	lsrs	r2, r2, #16
 8005faa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005fae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fb8:	45c1      	cmp	r9, r8
 8005fba:	f841 3b04 	str.w	r3, [r1], #4
 8005fbe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005fc2:	d2e6      	bcs.n	8005f92 <quorem+0xa4>
 8005fc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fc8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fcc:	b922      	cbnz	r2, 8005fd8 <quorem+0xea>
 8005fce:	3b04      	subs	r3, #4
 8005fd0:	429d      	cmp	r5, r3
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	d30b      	bcc.n	8005fee <quorem+0x100>
 8005fd6:	613c      	str	r4, [r7, #16]
 8005fd8:	3601      	adds	r6, #1
 8005fda:	4630      	mov	r0, r6
 8005fdc:	b003      	add	sp, #12
 8005fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe2:	6812      	ldr	r2, [r2, #0]
 8005fe4:	3b04      	subs	r3, #4
 8005fe6:	2a00      	cmp	r2, #0
 8005fe8:	d1cb      	bne.n	8005f82 <quorem+0x94>
 8005fea:	3c01      	subs	r4, #1
 8005fec:	e7c6      	b.n	8005f7c <quorem+0x8e>
 8005fee:	6812      	ldr	r2, [r2, #0]
 8005ff0:	3b04      	subs	r3, #4
 8005ff2:	2a00      	cmp	r2, #0
 8005ff4:	d1ef      	bne.n	8005fd6 <quorem+0xe8>
 8005ff6:	3c01      	subs	r4, #1
 8005ff8:	e7ea      	b.n	8005fd0 <quorem+0xe2>
 8005ffa:	2000      	movs	r0, #0
 8005ffc:	e7ee      	b.n	8005fdc <quorem+0xee>
	...

08006000 <_dtoa_r>:
 8006000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006004:	69c7      	ldr	r7, [r0, #28]
 8006006:	b099      	sub	sp, #100	@ 0x64
 8006008:	ed8d 0b02 	vstr	d0, [sp, #8]
 800600c:	ec55 4b10 	vmov	r4, r5, d0
 8006010:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006012:	9109      	str	r1, [sp, #36]	@ 0x24
 8006014:	4683      	mov	fp, r0
 8006016:	920e      	str	r2, [sp, #56]	@ 0x38
 8006018:	9313      	str	r3, [sp, #76]	@ 0x4c
 800601a:	b97f      	cbnz	r7, 800603c <_dtoa_r+0x3c>
 800601c:	2010      	movs	r0, #16
 800601e:	f000 fdfd 	bl	8006c1c <malloc>
 8006022:	4602      	mov	r2, r0
 8006024:	f8cb 001c 	str.w	r0, [fp, #28]
 8006028:	b920      	cbnz	r0, 8006034 <_dtoa_r+0x34>
 800602a:	4ba7      	ldr	r3, [pc, #668]	@ (80062c8 <_dtoa_r+0x2c8>)
 800602c:	21ef      	movs	r1, #239	@ 0xef
 800602e:	48a7      	ldr	r0, [pc, #668]	@ (80062cc <_dtoa_r+0x2cc>)
 8006030:	f002 f9f6 	bl	8008420 <__assert_func>
 8006034:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006038:	6007      	str	r7, [r0, #0]
 800603a:	60c7      	str	r7, [r0, #12]
 800603c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006040:	6819      	ldr	r1, [r3, #0]
 8006042:	b159      	cbz	r1, 800605c <_dtoa_r+0x5c>
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	604a      	str	r2, [r1, #4]
 8006048:	2301      	movs	r3, #1
 800604a:	4093      	lsls	r3, r2
 800604c:	608b      	str	r3, [r1, #8]
 800604e:	4658      	mov	r0, fp
 8006050:	f000 feda 	bl	8006e08 <_Bfree>
 8006054:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	1e2b      	subs	r3, r5, #0
 800605e:	bfb9      	ittee	lt
 8006060:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006064:	9303      	strlt	r3, [sp, #12]
 8006066:	2300      	movge	r3, #0
 8006068:	6033      	strge	r3, [r6, #0]
 800606a:	9f03      	ldr	r7, [sp, #12]
 800606c:	4b98      	ldr	r3, [pc, #608]	@ (80062d0 <_dtoa_r+0x2d0>)
 800606e:	bfbc      	itt	lt
 8006070:	2201      	movlt	r2, #1
 8006072:	6032      	strlt	r2, [r6, #0]
 8006074:	43bb      	bics	r3, r7
 8006076:	d112      	bne.n	800609e <_dtoa_r+0x9e>
 8006078:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800607a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800607e:	6013      	str	r3, [r2, #0]
 8006080:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006084:	4323      	orrs	r3, r4
 8006086:	f000 854d 	beq.w	8006b24 <_dtoa_r+0xb24>
 800608a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800608c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80062e4 <_dtoa_r+0x2e4>
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 854f 	beq.w	8006b34 <_dtoa_r+0xb34>
 8006096:	f10a 0303 	add.w	r3, sl, #3
 800609a:	f000 bd49 	b.w	8006b30 <_dtoa_r+0xb30>
 800609e:	ed9d 7b02 	vldr	d7, [sp, #8]
 80060a2:	2200      	movs	r2, #0
 80060a4:	ec51 0b17 	vmov	r0, r1, d7
 80060a8:	2300      	movs	r3, #0
 80060aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80060ae:	f7fa fd2b 	bl	8000b08 <__aeabi_dcmpeq>
 80060b2:	4680      	mov	r8, r0
 80060b4:	b158      	cbz	r0, 80060ce <_dtoa_r+0xce>
 80060b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80060b8:	2301      	movs	r3, #1
 80060ba:	6013      	str	r3, [r2, #0]
 80060bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80060be:	b113      	cbz	r3, 80060c6 <_dtoa_r+0xc6>
 80060c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80060c2:	4b84      	ldr	r3, [pc, #528]	@ (80062d4 <_dtoa_r+0x2d4>)
 80060c4:	6013      	str	r3, [r2, #0]
 80060c6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80062e8 <_dtoa_r+0x2e8>
 80060ca:	f000 bd33 	b.w	8006b34 <_dtoa_r+0xb34>
 80060ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80060d2:	aa16      	add	r2, sp, #88	@ 0x58
 80060d4:	a917      	add	r1, sp, #92	@ 0x5c
 80060d6:	4658      	mov	r0, fp
 80060d8:	f001 f980 	bl	80073dc <__d2b>
 80060dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80060e0:	4681      	mov	r9, r0
 80060e2:	2e00      	cmp	r6, #0
 80060e4:	d077      	beq.n	80061d6 <_dtoa_r+0x1d6>
 80060e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80060e8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80060ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80060f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80060fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006100:	4619      	mov	r1, r3
 8006102:	2200      	movs	r2, #0
 8006104:	4b74      	ldr	r3, [pc, #464]	@ (80062d8 <_dtoa_r+0x2d8>)
 8006106:	f7fa f8df 	bl	80002c8 <__aeabi_dsub>
 800610a:	a369      	add	r3, pc, #420	@ (adr r3, 80062b0 <_dtoa_r+0x2b0>)
 800610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006110:	f7fa fa92 	bl	8000638 <__aeabi_dmul>
 8006114:	a368      	add	r3, pc, #416	@ (adr r3, 80062b8 <_dtoa_r+0x2b8>)
 8006116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611a:	f7fa f8d7 	bl	80002cc <__adddf3>
 800611e:	4604      	mov	r4, r0
 8006120:	4630      	mov	r0, r6
 8006122:	460d      	mov	r5, r1
 8006124:	f7fa fa1e 	bl	8000564 <__aeabi_i2d>
 8006128:	a365      	add	r3, pc, #404	@ (adr r3, 80062c0 <_dtoa_r+0x2c0>)
 800612a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612e:	f7fa fa83 	bl	8000638 <__aeabi_dmul>
 8006132:	4602      	mov	r2, r0
 8006134:	460b      	mov	r3, r1
 8006136:	4620      	mov	r0, r4
 8006138:	4629      	mov	r1, r5
 800613a:	f7fa f8c7 	bl	80002cc <__adddf3>
 800613e:	4604      	mov	r4, r0
 8006140:	460d      	mov	r5, r1
 8006142:	f7fa fd29 	bl	8000b98 <__aeabi_d2iz>
 8006146:	2200      	movs	r2, #0
 8006148:	4607      	mov	r7, r0
 800614a:	2300      	movs	r3, #0
 800614c:	4620      	mov	r0, r4
 800614e:	4629      	mov	r1, r5
 8006150:	f7fa fce4 	bl	8000b1c <__aeabi_dcmplt>
 8006154:	b140      	cbz	r0, 8006168 <_dtoa_r+0x168>
 8006156:	4638      	mov	r0, r7
 8006158:	f7fa fa04 	bl	8000564 <__aeabi_i2d>
 800615c:	4622      	mov	r2, r4
 800615e:	462b      	mov	r3, r5
 8006160:	f7fa fcd2 	bl	8000b08 <__aeabi_dcmpeq>
 8006164:	b900      	cbnz	r0, 8006168 <_dtoa_r+0x168>
 8006166:	3f01      	subs	r7, #1
 8006168:	2f16      	cmp	r7, #22
 800616a:	d851      	bhi.n	8006210 <_dtoa_r+0x210>
 800616c:	4b5b      	ldr	r3, [pc, #364]	@ (80062dc <_dtoa_r+0x2dc>)
 800616e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006176:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800617a:	f7fa fccf 	bl	8000b1c <__aeabi_dcmplt>
 800617e:	2800      	cmp	r0, #0
 8006180:	d048      	beq.n	8006214 <_dtoa_r+0x214>
 8006182:	3f01      	subs	r7, #1
 8006184:	2300      	movs	r3, #0
 8006186:	9312      	str	r3, [sp, #72]	@ 0x48
 8006188:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800618a:	1b9b      	subs	r3, r3, r6
 800618c:	1e5a      	subs	r2, r3, #1
 800618e:	bf44      	itt	mi
 8006190:	f1c3 0801 	rsbmi	r8, r3, #1
 8006194:	2300      	movmi	r3, #0
 8006196:	9208      	str	r2, [sp, #32]
 8006198:	bf54      	ite	pl
 800619a:	f04f 0800 	movpl.w	r8, #0
 800619e:	9308      	strmi	r3, [sp, #32]
 80061a0:	2f00      	cmp	r7, #0
 80061a2:	db39      	blt.n	8006218 <_dtoa_r+0x218>
 80061a4:	9b08      	ldr	r3, [sp, #32]
 80061a6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80061a8:	443b      	add	r3, r7
 80061aa:	9308      	str	r3, [sp, #32]
 80061ac:	2300      	movs	r3, #0
 80061ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80061b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061b2:	2b09      	cmp	r3, #9
 80061b4:	d864      	bhi.n	8006280 <_dtoa_r+0x280>
 80061b6:	2b05      	cmp	r3, #5
 80061b8:	bfc4      	itt	gt
 80061ba:	3b04      	subgt	r3, #4
 80061bc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80061be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061c0:	f1a3 0302 	sub.w	r3, r3, #2
 80061c4:	bfcc      	ite	gt
 80061c6:	2400      	movgt	r4, #0
 80061c8:	2401      	movle	r4, #1
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	d863      	bhi.n	8006296 <_dtoa_r+0x296>
 80061ce:	e8df f003 	tbb	[pc, r3]
 80061d2:	372a      	.short	0x372a
 80061d4:	5535      	.short	0x5535
 80061d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80061da:	441e      	add	r6, r3
 80061dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80061e0:	2b20      	cmp	r3, #32
 80061e2:	bfc1      	itttt	gt
 80061e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80061e8:	409f      	lslgt	r7, r3
 80061ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80061ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 80061f2:	bfd6      	itet	le
 80061f4:	f1c3 0320 	rsble	r3, r3, #32
 80061f8:	ea47 0003 	orrgt.w	r0, r7, r3
 80061fc:	fa04 f003 	lslle.w	r0, r4, r3
 8006200:	f7fa f9a0 	bl	8000544 <__aeabi_ui2d>
 8006204:	2201      	movs	r2, #1
 8006206:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800620a:	3e01      	subs	r6, #1
 800620c:	9214      	str	r2, [sp, #80]	@ 0x50
 800620e:	e777      	b.n	8006100 <_dtoa_r+0x100>
 8006210:	2301      	movs	r3, #1
 8006212:	e7b8      	b.n	8006186 <_dtoa_r+0x186>
 8006214:	9012      	str	r0, [sp, #72]	@ 0x48
 8006216:	e7b7      	b.n	8006188 <_dtoa_r+0x188>
 8006218:	427b      	negs	r3, r7
 800621a:	930a      	str	r3, [sp, #40]	@ 0x28
 800621c:	2300      	movs	r3, #0
 800621e:	eba8 0807 	sub.w	r8, r8, r7
 8006222:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006224:	e7c4      	b.n	80061b0 <_dtoa_r+0x1b0>
 8006226:	2300      	movs	r3, #0
 8006228:	930b      	str	r3, [sp, #44]	@ 0x2c
 800622a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800622c:	2b00      	cmp	r3, #0
 800622e:	dc35      	bgt.n	800629c <_dtoa_r+0x29c>
 8006230:	2301      	movs	r3, #1
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	9307      	str	r3, [sp, #28]
 8006236:	461a      	mov	r2, r3
 8006238:	920e      	str	r2, [sp, #56]	@ 0x38
 800623a:	e00b      	b.n	8006254 <_dtoa_r+0x254>
 800623c:	2301      	movs	r3, #1
 800623e:	e7f3      	b.n	8006228 <_dtoa_r+0x228>
 8006240:	2300      	movs	r3, #0
 8006242:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006244:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006246:	18fb      	adds	r3, r7, r3
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	3301      	adds	r3, #1
 800624c:	2b01      	cmp	r3, #1
 800624e:	9307      	str	r3, [sp, #28]
 8006250:	bfb8      	it	lt
 8006252:	2301      	movlt	r3, #1
 8006254:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006258:	2100      	movs	r1, #0
 800625a:	2204      	movs	r2, #4
 800625c:	f102 0514 	add.w	r5, r2, #20
 8006260:	429d      	cmp	r5, r3
 8006262:	d91f      	bls.n	80062a4 <_dtoa_r+0x2a4>
 8006264:	6041      	str	r1, [r0, #4]
 8006266:	4658      	mov	r0, fp
 8006268:	f000 fd8e 	bl	8006d88 <_Balloc>
 800626c:	4682      	mov	sl, r0
 800626e:	2800      	cmp	r0, #0
 8006270:	d13c      	bne.n	80062ec <_dtoa_r+0x2ec>
 8006272:	4b1b      	ldr	r3, [pc, #108]	@ (80062e0 <_dtoa_r+0x2e0>)
 8006274:	4602      	mov	r2, r0
 8006276:	f240 11af 	movw	r1, #431	@ 0x1af
 800627a:	e6d8      	b.n	800602e <_dtoa_r+0x2e>
 800627c:	2301      	movs	r3, #1
 800627e:	e7e0      	b.n	8006242 <_dtoa_r+0x242>
 8006280:	2401      	movs	r4, #1
 8006282:	2300      	movs	r3, #0
 8006284:	9309      	str	r3, [sp, #36]	@ 0x24
 8006286:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006288:	f04f 33ff 	mov.w	r3, #4294967295
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	9307      	str	r3, [sp, #28]
 8006290:	2200      	movs	r2, #0
 8006292:	2312      	movs	r3, #18
 8006294:	e7d0      	b.n	8006238 <_dtoa_r+0x238>
 8006296:	2301      	movs	r3, #1
 8006298:	930b      	str	r3, [sp, #44]	@ 0x2c
 800629a:	e7f5      	b.n	8006288 <_dtoa_r+0x288>
 800629c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800629e:	9300      	str	r3, [sp, #0]
 80062a0:	9307      	str	r3, [sp, #28]
 80062a2:	e7d7      	b.n	8006254 <_dtoa_r+0x254>
 80062a4:	3101      	adds	r1, #1
 80062a6:	0052      	lsls	r2, r2, #1
 80062a8:	e7d8      	b.n	800625c <_dtoa_r+0x25c>
 80062aa:	bf00      	nop
 80062ac:	f3af 8000 	nop.w
 80062b0:	636f4361 	.word	0x636f4361
 80062b4:	3fd287a7 	.word	0x3fd287a7
 80062b8:	8b60c8b3 	.word	0x8b60c8b3
 80062bc:	3fc68a28 	.word	0x3fc68a28
 80062c0:	509f79fb 	.word	0x509f79fb
 80062c4:	3fd34413 	.word	0x3fd34413
 80062c8:	08009c97 	.word	0x08009c97
 80062cc:	08009cae 	.word	0x08009cae
 80062d0:	7ff00000 	.word	0x7ff00000
 80062d4:	08009e98 	.word	0x08009e98
 80062d8:	3ff80000 	.word	0x3ff80000
 80062dc:	08009da8 	.word	0x08009da8
 80062e0:	08009d06 	.word	0x08009d06
 80062e4:	08009c93 	.word	0x08009c93
 80062e8:	08009e97 	.word	0x08009e97
 80062ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80062f0:	6018      	str	r0, [r3, #0]
 80062f2:	9b07      	ldr	r3, [sp, #28]
 80062f4:	2b0e      	cmp	r3, #14
 80062f6:	f200 80a4 	bhi.w	8006442 <_dtoa_r+0x442>
 80062fa:	2c00      	cmp	r4, #0
 80062fc:	f000 80a1 	beq.w	8006442 <_dtoa_r+0x442>
 8006300:	2f00      	cmp	r7, #0
 8006302:	dd33      	ble.n	800636c <_dtoa_r+0x36c>
 8006304:	4bad      	ldr	r3, [pc, #692]	@ (80065bc <_dtoa_r+0x5bc>)
 8006306:	f007 020f 	and.w	r2, r7, #15
 800630a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800630e:	ed93 7b00 	vldr	d7, [r3]
 8006312:	05f8      	lsls	r0, r7, #23
 8006314:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006318:	ea4f 1427 	mov.w	r4, r7, asr #4
 800631c:	d516      	bpl.n	800634c <_dtoa_r+0x34c>
 800631e:	4ba8      	ldr	r3, [pc, #672]	@ (80065c0 <_dtoa_r+0x5c0>)
 8006320:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006324:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006328:	f7fa fab0 	bl	800088c <__aeabi_ddiv>
 800632c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006330:	f004 040f 	and.w	r4, r4, #15
 8006334:	2603      	movs	r6, #3
 8006336:	4da2      	ldr	r5, [pc, #648]	@ (80065c0 <_dtoa_r+0x5c0>)
 8006338:	b954      	cbnz	r4, 8006350 <_dtoa_r+0x350>
 800633a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800633e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006342:	f7fa faa3 	bl	800088c <__aeabi_ddiv>
 8006346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800634a:	e028      	b.n	800639e <_dtoa_r+0x39e>
 800634c:	2602      	movs	r6, #2
 800634e:	e7f2      	b.n	8006336 <_dtoa_r+0x336>
 8006350:	07e1      	lsls	r1, r4, #31
 8006352:	d508      	bpl.n	8006366 <_dtoa_r+0x366>
 8006354:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006358:	e9d5 2300 	ldrd	r2, r3, [r5]
 800635c:	f7fa f96c 	bl	8000638 <__aeabi_dmul>
 8006360:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006364:	3601      	adds	r6, #1
 8006366:	1064      	asrs	r4, r4, #1
 8006368:	3508      	adds	r5, #8
 800636a:	e7e5      	b.n	8006338 <_dtoa_r+0x338>
 800636c:	f000 80d2 	beq.w	8006514 <_dtoa_r+0x514>
 8006370:	427c      	negs	r4, r7
 8006372:	4b92      	ldr	r3, [pc, #584]	@ (80065bc <_dtoa_r+0x5bc>)
 8006374:	4d92      	ldr	r5, [pc, #584]	@ (80065c0 <_dtoa_r+0x5c0>)
 8006376:	f004 020f 	and.w	r2, r4, #15
 800637a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800637e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006382:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006386:	f7fa f957 	bl	8000638 <__aeabi_dmul>
 800638a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800638e:	1124      	asrs	r4, r4, #4
 8006390:	2300      	movs	r3, #0
 8006392:	2602      	movs	r6, #2
 8006394:	2c00      	cmp	r4, #0
 8006396:	f040 80b2 	bne.w	80064fe <_dtoa_r+0x4fe>
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1d3      	bne.n	8006346 <_dtoa_r+0x346>
 800639e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80063a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 80b7 	beq.w	8006518 <_dtoa_r+0x518>
 80063aa:	4b86      	ldr	r3, [pc, #536]	@ (80065c4 <_dtoa_r+0x5c4>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	4620      	mov	r0, r4
 80063b0:	4629      	mov	r1, r5
 80063b2:	f7fa fbb3 	bl	8000b1c <__aeabi_dcmplt>
 80063b6:	2800      	cmp	r0, #0
 80063b8:	f000 80ae 	beq.w	8006518 <_dtoa_r+0x518>
 80063bc:	9b07      	ldr	r3, [sp, #28]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f000 80aa 	beq.w	8006518 <_dtoa_r+0x518>
 80063c4:	9b00      	ldr	r3, [sp, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	dd37      	ble.n	800643a <_dtoa_r+0x43a>
 80063ca:	1e7b      	subs	r3, r7, #1
 80063cc:	9304      	str	r3, [sp, #16]
 80063ce:	4620      	mov	r0, r4
 80063d0:	4b7d      	ldr	r3, [pc, #500]	@ (80065c8 <_dtoa_r+0x5c8>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	4629      	mov	r1, r5
 80063d6:	f7fa f92f 	bl	8000638 <__aeabi_dmul>
 80063da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063de:	9c00      	ldr	r4, [sp, #0]
 80063e0:	3601      	adds	r6, #1
 80063e2:	4630      	mov	r0, r6
 80063e4:	f7fa f8be 	bl	8000564 <__aeabi_i2d>
 80063e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063ec:	f7fa f924 	bl	8000638 <__aeabi_dmul>
 80063f0:	4b76      	ldr	r3, [pc, #472]	@ (80065cc <_dtoa_r+0x5cc>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	f7f9 ff6a 	bl	80002cc <__adddf3>
 80063f8:	4605      	mov	r5, r0
 80063fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80063fe:	2c00      	cmp	r4, #0
 8006400:	f040 808d 	bne.w	800651e <_dtoa_r+0x51e>
 8006404:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006408:	4b71      	ldr	r3, [pc, #452]	@ (80065d0 <_dtoa_r+0x5d0>)
 800640a:	2200      	movs	r2, #0
 800640c:	f7f9 ff5c 	bl	80002c8 <__aeabi_dsub>
 8006410:	4602      	mov	r2, r0
 8006412:	460b      	mov	r3, r1
 8006414:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006418:	462a      	mov	r2, r5
 800641a:	4633      	mov	r3, r6
 800641c:	f7fa fb9c 	bl	8000b58 <__aeabi_dcmpgt>
 8006420:	2800      	cmp	r0, #0
 8006422:	f040 828b 	bne.w	800693c <_dtoa_r+0x93c>
 8006426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800642a:	462a      	mov	r2, r5
 800642c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006430:	f7fa fb74 	bl	8000b1c <__aeabi_dcmplt>
 8006434:	2800      	cmp	r0, #0
 8006436:	f040 8128 	bne.w	800668a <_dtoa_r+0x68a>
 800643a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800643e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006442:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006444:	2b00      	cmp	r3, #0
 8006446:	f2c0 815a 	blt.w	80066fe <_dtoa_r+0x6fe>
 800644a:	2f0e      	cmp	r7, #14
 800644c:	f300 8157 	bgt.w	80066fe <_dtoa_r+0x6fe>
 8006450:	4b5a      	ldr	r3, [pc, #360]	@ (80065bc <_dtoa_r+0x5bc>)
 8006452:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006456:	ed93 7b00 	vldr	d7, [r3]
 800645a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800645c:	2b00      	cmp	r3, #0
 800645e:	ed8d 7b00 	vstr	d7, [sp]
 8006462:	da03      	bge.n	800646c <_dtoa_r+0x46c>
 8006464:	9b07      	ldr	r3, [sp, #28]
 8006466:	2b00      	cmp	r3, #0
 8006468:	f340 8101 	ble.w	800666e <_dtoa_r+0x66e>
 800646c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006470:	4656      	mov	r6, sl
 8006472:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006476:	4620      	mov	r0, r4
 8006478:	4629      	mov	r1, r5
 800647a:	f7fa fa07 	bl	800088c <__aeabi_ddiv>
 800647e:	f7fa fb8b 	bl	8000b98 <__aeabi_d2iz>
 8006482:	4680      	mov	r8, r0
 8006484:	f7fa f86e 	bl	8000564 <__aeabi_i2d>
 8006488:	e9dd 2300 	ldrd	r2, r3, [sp]
 800648c:	f7fa f8d4 	bl	8000638 <__aeabi_dmul>
 8006490:	4602      	mov	r2, r0
 8006492:	460b      	mov	r3, r1
 8006494:	4620      	mov	r0, r4
 8006496:	4629      	mov	r1, r5
 8006498:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800649c:	f7f9 ff14 	bl	80002c8 <__aeabi_dsub>
 80064a0:	f806 4b01 	strb.w	r4, [r6], #1
 80064a4:	9d07      	ldr	r5, [sp, #28]
 80064a6:	eba6 040a 	sub.w	r4, r6, sl
 80064aa:	42a5      	cmp	r5, r4
 80064ac:	4602      	mov	r2, r0
 80064ae:	460b      	mov	r3, r1
 80064b0:	f040 8117 	bne.w	80066e2 <_dtoa_r+0x6e2>
 80064b4:	f7f9 ff0a 	bl	80002cc <__adddf3>
 80064b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064bc:	4604      	mov	r4, r0
 80064be:	460d      	mov	r5, r1
 80064c0:	f7fa fb4a 	bl	8000b58 <__aeabi_dcmpgt>
 80064c4:	2800      	cmp	r0, #0
 80064c6:	f040 80f9 	bne.w	80066bc <_dtoa_r+0x6bc>
 80064ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064ce:	4620      	mov	r0, r4
 80064d0:	4629      	mov	r1, r5
 80064d2:	f7fa fb19 	bl	8000b08 <__aeabi_dcmpeq>
 80064d6:	b118      	cbz	r0, 80064e0 <_dtoa_r+0x4e0>
 80064d8:	f018 0f01 	tst.w	r8, #1
 80064dc:	f040 80ee 	bne.w	80066bc <_dtoa_r+0x6bc>
 80064e0:	4649      	mov	r1, r9
 80064e2:	4658      	mov	r0, fp
 80064e4:	f000 fc90 	bl	8006e08 <_Bfree>
 80064e8:	2300      	movs	r3, #0
 80064ea:	7033      	strb	r3, [r6, #0]
 80064ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80064ee:	3701      	adds	r7, #1
 80064f0:	601f      	str	r7, [r3, #0]
 80064f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 831d 	beq.w	8006b34 <_dtoa_r+0xb34>
 80064fa:	601e      	str	r6, [r3, #0]
 80064fc:	e31a      	b.n	8006b34 <_dtoa_r+0xb34>
 80064fe:	07e2      	lsls	r2, r4, #31
 8006500:	d505      	bpl.n	800650e <_dtoa_r+0x50e>
 8006502:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006506:	f7fa f897 	bl	8000638 <__aeabi_dmul>
 800650a:	3601      	adds	r6, #1
 800650c:	2301      	movs	r3, #1
 800650e:	1064      	asrs	r4, r4, #1
 8006510:	3508      	adds	r5, #8
 8006512:	e73f      	b.n	8006394 <_dtoa_r+0x394>
 8006514:	2602      	movs	r6, #2
 8006516:	e742      	b.n	800639e <_dtoa_r+0x39e>
 8006518:	9c07      	ldr	r4, [sp, #28]
 800651a:	9704      	str	r7, [sp, #16]
 800651c:	e761      	b.n	80063e2 <_dtoa_r+0x3e2>
 800651e:	4b27      	ldr	r3, [pc, #156]	@ (80065bc <_dtoa_r+0x5bc>)
 8006520:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006522:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006526:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800652a:	4454      	add	r4, sl
 800652c:	2900      	cmp	r1, #0
 800652e:	d053      	beq.n	80065d8 <_dtoa_r+0x5d8>
 8006530:	4928      	ldr	r1, [pc, #160]	@ (80065d4 <_dtoa_r+0x5d4>)
 8006532:	2000      	movs	r0, #0
 8006534:	f7fa f9aa 	bl	800088c <__aeabi_ddiv>
 8006538:	4633      	mov	r3, r6
 800653a:	462a      	mov	r2, r5
 800653c:	f7f9 fec4 	bl	80002c8 <__aeabi_dsub>
 8006540:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006544:	4656      	mov	r6, sl
 8006546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800654a:	f7fa fb25 	bl	8000b98 <__aeabi_d2iz>
 800654e:	4605      	mov	r5, r0
 8006550:	f7fa f808 	bl	8000564 <__aeabi_i2d>
 8006554:	4602      	mov	r2, r0
 8006556:	460b      	mov	r3, r1
 8006558:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800655c:	f7f9 feb4 	bl	80002c8 <__aeabi_dsub>
 8006560:	3530      	adds	r5, #48	@ 0x30
 8006562:	4602      	mov	r2, r0
 8006564:	460b      	mov	r3, r1
 8006566:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800656a:	f806 5b01 	strb.w	r5, [r6], #1
 800656e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006572:	f7fa fad3 	bl	8000b1c <__aeabi_dcmplt>
 8006576:	2800      	cmp	r0, #0
 8006578:	d171      	bne.n	800665e <_dtoa_r+0x65e>
 800657a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800657e:	4911      	ldr	r1, [pc, #68]	@ (80065c4 <_dtoa_r+0x5c4>)
 8006580:	2000      	movs	r0, #0
 8006582:	f7f9 fea1 	bl	80002c8 <__aeabi_dsub>
 8006586:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800658a:	f7fa fac7 	bl	8000b1c <__aeabi_dcmplt>
 800658e:	2800      	cmp	r0, #0
 8006590:	f040 8095 	bne.w	80066be <_dtoa_r+0x6be>
 8006594:	42a6      	cmp	r6, r4
 8006596:	f43f af50 	beq.w	800643a <_dtoa_r+0x43a>
 800659a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800659e:	4b0a      	ldr	r3, [pc, #40]	@ (80065c8 <_dtoa_r+0x5c8>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	f7fa f849 	bl	8000638 <__aeabi_dmul>
 80065a6:	4b08      	ldr	r3, [pc, #32]	@ (80065c8 <_dtoa_r+0x5c8>)
 80065a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80065ac:	2200      	movs	r2, #0
 80065ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065b2:	f7fa f841 	bl	8000638 <__aeabi_dmul>
 80065b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065ba:	e7c4      	b.n	8006546 <_dtoa_r+0x546>
 80065bc:	08009da8 	.word	0x08009da8
 80065c0:	08009d80 	.word	0x08009d80
 80065c4:	3ff00000 	.word	0x3ff00000
 80065c8:	40240000 	.word	0x40240000
 80065cc:	401c0000 	.word	0x401c0000
 80065d0:	40140000 	.word	0x40140000
 80065d4:	3fe00000 	.word	0x3fe00000
 80065d8:	4631      	mov	r1, r6
 80065da:	4628      	mov	r0, r5
 80065dc:	f7fa f82c 	bl	8000638 <__aeabi_dmul>
 80065e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80065e4:	9415      	str	r4, [sp, #84]	@ 0x54
 80065e6:	4656      	mov	r6, sl
 80065e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065ec:	f7fa fad4 	bl	8000b98 <__aeabi_d2iz>
 80065f0:	4605      	mov	r5, r0
 80065f2:	f7f9 ffb7 	bl	8000564 <__aeabi_i2d>
 80065f6:	4602      	mov	r2, r0
 80065f8:	460b      	mov	r3, r1
 80065fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065fe:	f7f9 fe63 	bl	80002c8 <__aeabi_dsub>
 8006602:	3530      	adds	r5, #48	@ 0x30
 8006604:	f806 5b01 	strb.w	r5, [r6], #1
 8006608:	4602      	mov	r2, r0
 800660a:	460b      	mov	r3, r1
 800660c:	42a6      	cmp	r6, r4
 800660e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006612:	f04f 0200 	mov.w	r2, #0
 8006616:	d124      	bne.n	8006662 <_dtoa_r+0x662>
 8006618:	4bac      	ldr	r3, [pc, #688]	@ (80068cc <_dtoa_r+0x8cc>)
 800661a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800661e:	f7f9 fe55 	bl	80002cc <__adddf3>
 8006622:	4602      	mov	r2, r0
 8006624:	460b      	mov	r3, r1
 8006626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800662a:	f7fa fa95 	bl	8000b58 <__aeabi_dcmpgt>
 800662e:	2800      	cmp	r0, #0
 8006630:	d145      	bne.n	80066be <_dtoa_r+0x6be>
 8006632:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006636:	49a5      	ldr	r1, [pc, #660]	@ (80068cc <_dtoa_r+0x8cc>)
 8006638:	2000      	movs	r0, #0
 800663a:	f7f9 fe45 	bl	80002c8 <__aeabi_dsub>
 800663e:	4602      	mov	r2, r0
 8006640:	460b      	mov	r3, r1
 8006642:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006646:	f7fa fa69 	bl	8000b1c <__aeabi_dcmplt>
 800664a:	2800      	cmp	r0, #0
 800664c:	f43f aef5 	beq.w	800643a <_dtoa_r+0x43a>
 8006650:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006652:	1e73      	subs	r3, r6, #1
 8006654:	9315      	str	r3, [sp, #84]	@ 0x54
 8006656:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800665a:	2b30      	cmp	r3, #48	@ 0x30
 800665c:	d0f8      	beq.n	8006650 <_dtoa_r+0x650>
 800665e:	9f04      	ldr	r7, [sp, #16]
 8006660:	e73e      	b.n	80064e0 <_dtoa_r+0x4e0>
 8006662:	4b9b      	ldr	r3, [pc, #620]	@ (80068d0 <_dtoa_r+0x8d0>)
 8006664:	f7f9 ffe8 	bl	8000638 <__aeabi_dmul>
 8006668:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800666c:	e7bc      	b.n	80065e8 <_dtoa_r+0x5e8>
 800666e:	d10c      	bne.n	800668a <_dtoa_r+0x68a>
 8006670:	4b98      	ldr	r3, [pc, #608]	@ (80068d4 <_dtoa_r+0x8d4>)
 8006672:	2200      	movs	r2, #0
 8006674:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006678:	f7f9 ffde 	bl	8000638 <__aeabi_dmul>
 800667c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006680:	f7fa fa60 	bl	8000b44 <__aeabi_dcmpge>
 8006684:	2800      	cmp	r0, #0
 8006686:	f000 8157 	beq.w	8006938 <_dtoa_r+0x938>
 800668a:	2400      	movs	r4, #0
 800668c:	4625      	mov	r5, r4
 800668e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006690:	43db      	mvns	r3, r3
 8006692:	9304      	str	r3, [sp, #16]
 8006694:	4656      	mov	r6, sl
 8006696:	2700      	movs	r7, #0
 8006698:	4621      	mov	r1, r4
 800669a:	4658      	mov	r0, fp
 800669c:	f000 fbb4 	bl	8006e08 <_Bfree>
 80066a0:	2d00      	cmp	r5, #0
 80066a2:	d0dc      	beq.n	800665e <_dtoa_r+0x65e>
 80066a4:	b12f      	cbz	r7, 80066b2 <_dtoa_r+0x6b2>
 80066a6:	42af      	cmp	r7, r5
 80066a8:	d003      	beq.n	80066b2 <_dtoa_r+0x6b2>
 80066aa:	4639      	mov	r1, r7
 80066ac:	4658      	mov	r0, fp
 80066ae:	f000 fbab 	bl	8006e08 <_Bfree>
 80066b2:	4629      	mov	r1, r5
 80066b4:	4658      	mov	r0, fp
 80066b6:	f000 fba7 	bl	8006e08 <_Bfree>
 80066ba:	e7d0      	b.n	800665e <_dtoa_r+0x65e>
 80066bc:	9704      	str	r7, [sp, #16]
 80066be:	4633      	mov	r3, r6
 80066c0:	461e      	mov	r6, r3
 80066c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066c6:	2a39      	cmp	r2, #57	@ 0x39
 80066c8:	d107      	bne.n	80066da <_dtoa_r+0x6da>
 80066ca:	459a      	cmp	sl, r3
 80066cc:	d1f8      	bne.n	80066c0 <_dtoa_r+0x6c0>
 80066ce:	9a04      	ldr	r2, [sp, #16]
 80066d0:	3201      	adds	r2, #1
 80066d2:	9204      	str	r2, [sp, #16]
 80066d4:	2230      	movs	r2, #48	@ 0x30
 80066d6:	f88a 2000 	strb.w	r2, [sl]
 80066da:	781a      	ldrb	r2, [r3, #0]
 80066dc:	3201      	adds	r2, #1
 80066de:	701a      	strb	r2, [r3, #0]
 80066e0:	e7bd      	b.n	800665e <_dtoa_r+0x65e>
 80066e2:	4b7b      	ldr	r3, [pc, #492]	@ (80068d0 <_dtoa_r+0x8d0>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	f7f9 ffa7 	bl	8000638 <__aeabi_dmul>
 80066ea:	2200      	movs	r2, #0
 80066ec:	2300      	movs	r3, #0
 80066ee:	4604      	mov	r4, r0
 80066f0:	460d      	mov	r5, r1
 80066f2:	f7fa fa09 	bl	8000b08 <__aeabi_dcmpeq>
 80066f6:	2800      	cmp	r0, #0
 80066f8:	f43f aebb 	beq.w	8006472 <_dtoa_r+0x472>
 80066fc:	e6f0      	b.n	80064e0 <_dtoa_r+0x4e0>
 80066fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006700:	2a00      	cmp	r2, #0
 8006702:	f000 80db 	beq.w	80068bc <_dtoa_r+0x8bc>
 8006706:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006708:	2a01      	cmp	r2, #1
 800670a:	f300 80bf 	bgt.w	800688c <_dtoa_r+0x88c>
 800670e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006710:	2a00      	cmp	r2, #0
 8006712:	f000 80b7 	beq.w	8006884 <_dtoa_r+0x884>
 8006716:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800671a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800671c:	4646      	mov	r6, r8
 800671e:	9a08      	ldr	r2, [sp, #32]
 8006720:	2101      	movs	r1, #1
 8006722:	441a      	add	r2, r3
 8006724:	4658      	mov	r0, fp
 8006726:	4498      	add	r8, r3
 8006728:	9208      	str	r2, [sp, #32]
 800672a:	f000 fc21 	bl	8006f70 <__i2b>
 800672e:	4605      	mov	r5, r0
 8006730:	b15e      	cbz	r6, 800674a <_dtoa_r+0x74a>
 8006732:	9b08      	ldr	r3, [sp, #32]
 8006734:	2b00      	cmp	r3, #0
 8006736:	dd08      	ble.n	800674a <_dtoa_r+0x74a>
 8006738:	42b3      	cmp	r3, r6
 800673a:	9a08      	ldr	r2, [sp, #32]
 800673c:	bfa8      	it	ge
 800673e:	4633      	movge	r3, r6
 8006740:	eba8 0803 	sub.w	r8, r8, r3
 8006744:	1af6      	subs	r6, r6, r3
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	9308      	str	r3, [sp, #32]
 800674a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800674c:	b1f3      	cbz	r3, 800678c <_dtoa_r+0x78c>
 800674e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 80b7 	beq.w	80068c4 <_dtoa_r+0x8c4>
 8006756:	b18c      	cbz	r4, 800677c <_dtoa_r+0x77c>
 8006758:	4629      	mov	r1, r5
 800675a:	4622      	mov	r2, r4
 800675c:	4658      	mov	r0, fp
 800675e:	f000 fcc7 	bl	80070f0 <__pow5mult>
 8006762:	464a      	mov	r2, r9
 8006764:	4601      	mov	r1, r0
 8006766:	4605      	mov	r5, r0
 8006768:	4658      	mov	r0, fp
 800676a:	f000 fc17 	bl	8006f9c <__multiply>
 800676e:	4649      	mov	r1, r9
 8006770:	9004      	str	r0, [sp, #16]
 8006772:	4658      	mov	r0, fp
 8006774:	f000 fb48 	bl	8006e08 <_Bfree>
 8006778:	9b04      	ldr	r3, [sp, #16]
 800677a:	4699      	mov	r9, r3
 800677c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800677e:	1b1a      	subs	r2, r3, r4
 8006780:	d004      	beq.n	800678c <_dtoa_r+0x78c>
 8006782:	4649      	mov	r1, r9
 8006784:	4658      	mov	r0, fp
 8006786:	f000 fcb3 	bl	80070f0 <__pow5mult>
 800678a:	4681      	mov	r9, r0
 800678c:	2101      	movs	r1, #1
 800678e:	4658      	mov	r0, fp
 8006790:	f000 fbee 	bl	8006f70 <__i2b>
 8006794:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006796:	4604      	mov	r4, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 81cf 	beq.w	8006b3c <_dtoa_r+0xb3c>
 800679e:	461a      	mov	r2, r3
 80067a0:	4601      	mov	r1, r0
 80067a2:	4658      	mov	r0, fp
 80067a4:	f000 fca4 	bl	80070f0 <__pow5mult>
 80067a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	4604      	mov	r4, r0
 80067ae:	f300 8095 	bgt.w	80068dc <_dtoa_r+0x8dc>
 80067b2:	9b02      	ldr	r3, [sp, #8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f040 8087 	bne.w	80068c8 <_dtoa_r+0x8c8>
 80067ba:	9b03      	ldr	r3, [sp, #12]
 80067bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f040 8089 	bne.w	80068d8 <_dtoa_r+0x8d8>
 80067c6:	9b03      	ldr	r3, [sp, #12]
 80067c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80067cc:	0d1b      	lsrs	r3, r3, #20
 80067ce:	051b      	lsls	r3, r3, #20
 80067d0:	b12b      	cbz	r3, 80067de <_dtoa_r+0x7de>
 80067d2:	9b08      	ldr	r3, [sp, #32]
 80067d4:	3301      	adds	r3, #1
 80067d6:	9308      	str	r3, [sp, #32]
 80067d8:	f108 0801 	add.w	r8, r8, #1
 80067dc:	2301      	movs	r3, #1
 80067de:	930a      	str	r3, [sp, #40]	@ 0x28
 80067e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 81b0 	beq.w	8006b48 <_dtoa_r+0xb48>
 80067e8:	6923      	ldr	r3, [r4, #16]
 80067ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80067ee:	6918      	ldr	r0, [r3, #16]
 80067f0:	f000 fb72 	bl	8006ed8 <__hi0bits>
 80067f4:	f1c0 0020 	rsb	r0, r0, #32
 80067f8:	9b08      	ldr	r3, [sp, #32]
 80067fa:	4418      	add	r0, r3
 80067fc:	f010 001f 	ands.w	r0, r0, #31
 8006800:	d077      	beq.n	80068f2 <_dtoa_r+0x8f2>
 8006802:	f1c0 0320 	rsb	r3, r0, #32
 8006806:	2b04      	cmp	r3, #4
 8006808:	dd6b      	ble.n	80068e2 <_dtoa_r+0x8e2>
 800680a:	9b08      	ldr	r3, [sp, #32]
 800680c:	f1c0 001c 	rsb	r0, r0, #28
 8006810:	4403      	add	r3, r0
 8006812:	4480      	add	r8, r0
 8006814:	4406      	add	r6, r0
 8006816:	9308      	str	r3, [sp, #32]
 8006818:	f1b8 0f00 	cmp.w	r8, #0
 800681c:	dd05      	ble.n	800682a <_dtoa_r+0x82a>
 800681e:	4649      	mov	r1, r9
 8006820:	4642      	mov	r2, r8
 8006822:	4658      	mov	r0, fp
 8006824:	f000 fcbe 	bl	80071a4 <__lshift>
 8006828:	4681      	mov	r9, r0
 800682a:	9b08      	ldr	r3, [sp, #32]
 800682c:	2b00      	cmp	r3, #0
 800682e:	dd05      	ble.n	800683c <_dtoa_r+0x83c>
 8006830:	4621      	mov	r1, r4
 8006832:	461a      	mov	r2, r3
 8006834:	4658      	mov	r0, fp
 8006836:	f000 fcb5 	bl	80071a4 <__lshift>
 800683a:	4604      	mov	r4, r0
 800683c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800683e:	2b00      	cmp	r3, #0
 8006840:	d059      	beq.n	80068f6 <_dtoa_r+0x8f6>
 8006842:	4621      	mov	r1, r4
 8006844:	4648      	mov	r0, r9
 8006846:	f000 fd19 	bl	800727c <__mcmp>
 800684a:	2800      	cmp	r0, #0
 800684c:	da53      	bge.n	80068f6 <_dtoa_r+0x8f6>
 800684e:	1e7b      	subs	r3, r7, #1
 8006850:	9304      	str	r3, [sp, #16]
 8006852:	4649      	mov	r1, r9
 8006854:	2300      	movs	r3, #0
 8006856:	220a      	movs	r2, #10
 8006858:	4658      	mov	r0, fp
 800685a:	f000 faf7 	bl	8006e4c <__multadd>
 800685e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006860:	4681      	mov	r9, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 8172 	beq.w	8006b4c <_dtoa_r+0xb4c>
 8006868:	2300      	movs	r3, #0
 800686a:	4629      	mov	r1, r5
 800686c:	220a      	movs	r2, #10
 800686e:	4658      	mov	r0, fp
 8006870:	f000 faec 	bl	8006e4c <__multadd>
 8006874:	9b00      	ldr	r3, [sp, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	4605      	mov	r5, r0
 800687a:	dc67      	bgt.n	800694c <_dtoa_r+0x94c>
 800687c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800687e:	2b02      	cmp	r3, #2
 8006880:	dc41      	bgt.n	8006906 <_dtoa_r+0x906>
 8006882:	e063      	b.n	800694c <_dtoa_r+0x94c>
 8006884:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006886:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800688a:	e746      	b.n	800671a <_dtoa_r+0x71a>
 800688c:	9b07      	ldr	r3, [sp, #28]
 800688e:	1e5c      	subs	r4, r3, #1
 8006890:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006892:	42a3      	cmp	r3, r4
 8006894:	bfbf      	itttt	lt
 8006896:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006898:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800689a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800689c:	1ae3      	sublt	r3, r4, r3
 800689e:	bfb4      	ite	lt
 80068a0:	18d2      	addlt	r2, r2, r3
 80068a2:	1b1c      	subge	r4, r3, r4
 80068a4:	9b07      	ldr	r3, [sp, #28]
 80068a6:	bfbc      	itt	lt
 80068a8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80068aa:	2400      	movlt	r4, #0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	bfb5      	itete	lt
 80068b0:	eba8 0603 	sublt.w	r6, r8, r3
 80068b4:	9b07      	ldrge	r3, [sp, #28]
 80068b6:	2300      	movlt	r3, #0
 80068b8:	4646      	movge	r6, r8
 80068ba:	e730      	b.n	800671e <_dtoa_r+0x71e>
 80068bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80068be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80068c0:	4646      	mov	r6, r8
 80068c2:	e735      	b.n	8006730 <_dtoa_r+0x730>
 80068c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80068c6:	e75c      	b.n	8006782 <_dtoa_r+0x782>
 80068c8:	2300      	movs	r3, #0
 80068ca:	e788      	b.n	80067de <_dtoa_r+0x7de>
 80068cc:	3fe00000 	.word	0x3fe00000
 80068d0:	40240000 	.word	0x40240000
 80068d4:	40140000 	.word	0x40140000
 80068d8:	9b02      	ldr	r3, [sp, #8]
 80068da:	e780      	b.n	80067de <_dtoa_r+0x7de>
 80068dc:	2300      	movs	r3, #0
 80068de:	930a      	str	r3, [sp, #40]	@ 0x28
 80068e0:	e782      	b.n	80067e8 <_dtoa_r+0x7e8>
 80068e2:	d099      	beq.n	8006818 <_dtoa_r+0x818>
 80068e4:	9a08      	ldr	r2, [sp, #32]
 80068e6:	331c      	adds	r3, #28
 80068e8:	441a      	add	r2, r3
 80068ea:	4498      	add	r8, r3
 80068ec:	441e      	add	r6, r3
 80068ee:	9208      	str	r2, [sp, #32]
 80068f0:	e792      	b.n	8006818 <_dtoa_r+0x818>
 80068f2:	4603      	mov	r3, r0
 80068f4:	e7f6      	b.n	80068e4 <_dtoa_r+0x8e4>
 80068f6:	9b07      	ldr	r3, [sp, #28]
 80068f8:	9704      	str	r7, [sp, #16]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	dc20      	bgt.n	8006940 <_dtoa_r+0x940>
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006902:	2b02      	cmp	r3, #2
 8006904:	dd1e      	ble.n	8006944 <_dtoa_r+0x944>
 8006906:	9b00      	ldr	r3, [sp, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	f47f aec0 	bne.w	800668e <_dtoa_r+0x68e>
 800690e:	4621      	mov	r1, r4
 8006910:	2205      	movs	r2, #5
 8006912:	4658      	mov	r0, fp
 8006914:	f000 fa9a 	bl	8006e4c <__multadd>
 8006918:	4601      	mov	r1, r0
 800691a:	4604      	mov	r4, r0
 800691c:	4648      	mov	r0, r9
 800691e:	f000 fcad 	bl	800727c <__mcmp>
 8006922:	2800      	cmp	r0, #0
 8006924:	f77f aeb3 	ble.w	800668e <_dtoa_r+0x68e>
 8006928:	4656      	mov	r6, sl
 800692a:	2331      	movs	r3, #49	@ 0x31
 800692c:	f806 3b01 	strb.w	r3, [r6], #1
 8006930:	9b04      	ldr	r3, [sp, #16]
 8006932:	3301      	adds	r3, #1
 8006934:	9304      	str	r3, [sp, #16]
 8006936:	e6ae      	b.n	8006696 <_dtoa_r+0x696>
 8006938:	9c07      	ldr	r4, [sp, #28]
 800693a:	9704      	str	r7, [sp, #16]
 800693c:	4625      	mov	r5, r4
 800693e:	e7f3      	b.n	8006928 <_dtoa_r+0x928>
 8006940:	9b07      	ldr	r3, [sp, #28]
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 8104 	beq.w	8006b54 <_dtoa_r+0xb54>
 800694c:	2e00      	cmp	r6, #0
 800694e:	dd05      	ble.n	800695c <_dtoa_r+0x95c>
 8006950:	4629      	mov	r1, r5
 8006952:	4632      	mov	r2, r6
 8006954:	4658      	mov	r0, fp
 8006956:	f000 fc25 	bl	80071a4 <__lshift>
 800695a:	4605      	mov	r5, r0
 800695c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800695e:	2b00      	cmp	r3, #0
 8006960:	d05a      	beq.n	8006a18 <_dtoa_r+0xa18>
 8006962:	6869      	ldr	r1, [r5, #4]
 8006964:	4658      	mov	r0, fp
 8006966:	f000 fa0f 	bl	8006d88 <_Balloc>
 800696a:	4606      	mov	r6, r0
 800696c:	b928      	cbnz	r0, 800697a <_dtoa_r+0x97a>
 800696e:	4b84      	ldr	r3, [pc, #528]	@ (8006b80 <_dtoa_r+0xb80>)
 8006970:	4602      	mov	r2, r0
 8006972:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006976:	f7ff bb5a 	b.w	800602e <_dtoa_r+0x2e>
 800697a:	692a      	ldr	r2, [r5, #16]
 800697c:	3202      	adds	r2, #2
 800697e:	0092      	lsls	r2, r2, #2
 8006980:	f105 010c 	add.w	r1, r5, #12
 8006984:	300c      	adds	r0, #12
 8006986:	f001 fd3d 	bl	8008404 <memcpy>
 800698a:	2201      	movs	r2, #1
 800698c:	4631      	mov	r1, r6
 800698e:	4658      	mov	r0, fp
 8006990:	f000 fc08 	bl	80071a4 <__lshift>
 8006994:	f10a 0301 	add.w	r3, sl, #1
 8006998:	9307      	str	r3, [sp, #28]
 800699a:	9b00      	ldr	r3, [sp, #0]
 800699c:	4453      	add	r3, sl
 800699e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069a0:	9b02      	ldr	r3, [sp, #8]
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	462f      	mov	r7, r5
 80069a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80069aa:	4605      	mov	r5, r0
 80069ac:	9b07      	ldr	r3, [sp, #28]
 80069ae:	4621      	mov	r1, r4
 80069b0:	3b01      	subs	r3, #1
 80069b2:	4648      	mov	r0, r9
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	f7ff fa9a 	bl	8005eee <quorem>
 80069ba:	4639      	mov	r1, r7
 80069bc:	9002      	str	r0, [sp, #8]
 80069be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80069c2:	4648      	mov	r0, r9
 80069c4:	f000 fc5a 	bl	800727c <__mcmp>
 80069c8:	462a      	mov	r2, r5
 80069ca:	9008      	str	r0, [sp, #32]
 80069cc:	4621      	mov	r1, r4
 80069ce:	4658      	mov	r0, fp
 80069d0:	f000 fc70 	bl	80072b4 <__mdiff>
 80069d4:	68c2      	ldr	r2, [r0, #12]
 80069d6:	4606      	mov	r6, r0
 80069d8:	bb02      	cbnz	r2, 8006a1c <_dtoa_r+0xa1c>
 80069da:	4601      	mov	r1, r0
 80069dc:	4648      	mov	r0, r9
 80069de:	f000 fc4d 	bl	800727c <__mcmp>
 80069e2:	4602      	mov	r2, r0
 80069e4:	4631      	mov	r1, r6
 80069e6:	4658      	mov	r0, fp
 80069e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80069ea:	f000 fa0d 	bl	8006e08 <_Bfree>
 80069ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80069f2:	9e07      	ldr	r6, [sp, #28]
 80069f4:	ea43 0102 	orr.w	r1, r3, r2
 80069f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069fa:	4319      	orrs	r1, r3
 80069fc:	d110      	bne.n	8006a20 <_dtoa_r+0xa20>
 80069fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006a02:	d029      	beq.n	8006a58 <_dtoa_r+0xa58>
 8006a04:	9b08      	ldr	r3, [sp, #32]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	dd02      	ble.n	8006a10 <_dtoa_r+0xa10>
 8006a0a:	9b02      	ldr	r3, [sp, #8]
 8006a0c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006a10:	9b00      	ldr	r3, [sp, #0]
 8006a12:	f883 8000 	strb.w	r8, [r3]
 8006a16:	e63f      	b.n	8006698 <_dtoa_r+0x698>
 8006a18:	4628      	mov	r0, r5
 8006a1a:	e7bb      	b.n	8006994 <_dtoa_r+0x994>
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	e7e1      	b.n	80069e4 <_dtoa_r+0x9e4>
 8006a20:	9b08      	ldr	r3, [sp, #32]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	db04      	blt.n	8006a30 <_dtoa_r+0xa30>
 8006a26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a28:	430b      	orrs	r3, r1
 8006a2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006a2c:	430b      	orrs	r3, r1
 8006a2e:	d120      	bne.n	8006a72 <_dtoa_r+0xa72>
 8006a30:	2a00      	cmp	r2, #0
 8006a32:	dded      	ble.n	8006a10 <_dtoa_r+0xa10>
 8006a34:	4649      	mov	r1, r9
 8006a36:	2201      	movs	r2, #1
 8006a38:	4658      	mov	r0, fp
 8006a3a:	f000 fbb3 	bl	80071a4 <__lshift>
 8006a3e:	4621      	mov	r1, r4
 8006a40:	4681      	mov	r9, r0
 8006a42:	f000 fc1b 	bl	800727c <__mcmp>
 8006a46:	2800      	cmp	r0, #0
 8006a48:	dc03      	bgt.n	8006a52 <_dtoa_r+0xa52>
 8006a4a:	d1e1      	bne.n	8006a10 <_dtoa_r+0xa10>
 8006a4c:	f018 0f01 	tst.w	r8, #1
 8006a50:	d0de      	beq.n	8006a10 <_dtoa_r+0xa10>
 8006a52:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006a56:	d1d8      	bne.n	8006a0a <_dtoa_r+0xa0a>
 8006a58:	9a00      	ldr	r2, [sp, #0]
 8006a5a:	2339      	movs	r3, #57	@ 0x39
 8006a5c:	7013      	strb	r3, [r2, #0]
 8006a5e:	4633      	mov	r3, r6
 8006a60:	461e      	mov	r6, r3
 8006a62:	3b01      	subs	r3, #1
 8006a64:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006a68:	2a39      	cmp	r2, #57	@ 0x39
 8006a6a:	d052      	beq.n	8006b12 <_dtoa_r+0xb12>
 8006a6c:	3201      	adds	r2, #1
 8006a6e:	701a      	strb	r2, [r3, #0]
 8006a70:	e612      	b.n	8006698 <_dtoa_r+0x698>
 8006a72:	2a00      	cmp	r2, #0
 8006a74:	dd07      	ble.n	8006a86 <_dtoa_r+0xa86>
 8006a76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006a7a:	d0ed      	beq.n	8006a58 <_dtoa_r+0xa58>
 8006a7c:	9a00      	ldr	r2, [sp, #0]
 8006a7e:	f108 0301 	add.w	r3, r8, #1
 8006a82:	7013      	strb	r3, [r2, #0]
 8006a84:	e608      	b.n	8006698 <_dtoa_r+0x698>
 8006a86:	9b07      	ldr	r3, [sp, #28]
 8006a88:	9a07      	ldr	r2, [sp, #28]
 8006a8a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006a8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d028      	beq.n	8006ae6 <_dtoa_r+0xae6>
 8006a94:	4649      	mov	r1, r9
 8006a96:	2300      	movs	r3, #0
 8006a98:	220a      	movs	r2, #10
 8006a9a:	4658      	mov	r0, fp
 8006a9c:	f000 f9d6 	bl	8006e4c <__multadd>
 8006aa0:	42af      	cmp	r7, r5
 8006aa2:	4681      	mov	r9, r0
 8006aa4:	f04f 0300 	mov.w	r3, #0
 8006aa8:	f04f 020a 	mov.w	r2, #10
 8006aac:	4639      	mov	r1, r7
 8006aae:	4658      	mov	r0, fp
 8006ab0:	d107      	bne.n	8006ac2 <_dtoa_r+0xac2>
 8006ab2:	f000 f9cb 	bl	8006e4c <__multadd>
 8006ab6:	4607      	mov	r7, r0
 8006ab8:	4605      	mov	r5, r0
 8006aba:	9b07      	ldr	r3, [sp, #28]
 8006abc:	3301      	adds	r3, #1
 8006abe:	9307      	str	r3, [sp, #28]
 8006ac0:	e774      	b.n	80069ac <_dtoa_r+0x9ac>
 8006ac2:	f000 f9c3 	bl	8006e4c <__multadd>
 8006ac6:	4629      	mov	r1, r5
 8006ac8:	4607      	mov	r7, r0
 8006aca:	2300      	movs	r3, #0
 8006acc:	220a      	movs	r2, #10
 8006ace:	4658      	mov	r0, fp
 8006ad0:	f000 f9bc 	bl	8006e4c <__multadd>
 8006ad4:	4605      	mov	r5, r0
 8006ad6:	e7f0      	b.n	8006aba <_dtoa_r+0xaba>
 8006ad8:	9b00      	ldr	r3, [sp, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	bfcc      	ite	gt
 8006ade:	461e      	movgt	r6, r3
 8006ae0:	2601      	movle	r6, #1
 8006ae2:	4456      	add	r6, sl
 8006ae4:	2700      	movs	r7, #0
 8006ae6:	4649      	mov	r1, r9
 8006ae8:	2201      	movs	r2, #1
 8006aea:	4658      	mov	r0, fp
 8006aec:	f000 fb5a 	bl	80071a4 <__lshift>
 8006af0:	4621      	mov	r1, r4
 8006af2:	4681      	mov	r9, r0
 8006af4:	f000 fbc2 	bl	800727c <__mcmp>
 8006af8:	2800      	cmp	r0, #0
 8006afa:	dcb0      	bgt.n	8006a5e <_dtoa_r+0xa5e>
 8006afc:	d102      	bne.n	8006b04 <_dtoa_r+0xb04>
 8006afe:	f018 0f01 	tst.w	r8, #1
 8006b02:	d1ac      	bne.n	8006a5e <_dtoa_r+0xa5e>
 8006b04:	4633      	mov	r3, r6
 8006b06:	461e      	mov	r6, r3
 8006b08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b0c:	2a30      	cmp	r2, #48	@ 0x30
 8006b0e:	d0fa      	beq.n	8006b06 <_dtoa_r+0xb06>
 8006b10:	e5c2      	b.n	8006698 <_dtoa_r+0x698>
 8006b12:	459a      	cmp	sl, r3
 8006b14:	d1a4      	bne.n	8006a60 <_dtoa_r+0xa60>
 8006b16:	9b04      	ldr	r3, [sp, #16]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	9304      	str	r3, [sp, #16]
 8006b1c:	2331      	movs	r3, #49	@ 0x31
 8006b1e:	f88a 3000 	strb.w	r3, [sl]
 8006b22:	e5b9      	b.n	8006698 <_dtoa_r+0x698>
 8006b24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006b26:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006b84 <_dtoa_r+0xb84>
 8006b2a:	b11b      	cbz	r3, 8006b34 <_dtoa_r+0xb34>
 8006b2c:	f10a 0308 	add.w	r3, sl, #8
 8006b30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006b32:	6013      	str	r3, [r2, #0]
 8006b34:	4650      	mov	r0, sl
 8006b36:	b019      	add	sp, #100	@ 0x64
 8006b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	f77f ae37 	ble.w	80067b2 <_dtoa_r+0x7b2>
 8006b44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b46:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b48:	2001      	movs	r0, #1
 8006b4a:	e655      	b.n	80067f8 <_dtoa_r+0x7f8>
 8006b4c:	9b00      	ldr	r3, [sp, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f77f aed6 	ble.w	8006900 <_dtoa_r+0x900>
 8006b54:	4656      	mov	r6, sl
 8006b56:	4621      	mov	r1, r4
 8006b58:	4648      	mov	r0, r9
 8006b5a:	f7ff f9c8 	bl	8005eee <quorem>
 8006b5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006b62:	f806 8b01 	strb.w	r8, [r6], #1
 8006b66:	9b00      	ldr	r3, [sp, #0]
 8006b68:	eba6 020a 	sub.w	r2, r6, sl
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	ddb3      	ble.n	8006ad8 <_dtoa_r+0xad8>
 8006b70:	4649      	mov	r1, r9
 8006b72:	2300      	movs	r3, #0
 8006b74:	220a      	movs	r2, #10
 8006b76:	4658      	mov	r0, fp
 8006b78:	f000 f968 	bl	8006e4c <__multadd>
 8006b7c:	4681      	mov	r9, r0
 8006b7e:	e7ea      	b.n	8006b56 <_dtoa_r+0xb56>
 8006b80:	08009d06 	.word	0x08009d06
 8006b84:	08009c8a 	.word	0x08009c8a

08006b88 <_free_r>:
 8006b88:	b538      	push	{r3, r4, r5, lr}
 8006b8a:	4605      	mov	r5, r0
 8006b8c:	2900      	cmp	r1, #0
 8006b8e:	d041      	beq.n	8006c14 <_free_r+0x8c>
 8006b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b94:	1f0c      	subs	r4, r1, #4
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	bfb8      	it	lt
 8006b9a:	18e4      	addlt	r4, r4, r3
 8006b9c:	f000 f8e8 	bl	8006d70 <__malloc_lock>
 8006ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8006c18 <_free_r+0x90>)
 8006ba2:	6813      	ldr	r3, [r2, #0]
 8006ba4:	b933      	cbnz	r3, 8006bb4 <_free_r+0x2c>
 8006ba6:	6063      	str	r3, [r4, #4]
 8006ba8:	6014      	str	r4, [r2, #0]
 8006baa:	4628      	mov	r0, r5
 8006bac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bb0:	f000 b8e4 	b.w	8006d7c <__malloc_unlock>
 8006bb4:	42a3      	cmp	r3, r4
 8006bb6:	d908      	bls.n	8006bca <_free_r+0x42>
 8006bb8:	6820      	ldr	r0, [r4, #0]
 8006bba:	1821      	adds	r1, r4, r0
 8006bbc:	428b      	cmp	r3, r1
 8006bbe:	bf01      	itttt	eq
 8006bc0:	6819      	ldreq	r1, [r3, #0]
 8006bc2:	685b      	ldreq	r3, [r3, #4]
 8006bc4:	1809      	addeq	r1, r1, r0
 8006bc6:	6021      	streq	r1, [r4, #0]
 8006bc8:	e7ed      	b.n	8006ba6 <_free_r+0x1e>
 8006bca:	461a      	mov	r2, r3
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	b10b      	cbz	r3, 8006bd4 <_free_r+0x4c>
 8006bd0:	42a3      	cmp	r3, r4
 8006bd2:	d9fa      	bls.n	8006bca <_free_r+0x42>
 8006bd4:	6811      	ldr	r1, [r2, #0]
 8006bd6:	1850      	adds	r0, r2, r1
 8006bd8:	42a0      	cmp	r0, r4
 8006bda:	d10b      	bne.n	8006bf4 <_free_r+0x6c>
 8006bdc:	6820      	ldr	r0, [r4, #0]
 8006bde:	4401      	add	r1, r0
 8006be0:	1850      	adds	r0, r2, r1
 8006be2:	4283      	cmp	r3, r0
 8006be4:	6011      	str	r1, [r2, #0]
 8006be6:	d1e0      	bne.n	8006baa <_free_r+0x22>
 8006be8:	6818      	ldr	r0, [r3, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	6053      	str	r3, [r2, #4]
 8006bee:	4408      	add	r0, r1
 8006bf0:	6010      	str	r0, [r2, #0]
 8006bf2:	e7da      	b.n	8006baa <_free_r+0x22>
 8006bf4:	d902      	bls.n	8006bfc <_free_r+0x74>
 8006bf6:	230c      	movs	r3, #12
 8006bf8:	602b      	str	r3, [r5, #0]
 8006bfa:	e7d6      	b.n	8006baa <_free_r+0x22>
 8006bfc:	6820      	ldr	r0, [r4, #0]
 8006bfe:	1821      	adds	r1, r4, r0
 8006c00:	428b      	cmp	r3, r1
 8006c02:	bf04      	itt	eq
 8006c04:	6819      	ldreq	r1, [r3, #0]
 8006c06:	685b      	ldreq	r3, [r3, #4]
 8006c08:	6063      	str	r3, [r4, #4]
 8006c0a:	bf04      	itt	eq
 8006c0c:	1809      	addeq	r1, r1, r0
 8006c0e:	6021      	streq	r1, [r4, #0]
 8006c10:	6054      	str	r4, [r2, #4]
 8006c12:	e7ca      	b.n	8006baa <_free_r+0x22>
 8006c14:	bd38      	pop	{r3, r4, r5, pc}
 8006c16:	bf00      	nop
 8006c18:	20000428 	.word	0x20000428

08006c1c <malloc>:
 8006c1c:	4b02      	ldr	r3, [pc, #8]	@ (8006c28 <malloc+0xc>)
 8006c1e:	4601      	mov	r1, r0
 8006c20:	6818      	ldr	r0, [r3, #0]
 8006c22:	f000 b825 	b.w	8006c70 <_malloc_r>
 8006c26:	bf00      	nop
 8006c28:	20000018 	.word	0x20000018

08006c2c <sbrk_aligned>:
 8006c2c:	b570      	push	{r4, r5, r6, lr}
 8006c2e:	4e0f      	ldr	r6, [pc, #60]	@ (8006c6c <sbrk_aligned+0x40>)
 8006c30:	460c      	mov	r4, r1
 8006c32:	6831      	ldr	r1, [r6, #0]
 8006c34:	4605      	mov	r5, r0
 8006c36:	b911      	cbnz	r1, 8006c3e <sbrk_aligned+0x12>
 8006c38:	f001 fbd4 	bl	80083e4 <_sbrk_r>
 8006c3c:	6030      	str	r0, [r6, #0]
 8006c3e:	4621      	mov	r1, r4
 8006c40:	4628      	mov	r0, r5
 8006c42:	f001 fbcf 	bl	80083e4 <_sbrk_r>
 8006c46:	1c43      	adds	r3, r0, #1
 8006c48:	d103      	bne.n	8006c52 <sbrk_aligned+0x26>
 8006c4a:	f04f 34ff 	mov.w	r4, #4294967295
 8006c4e:	4620      	mov	r0, r4
 8006c50:	bd70      	pop	{r4, r5, r6, pc}
 8006c52:	1cc4      	adds	r4, r0, #3
 8006c54:	f024 0403 	bic.w	r4, r4, #3
 8006c58:	42a0      	cmp	r0, r4
 8006c5a:	d0f8      	beq.n	8006c4e <sbrk_aligned+0x22>
 8006c5c:	1a21      	subs	r1, r4, r0
 8006c5e:	4628      	mov	r0, r5
 8006c60:	f001 fbc0 	bl	80083e4 <_sbrk_r>
 8006c64:	3001      	adds	r0, #1
 8006c66:	d1f2      	bne.n	8006c4e <sbrk_aligned+0x22>
 8006c68:	e7ef      	b.n	8006c4a <sbrk_aligned+0x1e>
 8006c6a:	bf00      	nop
 8006c6c:	20000424 	.word	0x20000424

08006c70 <_malloc_r>:
 8006c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c74:	1ccd      	adds	r5, r1, #3
 8006c76:	f025 0503 	bic.w	r5, r5, #3
 8006c7a:	3508      	adds	r5, #8
 8006c7c:	2d0c      	cmp	r5, #12
 8006c7e:	bf38      	it	cc
 8006c80:	250c      	movcc	r5, #12
 8006c82:	2d00      	cmp	r5, #0
 8006c84:	4606      	mov	r6, r0
 8006c86:	db01      	blt.n	8006c8c <_malloc_r+0x1c>
 8006c88:	42a9      	cmp	r1, r5
 8006c8a:	d904      	bls.n	8006c96 <_malloc_r+0x26>
 8006c8c:	230c      	movs	r3, #12
 8006c8e:	6033      	str	r3, [r6, #0]
 8006c90:	2000      	movs	r0, #0
 8006c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d6c <_malloc_r+0xfc>
 8006c9a:	f000 f869 	bl	8006d70 <__malloc_lock>
 8006c9e:	f8d8 3000 	ldr.w	r3, [r8]
 8006ca2:	461c      	mov	r4, r3
 8006ca4:	bb44      	cbnz	r4, 8006cf8 <_malloc_r+0x88>
 8006ca6:	4629      	mov	r1, r5
 8006ca8:	4630      	mov	r0, r6
 8006caa:	f7ff ffbf 	bl	8006c2c <sbrk_aligned>
 8006cae:	1c43      	adds	r3, r0, #1
 8006cb0:	4604      	mov	r4, r0
 8006cb2:	d158      	bne.n	8006d66 <_malloc_r+0xf6>
 8006cb4:	f8d8 4000 	ldr.w	r4, [r8]
 8006cb8:	4627      	mov	r7, r4
 8006cba:	2f00      	cmp	r7, #0
 8006cbc:	d143      	bne.n	8006d46 <_malloc_r+0xd6>
 8006cbe:	2c00      	cmp	r4, #0
 8006cc0:	d04b      	beq.n	8006d5a <_malloc_r+0xea>
 8006cc2:	6823      	ldr	r3, [r4, #0]
 8006cc4:	4639      	mov	r1, r7
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	eb04 0903 	add.w	r9, r4, r3
 8006ccc:	f001 fb8a 	bl	80083e4 <_sbrk_r>
 8006cd0:	4581      	cmp	r9, r0
 8006cd2:	d142      	bne.n	8006d5a <_malloc_r+0xea>
 8006cd4:	6821      	ldr	r1, [r4, #0]
 8006cd6:	1a6d      	subs	r5, r5, r1
 8006cd8:	4629      	mov	r1, r5
 8006cda:	4630      	mov	r0, r6
 8006cdc:	f7ff ffa6 	bl	8006c2c <sbrk_aligned>
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	d03a      	beq.n	8006d5a <_malloc_r+0xea>
 8006ce4:	6823      	ldr	r3, [r4, #0]
 8006ce6:	442b      	add	r3, r5
 8006ce8:	6023      	str	r3, [r4, #0]
 8006cea:	f8d8 3000 	ldr.w	r3, [r8]
 8006cee:	685a      	ldr	r2, [r3, #4]
 8006cf0:	bb62      	cbnz	r2, 8006d4c <_malloc_r+0xdc>
 8006cf2:	f8c8 7000 	str.w	r7, [r8]
 8006cf6:	e00f      	b.n	8006d18 <_malloc_r+0xa8>
 8006cf8:	6822      	ldr	r2, [r4, #0]
 8006cfa:	1b52      	subs	r2, r2, r5
 8006cfc:	d420      	bmi.n	8006d40 <_malloc_r+0xd0>
 8006cfe:	2a0b      	cmp	r2, #11
 8006d00:	d917      	bls.n	8006d32 <_malloc_r+0xc2>
 8006d02:	1961      	adds	r1, r4, r5
 8006d04:	42a3      	cmp	r3, r4
 8006d06:	6025      	str	r5, [r4, #0]
 8006d08:	bf18      	it	ne
 8006d0a:	6059      	strne	r1, [r3, #4]
 8006d0c:	6863      	ldr	r3, [r4, #4]
 8006d0e:	bf08      	it	eq
 8006d10:	f8c8 1000 	streq.w	r1, [r8]
 8006d14:	5162      	str	r2, [r4, r5]
 8006d16:	604b      	str	r3, [r1, #4]
 8006d18:	4630      	mov	r0, r6
 8006d1a:	f000 f82f 	bl	8006d7c <__malloc_unlock>
 8006d1e:	f104 000b 	add.w	r0, r4, #11
 8006d22:	1d23      	adds	r3, r4, #4
 8006d24:	f020 0007 	bic.w	r0, r0, #7
 8006d28:	1ac2      	subs	r2, r0, r3
 8006d2a:	bf1c      	itt	ne
 8006d2c:	1a1b      	subne	r3, r3, r0
 8006d2e:	50a3      	strne	r3, [r4, r2]
 8006d30:	e7af      	b.n	8006c92 <_malloc_r+0x22>
 8006d32:	6862      	ldr	r2, [r4, #4]
 8006d34:	42a3      	cmp	r3, r4
 8006d36:	bf0c      	ite	eq
 8006d38:	f8c8 2000 	streq.w	r2, [r8]
 8006d3c:	605a      	strne	r2, [r3, #4]
 8006d3e:	e7eb      	b.n	8006d18 <_malloc_r+0xa8>
 8006d40:	4623      	mov	r3, r4
 8006d42:	6864      	ldr	r4, [r4, #4]
 8006d44:	e7ae      	b.n	8006ca4 <_malloc_r+0x34>
 8006d46:	463c      	mov	r4, r7
 8006d48:	687f      	ldr	r7, [r7, #4]
 8006d4a:	e7b6      	b.n	8006cba <_malloc_r+0x4a>
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	42a3      	cmp	r3, r4
 8006d52:	d1fb      	bne.n	8006d4c <_malloc_r+0xdc>
 8006d54:	2300      	movs	r3, #0
 8006d56:	6053      	str	r3, [r2, #4]
 8006d58:	e7de      	b.n	8006d18 <_malloc_r+0xa8>
 8006d5a:	230c      	movs	r3, #12
 8006d5c:	6033      	str	r3, [r6, #0]
 8006d5e:	4630      	mov	r0, r6
 8006d60:	f000 f80c 	bl	8006d7c <__malloc_unlock>
 8006d64:	e794      	b.n	8006c90 <_malloc_r+0x20>
 8006d66:	6005      	str	r5, [r0, #0]
 8006d68:	e7d6      	b.n	8006d18 <_malloc_r+0xa8>
 8006d6a:	bf00      	nop
 8006d6c:	20000428 	.word	0x20000428

08006d70 <__malloc_lock>:
 8006d70:	4801      	ldr	r0, [pc, #4]	@ (8006d78 <__malloc_lock+0x8>)
 8006d72:	f7ff b8ba 	b.w	8005eea <__retarget_lock_acquire_recursive>
 8006d76:	bf00      	nop
 8006d78:	20000420 	.word	0x20000420

08006d7c <__malloc_unlock>:
 8006d7c:	4801      	ldr	r0, [pc, #4]	@ (8006d84 <__malloc_unlock+0x8>)
 8006d7e:	f7ff b8b5 	b.w	8005eec <__retarget_lock_release_recursive>
 8006d82:	bf00      	nop
 8006d84:	20000420 	.word	0x20000420

08006d88 <_Balloc>:
 8006d88:	b570      	push	{r4, r5, r6, lr}
 8006d8a:	69c6      	ldr	r6, [r0, #28]
 8006d8c:	4604      	mov	r4, r0
 8006d8e:	460d      	mov	r5, r1
 8006d90:	b976      	cbnz	r6, 8006db0 <_Balloc+0x28>
 8006d92:	2010      	movs	r0, #16
 8006d94:	f7ff ff42 	bl	8006c1c <malloc>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	61e0      	str	r0, [r4, #28]
 8006d9c:	b920      	cbnz	r0, 8006da8 <_Balloc+0x20>
 8006d9e:	4b18      	ldr	r3, [pc, #96]	@ (8006e00 <_Balloc+0x78>)
 8006da0:	4818      	ldr	r0, [pc, #96]	@ (8006e04 <_Balloc+0x7c>)
 8006da2:	216b      	movs	r1, #107	@ 0x6b
 8006da4:	f001 fb3c 	bl	8008420 <__assert_func>
 8006da8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006dac:	6006      	str	r6, [r0, #0]
 8006dae:	60c6      	str	r6, [r0, #12]
 8006db0:	69e6      	ldr	r6, [r4, #28]
 8006db2:	68f3      	ldr	r3, [r6, #12]
 8006db4:	b183      	cbz	r3, 8006dd8 <_Balloc+0x50>
 8006db6:	69e3      	ldr	r3, [r4, #28]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006dbe:	b9b8      	cbnz	r0, 8006df0 <_Balloc+0x68>
 8006dc0:	2101      	movs	r1, #1
 8006dc2:	fa01 f605 	lsl.w	r6, r1, r5
 8006dc6:	1d72      	adds	r2, r6, #5
 8006dc8:	0092      	lsls	r2, r2, #2
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f001 fb46 	bl	800845c <_calloc_r>
 8006dd0:	b160      	cbz	r0, 8006dec <_Balloc+0x64>
 8006dd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006dd6:	e00e      	b.n	8006df6 <_Balloc+0x6e>
 8006dd8:	2221      	movs	r2, #33	@ 0x21
 8006dda:	2104      	movs	r1, #4
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f001 fb3d 	bl	800845c <_calloc_r>
 8006de2:	69e3      	ldr	r3, [r4, #28]
 8006de4:	60f0      	str	r0, [r6, #12]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1e4      	bne.n	8006db6 <_Balloc+0x2e>
 8006dec:	2000      	movs	r0, #0
 8006dee:	bd70      	pop	{r4, r5, r6, pc}
 8006df0:	6802      	ldr	r2, [r0, #0]
 8006df2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006df6:	2300      	movs	r3, #0
 8006df8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006dfc:	e7f7      	b.n	8006dee <_Balloc+0x66>
 8006dfe:	bf00      	nop
 8006e00:	08009c97 	.word	0x08009c97
 8006e04:	08009d17 	.word	0x08009d17

08006e08 <_Bfree>:
 8006e08:	b570      	push	{r4, r5, r6, lr}
 8006e0a:	69c6      	ldr	r6, [r0, #28]
 8006e0c:	4605      	mov	r5, r0
 8006e0e:	460c      	mov	r4, r1
 8006e10:	b976      	cbnz	r6, 8006e30 <_Bfree+0x28>
 8006e12:	2010      	movs	r0, #16
 8006e14:	f7ff ff02 	bl	8006c1c <malloc>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	61e8      	str	r0, [r5, #28]
 8006e1c:	b920      	cbnz	r0, 8006e28 <_Bfree+0x20>
 8006e1e:	4b09      	ldr	r3, [pc, #36]	@ (8006e44 <_Bfree+0x3c>)
 8006e20:	4809      	ldr	r0, [pc, #36]	@ (8006e48 <_Bfree+0x40>)
 8006e22:	218f      	movs	r1, #143	@ 0x8f
 8006e24:	f001 fafc 	bl	8008420 <__assert_func>
 8006e28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e2c:	6006      	str	r6, [r0, #0]
 8006e2e:	60c6      	str	r6, [r0, #12]
 8006e30:	b13c      	cbz	r4, 8006e42 <_Bfree+0x3a>
 8006e32:	69eb      	ldr	r3, [r5, #28]
 8006e34:	6862      	ldr	r2, [r4, #4]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e3c:	6021      	str	r1, [r4, #0]
 8006e3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e42:	bd70      	pop	{r4, r5, r6, pc}
 8006e44:	08009c97 	.word	0x08009c97
 8006e48:	08009d17 	.word	0x08009d17

08006e4c <__multadd>:
 8006e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e50:	690d      	ldr	r5, [r1, #16]
 8006e52:	4607      	mov	r7, r0
 8006e54:	460c      	mov	r4, r1
 8006e56:	461e      	mov	r6, r3
 8006e58:	f101 0c14 	add.w	ip, r1, #20
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	f8dc 3000 	ldr.w	r3, [ip]
 8006e62:	b299      	uxth	r1, r3
 8006e64:	fb02 6101 	mla	r1, r2, r1, r6
 8006e68:	0c1e      	lsrs	r6, r3, #16
 8006e6a:	0c0b      	lsrs	r3, r1, #16
 8006e6c:	fb02 3306 	mla	r3, r2, r6, r3
 8006e70:	b289      	uxth	r1, r1
 8006e72:	3001      	adds	r0, #1
 8006e74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e78:	4285      	cmp	r5, r0
 8006e7a:	f84c 1b04 	str.w	r1, [ip], #4
 8006e7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e82:	dcec      	bgt.n	8006e5e <__multadd+0x12>
 8006e84:	b30e      	cbz	r6, 8006eca <__multadd+0x7e>
 8006e86:	68a3      	ldr	r3, [r4, #8]
 8006e88:	42ab      	cmp	r3, r5
 8006e8a:	dc19      	bgt.n	8006ec0 <__multadd+0x74>
 8006e8c:	6861      	ldr	r1, [r4, #4]
 8006e8e:	4638      	mov	r0, r7
 8006e90:	3101      	adds	r1, #1
 8006e92:	f7ff ff79 	bl	8006d88 <_Balloc>
 8006e96:	4680      	mov	r8, r0
 8006e98:	b928      	cbnz	r0, 8006ea6 <__multadd+0x5a>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8006ed0 <__multadd+0x84>)
 8006e9e:	480d      	ldr	r0, [pc, #52]	@ (8006ed4 <__multadd+0x88>)
 8006ea0:	21ba      	movs	r1, #186	@ 0xba
 8006ea2:	f001 fabd 	bl	8008420 <__assert_func>
 8006ea6:	6922      	ldr	r2, [r4, #16]
 8006ea8:	3202      	adds	r2, #2
 8006eaa:	f104 010c 	add.w	r1, r4, #12
 8006eae:	0092      	lsls	r2, r2, #2
 8006eb0:	300c      	adds	r0, #12
 8006eb2:	f001 faa7 	bl	8008404 <memcpy>
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	4638      	mov	r0, r7
 8006eba:	f7ff ffa5 	bl	8006e08 <_Bfree>
 8006ebe:	4644      	mov	r4, r8
 8006ec0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ec4:	3501      	adds	r5, #1
 8006ec6:	615e      	str	r6, [r3, #20]
 8006ec8:	6125      	str	r5, [r4, #16]
 8006eca:	4620      	mov	r0, r4
 8006ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ed0:	08009d06 	.word	0x08009d06
 8006ed4:	08009d17 	.word	0x08009d17

08006ed8 <__hi0bits>:
 8006ed8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006edc:	4603      	mov	r3, r0
 8006ede:	bf36      	itet	cc
 8006ee0:	0403      	lslcc	r3, r0, #16
 8006ee2:	2000      	movcs	r0, #0
 8006ee4:	2010      	movcc	r0, #16
 8006ee6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006eea:	bf3c      	itt	cc
 8006eec:	021b      	lslcc	r3, r3, #8
 8006eee:	3008      	addcc	r0, #8
 8006ef0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ef4:	bf3c      	itt	cc
 8006ef6:	011b      	lslcc	r3, r3, #4
 8006ef8:	3004      	addcc	r0, #4
 8006efa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006efe:	bf3c      	itt	cc
 8006f00:	009b      	lslcc	r3, r3, #2
 8006f02:	3002      	addcc	r0, #2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	db05      	blt.n	8006f14 <__hi0bits+0x3c>
 8006f08:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006f0c:	f100 0001 	add.w	r0, r0, #1
 8006f10:	bf08      	it	eq
 8006f12:	2020      	moveq	r0, #32
 8006f14:	4770      	bx	lr

08006f16 <__lo0bits>:
 8006f16:	6803      	ldr	r3, [r0, #0]
 8006f18:	4602      	mov	r2, r0
 8006f1a:	f013 0007 	ands.w	r0, r3, #7
 8006f1e:	d00b      	beq.n	8006f38 <__lo0bits+0x22>
 8006f20:	07d9      	lsls	r1, r3, #31
 8006f22:	d421      	bmi.n	8006f68 <__lo0bits+0x52>
 8006f24:	0798      	lsls	r0, r3, #30
 8006f26:	bf49      	itett	mi
 8006f28:	085b      	lsrmi	r3, r3, #1
 8006f2a:	089b      	lsrpl	r3, r3, #2
 8006f2c:	2001      	movmi	r0, #1
 8006f2e:	6013      	strmi	r3, [r2, #0]
 8006f30:	bf5c      	itt	pl
 8006f32:	6013      	strpl	r3, [r2, #0]
 8006f34:	2002      	movpl	r0, #2
 8006f36:	4770      	bx	lr
 8006f38:	b299      	uxth	r1, r3
 8006f3a:	b909      	cbnz	r1, 8006f40 <__lo0bits+0x2a>
 8006f3c:	0c1b      	lsrs	r3, r3, #16
 8006f3e:	2010      	movs	r0, #16
 8006f40:	b2d9      	uxtb	r1, r3
 8006f42:	b909      	cbnz	r1, 8006f48 <__lo0bits+0x32>
 8006f44:	3008      	adds	r0, #8
 8006f46:	0a1b      	lsrs	r3, r3, #8
 8006f48:	0719      	lsls	r1, r3, #28
 8006f4a:	bf04      	itt	eq
 8006f4c:	091b      	lsreq	r3, r3, #4
 8006f4e:	3004      	addeq	r0, #4
 8006f50:	0799      	lsls	r1, r3, #30
 8006f52:	bf04      	itt	eq
 8006f54:	089b      	lsreq	r3, r3, #2
 8006f56:	3002      	addeq	r0, #2
 8006f58:	07d9      	lsls	r1, r3, #31
 8006f5a:	d403      	bmi.n	8006f64 <__lo0bits+0x4e>
 8006f5c:	085b      	lsrs	r3, r3, #1
 8006f5e:	f100 0001 	add.w	r0, r0, #1
 8006f62:	d003      	beq.n	8006f6c <__lo0bits+0x56>
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	4770      	bx	lr
 8006f68:	2000      	movs	r0, #0
 8006f6a:	4770      	bx	lr
 8006f6c:	2020      	movs	r0, #32
 8006f6e:	4770      	bx	lr

08006f70 <__i2b>:
 8006f70:	b510      	push	{r4, lr}
 8006f72:	460c      	mov	r4, r1
 8006f74:	2101      	movs	r1, #1
 8006f76:	f7ff ff07 	bl	8006d88 <_Balloc>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	b928      	cbnz	r0, 8006f8a <__i2b+0x1a>
 8006f7e:	4b05      	ldr	r3, [pc, #20]	@ (8006f94 <__i2b+0x24>)
 8006f80:	4805      	ldr	r0, [pc, #20]	@ (8006f98 <__i2b+0x28>)
 8006f82:	f240 1145 	movw	r1, #325	@ 0x145
 8006f86:	f001 fa4b 	bl	8008420 <__assert_func>
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	6144      	str	r4, [r0, #20]
 8006f8e:	6103      	str	r3, [r0, #16]
 8006f90:	bd10      	pop	{r4, pc}
 8006f92:	bf00      	nop
 8006f94:	08009d06 	.word	0x08009d06
 8006f98:	08009d17 	.word	0x08009d17

08006f9c <__multiply>:
 8006f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa0:	4614      	mov	r4, r2
 8006fa2:	690a      	ldr	r2, [r1, #16]
 8006fa4:	6923      	ldr	r3, [r4, #16]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	bfa8      	it	ge
 8006faa:	4623      	movge	r3, r4
 8006fac:	460f      	mov	r7, r1
 8006fae:	bfa4      	itt	ge
 8006fb0:	460c      	movge	r4, r1
 8006fb2:	461f      	movge	r7, r3
 8006fb4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006fb8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006fbc:	68a3      	ldr	r3, [r4, #8]
 8006fbe:	6861      	ldr	r1, [r4, #4]
 8006fc0:	eb0a 0609 	add.w	r6, sl, r9
 8006fc4:	42b3      	cmp	r3, r6
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	bfb8      	it	lt
 8006fca:	3101      	addlt	r1, #1
 8006fcc:	f7ff fedc 	bl	8006d88 <_Balloc>
 8006fd0:	b930      	cbnz	r0, 8006fe0 <__multiply+0x44>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	4b44      	ldr	r3, [pc, #272]	@ (80070e8 <__multiply+0x14c>)
 8006fd6:	4845      	ldr	r0, [pc, #276]	@ (80070ec <__multiply+0x150>)
 8006fd8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006fdc:	f001 fa20 	bl	8008420 <__assert_func>
 8006fe0:	f100 0514 	add.w	r5, r0, #20
 8006fe4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006fe8:	462b      	mov	r3, r5
 8006fea:	2200      	movs	r2, #0
 8006fec:	4543      	cmp	r3, r8
 8006fee:	d321      	bcc.n	8007034 <__multiply+0x98>
 8006ff0:	f107 0114 	add.w	r1, r7, #20
 8006ff4:	f104 0214 	add.w	r2, r4, #20
 8006ff8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006ffc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007000:	9302      	str	r3, [sp, #8]
 8007002:	1b13      	subs	r3, r2, r4
 8007004:	3b15      	subs	r3, #21
 8007006:	f023 0303 	bic.w	r3, r3, #3
 800700a:	3304      	adds	r3, #4
 800700c:	f104 0715 	add.w	r7, r4, #21
 8007010:	42ba      	cmp	r2, r7
 8007012:	bf38      	it	cc
 8007014:	2304      	movcc	r3, #4
 8007016:	9301      	str	r3, [sp, #4]
 8007018:	9b02      	ldr	r3, [sp, #8]
 800701a:	9103      	str	r1, [sp, #12]
 800701c:	428b      	cmp	r3, r1
 800701e:	d80c      	bhi.n	800703a <__multiply+0x9e>
 8007020:	2e00      	cmp	r6, #0
 8007022:	dd03      	ble.n	800702c <__multiply+0x90>
 8007024:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007028:	2b00      	cmp	r3, #0
 800702a:	d05b      	beq.n	80070e4 <__multiply+0x148>
 800702c:	6106      	str	r6, [r0, #16]
 800702e:	b005      	add	sp, #20
 8007030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007034:	f843 2b04 	str.w	r2, [r3], #4
 8007038:	e7d8      	b.n	8006fec <__multiply+0x50>
 800703a:	f8b1 a000 	ldrh.w	sl, [r1]
 800703e:	f1ba 0f00 	cmp.w	sl, #0
 8007042:	d024      	beq.n	800708e <__multiply+0xf2>
 8007044:	f104 0e14 	add.w	lr, r4, #20
 8007048:	46a9      	mov	r9, r5
 800704a:	f04f 0c00 	mov.w	ip, #0
 800704e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007052:	f8d9 3000 	ldr.w	r3, [r9]
 8007056:	fa1f fb87 	uxth.w	fp, r7
 800705a:	b29b      	uxth	r3, r3
 800705c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007060:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007064:	f8d9 7000 	ldr.w	r7, [r9]
 8007068:	4463      	add	r3, ip
 800706a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800706e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007072:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007076:	b29b      	uxth	r3, r3
 8007078:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800707c:	4572      	cmp	r2, lr
 800707e:	f849 3b04 	str.w	r3, [r9], #4
 8007082:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007086:	d8e2      	bhi.n	800704e <__multiply+0xb2>
 8007088:	9b01      	ldr	r3, [sp, #4]
 800708a:	f845 c003 	str.w	ip, [r5, r3]
 800708e:	9b03      	ldr	r3, [sp, #12]
 8007090:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007094:	3104      	adds	r1, #4
 8007096:	f1b9 0f00 	cmp.w	r9, #0
 800709a:	d021      	beq.n	80070e0 <__multiply+0x144>
 800709c:	682b      	ldr	r3, [r5, #0]
 800709e:	f104 0c14 	add.w	ip, r4, #20
 80070a2:	46ae      	mov	lr, r5
 80070a4:	f04f 0a00 	mov.w	sl, #0
 80070a8:	f8bc b000 	ldrh.w	fp, [ip]
 80070ac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80070b0:	fb09 770b 	mla	r7, r9, fp, r7
 80070b4:	4457      	add	r7, sl
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80070bc:	f84e 3b04 	str.w	r3, [lr], #4
 80070c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80070c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070c8:	f8be 3000 	ldrh.w	r3, [lr]
 80070cc:	fb09 330a 	mla	r3, r9, sl, r3
 80070d0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80070d4:	4562      	cmp	r2, ip
 80070d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070da:	d8e5      	bhi.n	80070a8 <__multiply+0x10c>
 80070dc:	9f01      	ldr	r7, [sp, #4]
 80070de:	51eb      	str	r3, [r5, r7]
 80070e0:	3504      	adds	r5, #4
 80070e2:	e799      	b.n	8007018 <__multiply+0x7c>
 80070e4:	3e01      	subs	r6, #1
 80070e6:	e79b      	b.n	8007020 <__multiply+0x84>
 80070e8:	08009d06 	.word	0x08009d06
 80070ec:	08009d17 	.word	0x08009d17

080070f0 <__pow5mult>:
 80070f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070f4:	4615      	mov	r5, r2
 80070f6:	f012 0203 	ands.w	r2, r2, #3
 80070fa:	4607      	mov	r7, r0
 80070fc:	460e      	mov	r6, r1
 80070fe:	d007      	beq.n	8007110 <__pow5mult+0x20>
 8007100:	4c25      	ldr	r4, [pc, #148]	@ (8007198 <__pow5mult+0xa8>)
 8007102:	3a01      	subs	r2, #1
 8007104:	2300      	movs	r3, #0
 8007106:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800710a:	f7ff fe9f 	bl	8006e4c <__multadd>
 800710e:	4606      	mov	r6, r0
 8007110:	10ad      	asrs	r5, r5, #2
 8007112:	d03d      	beq.n	8007190 <__pow5mult+0xa0>
 8007114:	69fc      	ldr	r4, [r7, #28]
 8007116:	b97c      	cbnz	r4, 8007138 <__pow5mult+0x48>
 8007118:	2010      	movs	r0, #16
 800711a:	f7ff fd7f 	bl	8006c1c <malloc>
 800711e:	4602      	mov	r2, r0
 8007120:	61f8      	str	r0, [r7, #28]
 8007122:	b928      	cbnz	r0, 8007130 <__pow5mult+0x40>
 8007124:	4b1d      	ldr	r3, [pc, #116]	@ (800719c <__pow5mult+0xac>)
 8007126:	481e      	ldr	r0, [pc, #120]	@ (80071a0 <__pow5mult+0xb0>)
 8007128:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800712c:	f001 f978 	bl	8008420 <__assert_func>
 8007130:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007134:	6004      	str	r4, [r0, #0]
 8007136:	60c4      	str	r4, [r0, #12]
 8007138:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800713c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007140:	b94c      	cbnz	r4, 8007156 <__pow5mult+0x66>
 8007142:	f240 2171 	movw	r1, #625	@ 0x271
 8007146:	4638      	mov	r0, r7
 8007148:	f7ff ff12 	bl	8006f70 <__i2b>
 800714c:	2300      	movs	r3, #0
 800714e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007152:	4604      	mov	r4, r0
 8007154:	6003      	str	r3, [r0, #0]
 8007156:	f04f 0900 	mov.w	r9, #0
 800715a:	07eb      	lsls	r3, r5, #31
 800715c:	d50a      	bpl.n	8007174 <__pow5mult+0x84>
 800715e:	4631      	mov	r1, r6
 8007160:	4622      	mov	r2, r4
 8007162:	4638      	mov	r0, r7
 8007164:	f7ff ff1a 	bl	8006f9c <__multiply>
 8007168:	4631      	mov	r1, r6
 800716a:	4680      	mov	r8, r0
 800716c:	4638      	mov	r0, r7
 800716e:	f7ff fe4b 	bl	8006e08 <_Bfree>
 8007172:	4646      	mov	r6, r8
 8007174:	106d      	asrs	r5, r5, #1
 8007176:	d00b      	beq.n	8007190 <__pow5mult+0xa0>
 8007178:	6820      	ldr	r0, [r4, #0]
 800717a:	b938      	cbnz	r0, 800718c <__pow5mult+0x9c>
 800717c:	4622      	mov	r2, r4
 800717e:	4621      	mov	r1, r4
 8007180:	4638      	mov	r0, r7
 8007182:	f7ff ff0b 	bl	8006f9c <__multiply>
 8007186:	6020      	str	r0, [r4, #0]
 8007188:	f8c0 9000 	str.w	r9, [r0]
 800718c:	4604      	mov	r4, r0
 800718e:	e7e4      	b.n	800715a <__pow5mult+0x6a>
 8007190:	4630      	mov	r0, r6
 8007192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007196:	bf00      	nop
 8007198:	08009d70 	.word	0x08009d70
 800719c:	08009c97 	.word	0x08009c97
 80071a0:	08009d17 	.word	0x08009d17

080071a4 <__lshift>:
 80071a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071a8:	460c      	mov	r4, r1
 80071aa:	6849      	ldr	r1, [r1, #4]
 80071ac:	6923      	ldr	r3, [r4, #16]
 80071ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80071b2:	68a3      	ldr	r3, [r4, #8]
 80071b4:	4607      	mov	r7, r0
 80071b6:	4691      	mov	r9, r2
 80071b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071bc:	f108 0601 	add.w	r6, r8, #1
 80071c0:	42b3      	cmp	r3, r6
 80071c2:	db0b      	blt.n	80071dc <__lshift+0x38>
 80071c4:	4638      	mov	r0, r7
 80071c6:	f7ff fddf 	bl	8006d88 <_Balloc>
 80071ca:	4605      	mov	r5, r0
 80071cc:	b948      	cbnz	r0, 80071e2 <__lshift+0x3e>
 80071ce:	4602      	mov	r2, r0
 80071d0:	4b28      	ldr	r3, [pc, #160]	@ (8007274 <__lshift+0xd0>)
 80071d2:	4829      	ldr	r0, [pc, #164]	@ (8007278 <__lshift+0xd4>)
 80071d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80071d8:	f001 f922 	bl	8008420 <__assert_func>
 80071dc:	3101      	adds	r1, #1
 80071de:	005b      	lsls	r3, r3, #1
 80071e0:	e7ee      	b.n	80071c0 <__lshift+0x1c>
 80071e2:	2300      	movs	r3, #0
 80071e4:	f100 0114 	add.w	r1, r0, #20
 80071e8:	f100 0210 	add.w	r2, r0, #16
 80071ec:	4618      	mov	r0, r3
 80071ee:	4553      	cmp	r3, sl
 80071f0:	db33      	blt.n	800725a <__lshift+0xb6>
 80071f2:	6920      	ldr	r0, [r4, #16]
 80071f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80071f8:	f104 0314 	add.w	r3, r4, #20
 80071fc:	f019 091f 	ands.w	r9, r9, #31
 8007200:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007204:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007208:	d02b      	beq.n	8007262 <__lshift+0xbe>
 800720a:	f1c9 0e20 	rsb	lr, r9, #32
 800720e:	468a      	mov	sl, r1
 8007210:	2200      	movs	r2, #0
 8007212:	6818      	ldr	r0, [r3, #0]
 8007214:	fa00 f009 	lsl.w	r0, r0, r9
 8007218:	4310      	orrs	r0, r2
 800721a:	f84a 0b04 	str.w	r0, [sl], #4
 800721e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007222:	459c      	cmp	ip, r3
 8007224:	fa22 f20e 	lsr.w	r2, r2, lr
 8007228:	d8f3      	bhi.n	8007212 <__lshift+0x6e>
 800722a:	ebac 0304 	sub.w	r3, ip, r4
 800722e:	3b15      	subs	r3, #21
 8007230:	f023 0303 	bic.w	r3, r3, #3
 8007234:	3304      	adds	r3, #4
 8007236:	f104 0015 	add.w	r0, r4, #21
 800723a:	4584      	cmp	ip, r0
 800723c:	bf38      	it	cc
 800723e:	2304      	movcc	r3, #4
 8007240:	50ca      	str	r2, [r1, r3]
 8007242:	b10a      	cbz	r2, 8007248 <__lshift+0xa4>
 8007244:	f108 0602 	add.w	r6, r8, #2
 8007248:	3e01      	subs	r6, #1
 800724a:	4638      	mov	r0, r7
 800724c:	612e      	str	r6, [r5, #16]
 800724e:	4621      	mov	r1, r4
 8007250:	f7ff fdda 	bl	8006e08 <_Bfree>
 8007254:	4628      	mov	r0, r5
 8007256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800725a:	f842 0f04 	str.w	r0, [r2, #4]!
 800725e:	3301      	adds	r3, #1
 8007260:	e7c5      	b.n	80071ee <__lshift+0x4a>
 8007262:	3904      	subs	r1, #4
 8007264:	f853 2b04 	ldr.w	r2, [r3], #4
 8007268:	f841 2f04 	str.w	r2, [r1, #4]!
 800726c:	459c      	cmp	ip, r3
 800726e:	d8f9      	bhi.n	8007264 <__lshift+0xc0>
 8007270:	e7ea      	b.n	8007248 <__lshift+0xa4>
 8007272:	bf00      	nop
 8007274:	08009d06 	.word	0x08009d06
 8007278:	08009d17 	.word	0x08009d17

0800727c <__mcmp>:
 800727c:	690a      	ldr	r2, [r1, #16]
 800727e:	4603      	mov	r3, r0
 8007280:	6900      	ldr	r0, [r0, #16]
 8007282:	1a80      	subs	r0, r0, r2
 8007284:	b530      	push	{r4, r5, lr}
 8007286:	d10e      	bne.n	80072a6 <__mcmp+0x2a>
 8007288:	3314      	adds	r3, #20
 800728a:	3114      	adds	r1, #20
 800728c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007290:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007294:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007298:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800729c:	4295      	cmp	r5, r2
 800729e:	d003      	beq.n	80072a8 <__mcmp+0x2c>
 80072a0:	d205      	bcs.n	80072ae <__mcmp+0x32>
 80072a2:	f04f 30ff 	mov.w	r0, #4294967295
 80072a6:	bd30      	pop	{r4, r5, pc}
 80072a8:	42a3      	cmp	r3, r4
 80072aa:	d3f3      	bcc.n	8007294 <__mcmp+0x18>
 80072ac:	e7fb      	b.n	80072a6 <__mcmp+0x2a>
 80072ae:	2001      	movs	r0, #1
 80072b0:	e7f9      	b.n	80072a6 <__mcmp+0x2a>
	...

080072b4 <__mdiff>:
 80072b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b8:	4689      	mov	r9, r1
 80072ba:	4606      	mov	r6, r0
 80072bc:	4611      	mov	r1, r2
 80072be:	4648      	mov	r0, r9
 80072c0:	4614      	mov	r4, r2
 80072c2:	f7ff ffdb 	bl	800727c <__mcmp>
 80072c6:	1e05      	subs	r5, r0, #0
 80072c8:	d112      	bne.n	80072f0 <__mdiff+0x3c>
 80072ca:	4629      	mov	r1, r5
 80072cc:	4630      	mov	r0, r6
 80072ce:	f7ff fd5b 	bl	8006d88 <_Balloc>
 80072d2:	4602      	mov	r2, r0
 80072d4:	b928      	cbnz	r0, 80072e2 <__mdiff+0x2e>
 80072d6:	4b3f      	ldr	r3, [pc, #252]	@ (80073d4 <__mdiff+0x120>)
 80072d8:	f240 2137 	movw	r1, #567	@ 0x237
 80072dc:	483e      	ldr	r0, [pc, #248]	@ (80073d8 <__mdiff+0x124>)
 80072de:	f001 f89f 	bl	8008420 <__assert_func>
 80072e2:	2301      	movs	r3, #1
 80072e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80072e8:	4610      	mov	r0, r2
 80072ea:	b003      	add	sp, #12
 80072ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f0:	bfbc      	itt	lt
 80072f2:	464b      	movlt	r3, r9
 80072f4:	46a1      	movlt	r9, r4
 80072f6:	4630      	mov	r0, r6
 80072f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80072fc:	bfba      	itte	lt
 80072fe:	461c      	movlt	r4, r3
 8007300:	2501      	movlt	r5, #1
 8007302:	2500      	movge	r5, #0
 8007304:	f7ff fd40 	bl	8006d88 <_Balloc>
 8007308:	4602      	mov	r2, r0
 800730a:	b918      	cbnz	r0, 8007314 <__mdiff+0x60>
 800730c:	4b31      	ldr	r3, [pc, #196]	@ (80073d4 <__mdiff+0x120>)
 800730e:	f240 2145 	movw	r1, #581	@ 0x245
 8007312:	e7e3      	b.n	80072dc <__mdiff+0x28>
 8007314:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007318:	6926      	ldr	r6, [r4, #16]
 800731a:	60c5      	str	r5, [r0, #12]
 800731c:	f109 0310 	add.w	r3, r9, #16
 8007320:	f109 0514 	add.w	r5, r9, #20
 8007324:	f104 0e14 	add.w	lr, r4, #20
 8007328:	f100 0b14 	add.w	fp, r0, #20
 800732c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007330:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007334:	9301      	str	r3, [sp, #4]
 8007336:	46d9      	mov	r9, fp
 8007338:	f04f 0c00 	mov.w	ip, #0
 800733c:	9b01      	ldr	r3, [sp, #4]
 800733e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007342:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007346:	9301      	str	r3, [sp, #4]
 8007348:	fa1f f38a 	uxth.w	r3, sl
 800734c:	4619      	mov	r1, r3
 800734e:	b283      	uxth	r3, r0
 8007350:	1acb      	subs	r3, r1, r3
 8007352:	0c00      	lsrs	r0, r0, #16
 8007354:	4463      	add	r3, ip
 8007356:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800735a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800735e:	b29b      	uxth	r3, r3
 8007360:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007364:	4576      	cmp	r6, lr
 8007366:	f849 3b04 	str.w	r3, [r9], #4
 800736a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800736e:	d8e5      	bhi.n	800733c <__mdiff+0x88>
 8007370:	1b33      	subs	r3, r6, r4
 8007372:	3b15      	subs	r3, #21
 8007374:	f023 0303 	bic.w	r3, r3, #3
 8007378:	3415      	adds	r4, #21
 800737a:	3304      	adds	r3, #4
 800737c:	42a6      	cmp	r6, r4
 800737e:	bf38      	it	cc
 8007380:	2304      	movcc	r3, #4
 8007382:	441d      	add	r5, r3
 8007384:	445b      	add	r3, fp
 8007386:	461e      	mov	r6, r3
 8007388:	462c      	mov	r4, r5
 800738a:	4544      	cmp	r4, r8
 800738c:	d30e      	bcc.n	80073ac <__mdiff+0xf8>
 800738e:	f108 0103 	add.w	r1, r8, #3
 8007392:	1b49      	subs	r1, r1, r5
 8007394:	f021 0103 	bic.w	r1, r1, #3
 8007398:	3d03      	subs	r5, #3
 800739a:	45a8      	cmp	r8, r5
 800739c:	bf38      	it	cc
 800739e:	2100      	movcc	r1, #0
 80073a0:	440b      	add	r3, r1
 80073a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80073a6:	b191      	cbz	r1, 80073ce <__mdiff+0x11a>
 80073a8:	6117      	str	r7, [r2, #16]
 80073aa:	e79d      	b.n	80072e8 <__mdiff+0x34>
 80073ac:	f854 1b04 	ldr.w	r1, [r4], #4
 80073b0:	46e6      	mov	lr, ip
 80073b2:	0c08      	lsrs	r0, r1, #16
 80073b4:	fa1c fc81 	uxtah	ip, ip, r1
 80073b8:	4471      	add	r1, lr
 80073ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80073be:	b289      	uxth	r1, r1
 80073c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80073c4:	f846 1b04 	str.w	r1, [r6], #4
 80073c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80073cc:	e7dd      	b.n	800738a <__mdiff+0xd6>
 80073ce:	3f01      	subs	r7, #1
 80073d0:	e7e7      	b.n	80073a2 <__mdiff+0xee>
 80073d2:	bf00      	nop
 80073d4:	08009d06 	.word	0x08009d06
 80073d8:	08009d17 	.word	0x08009d17

080073dc <__d2b>:
 80073dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073e0:	460f      	mov	r7, r1
 80073e2:	2101      	movs	r1, #1
 80073e4:	ec59 8b10 	vmov	r8, r9, d0
 80073e8:	4616      	mov	r6, r2
 80073ea:	f7ff fccd 	bl	8006d88 <_Balloc>
 80073ee:	4604      	mov	r4, r0
 80073f0:	b930      	cbnz	r0, 8007400 <__d2b+0x24>
 80073f2:	4602      	mov	r2, r0
 80073f4:	4b23      	ldr	r3, [pc, #140]	@ (8007484 <__d2b+0xa8>)
 80073f6:	4824      	ldr	r0, [pc, #144]	@ (8007488 <__d2b+0xac>)
 80073f8:	f240 310f 	movw	r1, #783	@ 0x30f
 80073fc:	f001 f810 	bl	8008420 <__assert_func>
 8007400:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007404:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007408:	b10d      	cbz	r5, 800740e <__d2b+0x32>
 800740a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800740e:	9301      	str	r3, [sp, #4]
 8007410:	f1b8 0300 	subs.w	r3, r8, #0
 8007414:	d023      	beq.n	800745e <__d2b+0x82>
 8007416:	4668      	mov	r0, sp
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	f7ff fd7c 	bl	8006f16 <__lo0bits>
 800741e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007422:	b1d0      	cbz	r0, 800745a <__d2b+0x7e>
 8007424:	f1c0 0320 	rsb	r3, r0, #32
 8007428:	fa02 f303 	lsl.w	r3, r2, r3
 800742c:	430b      	orrs	r3, r1
 800742e:	40c2      	lsrs	r2, r0
 8007430:	6163      	str	r3, [r4, #20]
 8007432:	9201      	str	r2, [sp, #4]
 8007434:	9b01      	ldr	r3, [sp, #4]
 8007436:	61a3      	str	r3, [r4, #24]
 8007438:	2b00      	cmp	r3, #0
 800743a:	bf0c      	ite	eq
 800743c:	2201      	moveq	r2, #1
 800743e:	2202      	movne	r2, #2
 8007440:	6122      	str	r2, [r4, #16]
 8007442:	b1a5      	cbz	r5, 800746e <__d2b+0x92>
 8007444:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007448:	4405      	add	r5, r0
 800744a:	603d      	str	r5, [r7, #0]
 800744c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007450:	6030      	str	r0, [r6, #0]
 8007452:	4620      	mov	r0, r4
 8007454:	b003      	add	sp, #12
 8007456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800745a:	6161      	str	r1, [r4, #20]
 800745c:	e7ea      	b.n	8007434 <__d2b+0x58>
 800745e:	a801      	add	r0, sp, #4
 8007460:	f7ff fd59 	bl	8006f16 <__lo0bits>
 8007464:	9b01      	ldr	r3, [sp, #4]
 8007466:	6163      	str	r3, [r4, #20]
 8007468:	3020      	adds	r0, #32
 800746a:	2201      	movs	r2, #1
 800746c:	e7e8      	b.n	8007440 <__d2b+0x64>
 800746e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007472:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007476:	6038      	str	r0, [r7, #0]
 8007478:	6918      	ldr	r0, [r3, #16]
 800747a:	f7ff fd2d 	bl	8006ed8 <__hi0bits>
 800747e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007482:	e7e5      	b.n	8007450 <__d2b+0x74>
 8007484:	08009d06 	.word	0x08009d06
 8007488:	08009d17 	.word	0x08009d17

0800748c <__sfputc_r>:
 800748c:	6893      	ldr	r3, [r2, #8]
 800748e:	3b01      	subs	r3, #1
 8007490:	2b00      	cmp	r3, #0
 8007492:	b410      	push	{r4}
 8007494:	6093      	str	r3, [r2, #8]
 8007496:	da08      	bge.n	80074aa <__sfputc_r+0x1e>
 8007498:	6994      	ldr	r4, [r2, #24]
 800749a:	42a3      	cmp	r3, r4
 800749c:	db01      	blt.n	80074a2 <__sfputc_r+0x16>
 800749e:	290a      	cmp	r1, #10
 80074a0:	d103      	bne.n	80074aa <__sfputc_r+0x1e>
 80074a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074a6:	f000 bee7 	b.w	8008278 <__swbuf_r>
 80074aa:	6813      	ldr	r3, [r2, #0]
 80074ac:	1c58      	adds	r0, r3, #1
 80074ae:	6010      	str	r0, [r2, #0]
 80074b0:	7019      	strb	r1, [r3, #0]
 80074b2:	4608      	mov	r0, r1
 80074b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <__sfputs_r>:
 80074ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074bc:	4606      	mov	r6, r0
 80074be:	460f      	mov	r7, r1
 80074c0:	4614      	mov	r4, r2
 80074c2:	18d5      	adds	r5, r2, r3
 80074c4:	42ac      	cmp	r4, r5
 80074c6:	d101      	bne.n	80074cc <__sfputs_r+0x12>
 80074c8:	2000      	movs	r0, #0
 80074ca:	e007      	b.n	80074dc <__sfputs_r+0x22>
 80074cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074d0:	463a      	mov	r2, r7
 80074d2:	4630      	mov	r0, r6
 80074d4:	f7ff ffda 	bl	800748c <__sfputc_r>
 80074d8:	1c43      	adds	r3, r0, #1
 80074da:	d1f3      	bne.n	80074c4 <__sfputs_r+0xa>
 80074dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074e0 <_vfiprintf_r>:
 80074e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e4:	460d      	mov	r5, r1
 80074e6:	b09d      	sub	sp, #116	@ 0x74
 80074e8:	4614      	mov	r4, r2
 80074ea:	4698      	mov	r8, r3
 80074ec:	4606      	mov	r6, r0
 80074ee:	b118      	cbz	r0, 80074f8 <_vfiprintf_r+0x18>
 80074f0:	6a03      	ldr	r3, [r0, #32]
 80074f2:	b90b      	cbnz	r3, 80074f8 <_vfiprintf_r+0x18>
 80074f4:	f7fe fb22 	bl	8005b3c <__sinit>
 80074f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074fa:	07d9      	lsls	r1, r3, #31
 80074fc:	d405      	bmi.n	800750a <_vfiprintf_r+0x2a>
 80074fe:	89ab      	ldrh	r3, [r5, #12]
 8007500:	059a      	lsls	r2, r3, #22
 8007502:	d402      	bmi.n	800750a <_vfiprintf_r+0x2a>
 8007504:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007506:	f7fe fcf0 	bl	8005eea <__retarget_lock_acquire_recursive>
 800750a:	89ab      	ldrh	r3, [r5, #12]
 800750c:	071b      	lsls	r3, r3, #28
 800750e:	d501      	bpl.n	8007514 <_vfiprintf_r+0x34>
 8007510:	692b      	ldr	r3, [r5, #16]
 8007512:	b99b      	cbnz	r3, 800753c <_vfiprintf_r+0x5c>
 8007514:	4629      	mov	r1, r5
 8007516:	4630      	mov	r0, r6
 8007518:	f000 feec 	bl	80082f4 <__swsetup_r>
 800751c:	b170      	cbz	r0, 800753c <_vfiprintf_r+0x5c>
 800751e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007520:	07dc      	lsls	r4, r3, #31
 8007522:	d504      	bpl.n	800752e <_vfiprintf_r+0x4e>
 8007524:	f04f 30ff 	mov.w	r0, #4294967295
 8007528:	b01d      	add	sp, #116	@ 0x74
 800752a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800752e:	89ab      	ldrh	r3, [r5, #12]
 8007530:	0598      	lsls	r0, r3, #22
 8007532:	d4f7      	bmi.n	8007524 <_vfiprintf_r+0x44>
 8007534:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007536:	f7fe fcd9 	bl	8005eec <__retarget_lock_release_recursive>
 800753a:	e7f3      	b.n	8007524 <_vfiprintf_r+0x44>
 800753c:	2300      	movs	r3, #0
 800753e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007540:	2320      	movs	r3, #32
 8007542:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007546:	f8cd 800c 	str.w	r8, [sp, #12]
 800754a:	2330      	movs	r3, #48	@ 0x30
 800754c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80076fc <_vfiprintf_r+0x21c>
 8007550:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007554:	f04f 0901 	mov.w	r9, #1
 8007558:	4623      	mov	r3, r4
 800755a:	469a      	mov	sl, r3
 800755c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007560:	b10a      	cbz	r2, 8007566 <_vfiprintf_r+0x86>
 8007562:	2a25      	cmp	r2, #37	@ 0x25
 8007564:	d1f9      	bne.n	800755a <_vfiprintf_r+0x7a>
 8007566:	ebba 0b04 	subs.w	fp, sl, r4
 800756a:	d00b      	beq.n	8007584 <_vfiprintf_r+0xa4>
 800756c:	465b      	mov	r3, fp
 800756e:	4622      	mov	r2, r4
 8007570:	4629      	mov	r1, r5
 8007572:	4630      	mov	r0, r6
 8007574:	f7ff ffa1 	bl	80074ba <__sfputs_r>
 8007578:	3001      	adds	r0, #1
 800757a:	f000 80a7 	beq.w	80076cc <_vfiprintf_r+0x1ec>
 800757e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007580:	445a      	add	r2, fp
 8007582:	9209      	str	r2, [sp, #36]	@ 0x24
 8007584:	f89a 3000 	ldrb.w	r3, [sl]
 8007588:	2b00      	cmp	r3, #0
 800758a:	f000 809f 	beq.w	80076cc <_vfiprintf_r+0x1ec>
 800758e:	2300      	movs	r3, #0
 8007590:	f04f 32ff 	mov.w	r2, #4294967295
 8007594:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007598:	f10a 0a01 	add.w	sl, sl, #1
 800759c:	9304      	str	r3, [sp, #16]
 800759e:	9307      	str	r3, [sp, #28]
 80075a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80075a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80075a6:	4654      	mov	r4, sl
 80075a8:	2205      	movs	r2, #5
 80075aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075ae:	4853      	ldr	r0, [pc, #332]	@ (80076fc <_vfiprintf_r+0x21c>)
 80075b0:	f7f8 fe2e 	bl	8000210 <memchr>
 80075b4:	9a04      	ldr	r2, [sp, #16]
 80075b6:	b9d8      	cbnz	r0, 80075f0 <_vfiprintf_r+0x110>
 80075b8:	06d1      	lsls	r1, r2, #27
 80075ba:	bf44      	itt	mi
 80075bc:	2320      	movmi	r3, #32
 80075be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075c2:	0713      	lsls	r3, r2, #28
 80075c4:	bf44      	itt	mi
 80075c6:	232b      	movmi	r3, #43	@ 0x2b
 80075c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075cc:	f89a 3000 	ldrb.w	r3, [sl]
 80075d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80075d2:	d015      	beq.n	8007600 <_vfiprintf_r+0x120>
 80075d4:	9a07      	ldr	r2, [sp, #28]
 80075d6:	4654      	mov	r4, sl
 80075d8:	2000      	movs	r0, #0
 80075da:	f04f 0c0a 	mov.w	ip, #10
 80075de:	4621      	mov	r1, r4
 80075e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075e4:	3b30      	subs	r3, #48	@ 0x30
 80075e6:	2b09      	cmp	r3, #9
 80075e8:	d94b      	bls.n	8007682 <_vfiprintf_r+0x1a2>
 80075ea:	b1b0      	cbz	r0, 800761a <_vfiprintf_r+0x13a>
 80075ec:	9207      	str	r2, [sp, #28]
 80075ee:	e014      	b.n	800761a <_vfiprintf_r+0x13a>
 80075f0:	eba0 0308 	sub.w	r3, r0, r8
 80075f4:	fa09 f303 	lsl.w	r3, r9, r3
 80075f8:	4313      	orrs	r3, r2
 80075fa:	9304      	str	r3, [sp, #16]
 80075fc:	46a2      	mov	sl, r4
 80075fe:	e7d2      	b.n	80075a6 <_vfiprintf_r+0xc6>
 8007600:	9b03      	ldr	r3, [sp, #12]
 8007602:	1d19      	adds	r1, r3, #4
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	9103      	str	r1, [sp, #12]
 8007608:	2b00      	cmp	r3, #0
 800760a:	bfbb      	ittet	lt
 800760c:	425b      	neglt	r3, r3
 800760e:	f042 0202 	orrlt.w	r2, r2, #2
 8007612:	9307      	strge	r3, [sp, #28]
 8007614:	9307      	strlt	r3, [sp, #28]
 8007616:	bfb8      	it	lt
 8007618:	9204      	strlt	r2, [sp, #16]
 800761a:	7823      	ldrb	r3, [r4, #0]
 800761c:	2b2e      	cmp	r3, #46	@ 0x2e
 800761e:	d10a      	bne.n	8007636 <_vfiprintf_r+0x156>
 8007620:	7863      	ldrb	r3, [r4, #1]
 8007622:	2b2a      	cmp	r3, #42	@ 0x2a
 8007624:	d132      	bne.n	800768c <_vfiprintf_r+0x1ac>
 8007626:	9b03      	ldr	r3, [sp, #12]
 8007628:	1d1a      	adds	r2, r3, #4
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	9203      	str	r2, [sp, #12]
 800762e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007632:	3402      	adds	r4, #2
 8007634:	9305      	str	r3, [sp, #20]
 8007636:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800770c <_vfiprintf_r+0x22c>
 800763a:	7821      	ldrb	r1, [r4, #0]
 800763c:	2203      	movs	r2, #3
 800763e:	4650      	mov	r0, sl
 8007640:	f7f8 fde6 	bl	8000210 <memchr>
 8007644:	b138      	cbz	r0, 8007656 <_vfiprintf_r+0x176>
 8007646:	9b04      	ldr	r3, [sp, #16]
 8007648:	eba0 000a 	sub.w	r0, r0, sl
 800764c:	2240      	movs	r2, #64	@ 0x40
 800764e:	4082      	lsls	r2, r0
 8007650:	4313      	orrs	r3, r2
 8007652:	3401      	adds	r4, #1
 8007654:	9304      	str	r3, [sp, #16]
 8007656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800765a:	4829      	ldr	r0, [pc, #164]	@ (8007700 <_vfiprintf_r+0x220>)
 800765c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007660:	2206      	movs	r2, #6
 8007662:	f7f8 fdd5 	bl	8000210 <memchr>
 8007666:	2800      	cmp	r0, #0
 8007668:	d03f      	beq.n	80076ea <_vfiprintf_r+0x20a>
 800766a:	4b26      	ldr	r3, [pc, #152]	@ (8007704 <_vfiprintf_r+0x224>)
 800766c:	bb1b      	cbnz	r3, 80076b6 <_vfiprintf_r+0x1d6>
 800766e:	9b03      	ldr	r3, [sp, #12]
 8007670:	3307      	adds	r3, #7
 8007672:	f023 0307 	bic.w	r3, r3, #7
 8007676:	3308      	adds	r3, #8
 8007678:	9303      	str	r3, [sp, #12]
 800767a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800767c:	443b      	add	r3, r7
 800767e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007680:	e76a      	b.n	8007558 <_vfiprintf_r+0x78>
 8007682:	fb0c 3202 	mla	r2, ip, r2, r3
 8007686:	460c      	mov	r4, r1
 8007688:	2001      	movs	r0, #1
 800768a:	e7a8      	b.n	80075de <_vfiprintf_r+0xfe>
 800768c:	2300      	movs	r3, #0
 800768e:	3401      	adds	r4, #1
 8007690:	9305      	str	r3, [sp, #20]
 8007692:	4619      	mov	r1, r3
 8007694:	f04f 0c0a 	mov.w	ip, #10
 8007698:	4620      	mov	r0, r4
 800769a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800769e:	3a30      	subs	r2, #48	@ 0x30
 80076a0:	2a09      	cmp	r2, #9
 80076a2:	d903      	bls.n	80076ac <_vfiprintf_r+0x1cc>
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d0c6      	beq.n	8007636 <_vfiprintf_r+0x156>
 80076a8:	9105      	str	r1, [sp, #20]
 80076aa:	e7c4      	b.n	8007636 <_vfiprintf_r+0x156>
 80076ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80076b0:	4604      	mov	r4, r0
 80076b2:	2301      	movs	r3, #1
 80076b4:	e7f0      	b.n	8007698 <_vfiprintf_r+0x1b8>
 80076b6:	ab03      	add	r3, sp, #12
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	462a      	mov	r2, r5
 80076bc:	4b12      	ldr	r3, [pc, #72]	@ (8007708 <_vfiprintf_r+0x228>)
 80076be:	a904      	add	r1, sp, #16
 80076c0:	4630      	mov	r0, r6
 80076c2:	f7fd fdf7 	bl	80052b4 <_printf_float>
 80076c6:	4607      	mov	r7, r0
 80076c8:	1c78      	adds	r0, r7, #1
 80076ca:	d1d6      	bne.n	800767a <_vfiprintf_r+0x19a>
 80076cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076ce:	07d9      	lsls	r1, r3, #31
 80076d0:	d405      	bmi.n	80076de <_vfiprintf_r+0x1fe>
 80076d2:	89ab      	ldrh	r3, [r5, #12]
 80076d4:	059a      	lsls	r2, r3, #22
 80076d6:	d402      	bmi.n	80076de <_vfiprintf_r+0x1fe>
 80076d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076da:	f7fe fc07 	bl	8005eec <__retarget_lock_release_recursive>
 80076de:	89ab      	ldrh	r3, [r5, #12]
 80076e0:	065b      	lsls	r3, r3, #25
 80076e2:	f53f af1f 	bmi.w	8007524 <_vfiprintf_r+0x44>
 80076e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076e8:	e71e      	b.n	8007528 <_vfiprintf_r+0x48>
 80076ea:	ab03      	add	r3, sp, #12
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	462a      	mov	r2, r5
 80076f0:	4b05      	ldr	r3, [pc, #20]	@ (8007708 <_vfiprintf_r+0x228>)
 80076f2:	a904      	add	r1, sp, #16
 80076f4:	4630      	mov	r0, r6
 80076f6:	f7fe f875 	bl	80057e4 <_printf_i>
 80076fa:	e7e4      	b.n	80076c6 <_vfiprintf_r+0x1e6>
 80076fc:	08009e70 	.word	0x08009e70
 8007700:	08009e7a 	.word	0x08009e7a
 8007704:	080052b5 	.word	0x080052b5
 8007708:	080074bb 	.word	0x080074bb
 800770c:	08009e76 	.word	0x08009e76

08007710 <__svfiscanf_r>:
 8007710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007714:	461d      	mov	r5, r3
 8007716:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8007718:	07df      	lsls	r7, r3, #31
 800771a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800771e:	4606      	mov	r6, r0
 8007720:	460c      	mov	r4, r1
 8007722:	4691      	mov	r9, r2
 8007724:	d405      	bmi.n	8007732 <__svfiscanf_r+0x22>
 8007726:	898b      	ldrh	r3, [r1, #12]
 8007728:	0598      	lsls	r0, r3, #22
 800772a:	d402      	bmi.n	8007732 <__svfiscanf_r+0x22>
 800772c:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 800772e:	f7fe fbdc 	bl	8005eea <__retarget_lock_acquire_recursive>
 8007732:	2300      	movs	r3, #0
 8007734:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 8007738:	4ba7      	ldr	r3, [pc, #668]	@ (80079d8 <__svfiscanf_r+0x2c8>)
 800773a:	93a0      	str	r3, [sp, #640]	@ 0x280
 800773c:	f10d 0804 	add.w	r8, sp, #4
 8007740:	4ba6      	ldr	r3, [pc, #664]	@ (80079dc <__svfiscanf_r+0x2cc>)
 8007742:	4fa7      	ldr	r7, [pc, #668]	@ (80079e0 <__svfiscanf_r+0x2d0>)
 8007744:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8007748:	93a1      	str	r3, [sp, #644]	@ 0x284
 800774a:	9500      	str	r5, [sp, #0]
 800774c:	f899 3000 	ldrb.w	r3, [r9]
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 816c 	beq.w	8007a2e <__svfiscanf_r+0x31e>
 8007756:	5cf9      	ldrb	r1, [r7, r3]
 8007758:	f011 0108 	ands.w	r1, r1, #8
 800775c:	f109 0501 	add.w	r5, r9, #1
 8007760:	d019      	beq.n	8007796 <__svfiscanf_r+0x86>
 8007762:	6863      	ldr	r3, [r4, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	dd0f      	ble.n	8007788 <__svfiscanf_r+0x78>
 8007768:	6823      	ldr	r3, [r4, #0]
 800776a:	781a      	ldrb	r2, [r3, #0]
 800776c:	5cba      	ldrb	r2, [r7, r2]
 800776e:	0711      	lsls	r1, r2, #28
 8007770:	d401      	bmi.n	8007776 <__svfiscanf_r+0x66>
 8007772:	46a9      	mov	r9, r5
 8007774:	e7ea      	b.n	800774c <__svfiscanf_r+0x3c>
 8007776:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007778:	3201      	adds	r2, #1
 800777a:	9245      	str	r2, [sp, #276]	@ 0x114
 800777c:	6862      	ldr	r2, [r4, #4]
 800777e:	3301      	adds	r3, #1
 8007780:	3a01      	subs	r2, #1
 8007782:	6062      	str	r2, [r4, #4]
 8007784:	6023      	str	r3, [r4, #0]
 8007786:	e7ec      	b.n	8007762 <__svfiscanf_r+0x52>
 8007788:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800778a:	4621      	mov	r1, r4
 800778c:	4630      	mov	r0, r6
 800778e:	4798      	blx	r3
 8007790:	2800      	cmp	r0, #0
 8007792:	d0e9      	beq.n	8007768 <__svfiscanf_r+0x58>
 8007794:	e7ed      	b.n	8007772 <__svfiscanf_r+0x62>
 8007796:	2b25      	cmp	r3, #37	@ 0x25
 8007798:	d012      	beq.n	80077c0 <__svfiscanf_r+0xb0>
 800779a:	4699      	mov	r9, r3
 800779c:	6863      	ldr	r3, [r4, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f340 8095 	ble.w	80078ce <__svfiscanf_r+0x1be>
 80077a4:	6822      	ldr	r2, [r4, #0]
 80077a6:	7813      	ldrb	r3, [r2, #0]
 80077a8:	454b      	cmp	r3, r9
 80077aa:	f040 8140 	bne.w	8007a2e <__svfiscanf_r+0x31e>
 80077ae:	6863      	ldr	r3, [r4, #4]
 80077b0:	3b01      	subs	r3, #1
 80077b2:	6063      	str	r3, [r4, #4]
 80077b4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80077b6:	3201      	adds	r2, #1
 80077b8:	3301      	adds	r3, #1
 80077ba:	6022      	str	r2, [r4, #0]
 80077bc:	9345      	str	r3, [sp, #276]	@ 0x114
 80077be:	e7d8      	b.n	8007772 <__svfiscanf_r+0x62>
 80077c0:	9141      	str	r1, [sp, #260]	@ 0x104
 80077c2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80077c4:	f899 3001 	ldrb.w	r3, [r9, #1]
 80077c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80077ca:	bf02      	ittt	eq
 80077cc:	2310      	moveq	r3, #16
 80077ce:	9341      	streq	r3, [sp, #260]	@ 0x104
 80077d0:	f109 0502 	addeq.w	r5, r9, #2
 80077d4:	220a      	movs	r2, #10
 80077d6:	46a9      	mov	r9, r5
 80077d8:	f819 1b01 	ldrb.w	r1, [r9], #1
 80077dc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80077e0:	2b09      	cmp	r3, #9
 80077e2:	d91f      	bls.n	8007824 <__svfiscanf_r+0x114>
 80077e4:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 80079e4 <__svfiscanf_r+0x2d4>
 80077e8:	2203      	movs	r2, #3
 80077ea:	4650      	mov	r0, sl
 80077ec:	f7f8 fd10 	bl	8000210 <memchr>
 80077f0:	b138      	cbz	r0, 8007802 <__svfiscanf_r+0xf2>
 80077f2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80077f4:	eba0 000a 	sub.w	r0, r0, sl
 80077f8:	2301      	movs	r3, #1
 80077fa:	4083      	lsls	r3, r0
 80077fc:	4313      	orrs	r3, r2
 80077fe:	9341      	str	r3, [sp, #260]	@ 0x104
 8007800:	464d      	mov	r5, r9
 8007802:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007806:	2b78      	cmp	r3, #120	@ 0x78
 8007808:	d807      	bhi.n	800781a <__svfiscanf_r+0x10a>
 800780a:	2b57      	cmp	r3, #87	@ 0x57
 800780c:	d811      	bhi.n	8007832 <__svfiscanf_r+0x122>
 800780e:	2b25      	cmp	r3, #37	@ 0x25
 8007810:	d0c3      	beq.n	800779a <__svfiscanf_r+0x8a>
 8007812:	d857      	bhi.n	80078c4 <__svfiscanf_r+0x1b4>
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 80c1 	beq.w	800799c <__svfiscanf_r+0x28c>
 800781a:	2303      	movs	r3, #3
 800781c:	9347      	str	r3, [sp, #284]	@ 0x11c
 800781e:	230a      	movs	r3, #10
 8007820:	9342      	str	r3, [sp, #264]	@ 0x108
 8007822:	e07e      	b.n	8007922 <__svfiscanf_r+0x212>
 8007824:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8007826:	fb02 1103 	mla	r1, r2, r3, r1
 800782a:	3930      	subs	r1, #48	@ 0x30
 800782c:	9143      	str	r1, [sp, #268]	@ 0x10c
 800782e:	464d      	mov	r5, r9
 8007830:	e7d1      	b.n	80077d6 <__svfiscanf_r+0xc6>
 8007832:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8007836:	2a20      	cmp	r2, #32
 8007838:	d8ef      	bhi.n	800781a <__svfiscanf_r+0x10a>
 800783a:	a101      	add	r1, pc, #4	@ (adr r1, 8007840 <__svfiscanf_r+0x130>)
 800783c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007840:	08007901 	.word	0x08007901
 8007844:	0800781b 	.word	0x0800781b
 8007848:	0800781b 	.word	0x0800781b
 800784c:	0800795b 	.word	0x0800795b
 8007850:	0800781b 	.word	0x0800781b
 8007854:	0800781b 	.word	0x0800781b
 8007858:	0800781b 	.word	0x0800781b
 800785c:	0800781b 	.word	0x0800781b
 8007860:	0800781b 	.word	0x0800781b
 8007864:	0800781b 	.word	0x0800781b
 8007868:	0800781b 	.word	0x0800781b
 800786c:	08007971 	.word	0x08007971
 8007870:	08007957 	.word	0x08007957
 8007874:	080078cb 	.word	0x080078cb
 8007878:	080078cb 	.word	0x080078cb
 800787c:	080078cb 	.word	0x080078cb
 8007880:	0800781b 	.word	0x0800781b
 8007884:	08007913 	.word	0x08007913
 8007888:	0800781b 	.word	0x0800781b
 800788c:	0800781b 	.word	0x0800781b
 8007890:	0800781b 	.word	0x0800781b
 8007894:	0800781b 	.word	0x0800781b
 8007898:	08007981 	.word	0x08007981
 800789c:	0800791b 	.word	0x0800791b
 80078a0:	080078f9 	.word	0x080078f9
 80078a4:	0800781b 	.word	0x0800781b
 80078a8:	0800781b 	.word	0x0800781b
 80078ac:	0800797d 	.word	0x0800797d
 80078b0:	0800781b 	.word	0x0800781b
 80078b4:	08007957 	.word	0x08007957
 80078b8:	0800781b 	.word	0x0800781b
 80078bc:	0800781b 	.word	0x0800781b
 80078c0:	08007901 	.word	0x08007901
 80078c4:	3b45      	subs	r3, #69	@ 0x45
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d8a7      	bhi.n	800781a <__svfiscanf_r+0x10a>
 80078ca:	2305      	movs	r3, #5
 80078cc:	e028      	b.n	8007920 <__svfiscanf_r+0x210>
 80078ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80078d0:	4621      	mov	r1, r4
 80078d2:	4630      	mov	r0, r6
 80078d4:	4798      	blx	r3
 80078d6:	2800      	cmp	r0, #0
 80078d8:	f43f af64 	beq.w	80077a4 <__svfiscanf_r+0x94>
 80078dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078de:	07da      	lsls	r2, r3, #31
 80078e0:	f140 809d 	bpl.w	8007a1e <__svfiscanf_r+0x30e>
 80078e4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80078e6:	2800      	cmp	r0, #0
 80078e8:	d061      	beq.n	80079ae <__svfiscanf_r+0x29e>
 80078ea:	89a3      	ldrh	r3, [r4, #12]
 80078ec:	0659      	lsls	r1, r3, #25
 80078ee:	d45e      	bmi.n	80079ae <__svfiscanf_r+0x29e>
 80078f0:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80078f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078f8:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80078fa:	f042 0220 	orr.w	r2, r2, #32
 80078fe:	9241      	str	r2, [sp, #260]	@ 0x104
 8007900:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007902:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007906:	9241      	str	r2, [sp, #260]	@ 0x104
 8007908:	2210      	movs	r2, #16
 800790a:	2b6e      	cmp	r3, #110	@ 0x6e
 800790c:	9242      	str	r2, [sp, #264]	@ 0x108
 800790e:	d902      	bls.n	8007916 <__svfiscanf_r+0x206>
 8007910:	e005      	b.n	800791e <__svfiscanf_r+0x20e>
 8007912:	2300      	movs	r3, #0
 8007914:	9342      	str	r3, [sp, #264]	@ 0x108
 8007916:	2303      	movs	r3, #3
 8007918:	e002      	b.n	8007920 <__svfiscanf_r+0x210>
 800791a:	2308      	movs	r3, #8
 800791c:	9342      	str	r3, [sp, #264]	@ 0x108
 800791e:	2304      	movs	r3, #4
 8007920:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007922:	6863      	ldr	r3, [r4, #4]
 8007924:	2b00      	cmp	r3, #0
 8007926:	dd45      	ble.n	80079b4 <__svfiscanf_r+0x2a4>
 8007928:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800792a:	0659      	lsls	r1, r3, #25
 800792c:	d404      	bmi.n	8007938 <__svfiscanf_r+0x228>
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	781a      	ldrb	r2, [r3, #0]
 8007932:	5cba      	ldrb	r2, [r7, r2]
 8007934:	0712      	lsls	r2, r2, #28
 8007936:	d444      	bmi.n	80079c2 <__svfiscanf_r+0x2b2>
 8007938:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800793a:	2b02      	cmp	r3, #2
 800793c:	dc5b      	bgt.n	80079f6 <__svfiscanf_r+0x2e6>
 800793e:	466b      	mov	r3, sp
 8007940:	4622      	mov	r2, r4
 8007942:	a941      	add	r1, sp, #260	@ 0x104
 8007944:	4630      	mov	r0, r6
 8007946:	f000 f893 	bl	8007a70 <_scanf_chars>
 800794a:	2801      	cmp	r0, #1
 800794c:	d06f      	beq.n	8007a2e <__svfiscanf_r+0x31e>
 800794e:	2802      	cmp	r0, #2
 8007950:	f47f af0f 	bne.w	8007772 <__svfiscanf_r+0x62>
 8007954:	e7c2      	b.n	80078dc <__svfiscanf_r+0x1cc>
 8007956:	220a      	movs	r2, #10
 8007958:	e7d7      	b.n	800790a <__svfiscanf_r+0x1fa>
 800795a:	4629      	mov	r1, r5
 800795c:	4640      	mov	r0, r8
 800795e:	f000 fb99 	bl	8008094 <__sccl>
 8007962:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007964:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007968:	9341      	str	r3, [sp, #260]	@ 0x104
 800796a:	4605      	mov	r5, r0
 800796c:	2301      	movs	r3, #1
 800796e:	e7d7      	b.n	8007920 <__svfiscanf_r+0x210>
 8007970:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007972:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007976:	9341      	str	r3, [sp, #260]	@ 0x104
 8007978:	2300      	movs	r3, #0
 800797a:	e7d1      	b.n	8007920 <__svfiscanf_r+0x210>
 800797c:	2302      	movs	r3, #2
 800797e:	e7cf      	b.n	8007920 <__svfiscanf_r+0x210>
 8007980:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8007982:	06c3      	lsls	r3, r0, #27
 8007984:	f53f aef5 	bmi.w	8007772 <__svfiscanf_r+0x62>
 8007988:	9b00      	ldr	r3, [sp, #0]
 800798a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800798c:	1d19      	adds	r1, r3, #4
 800798e:	9100      	str	r1, [sp, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	07c0      	lsls	r0, r0, #31
 8007994:	bf4c      	ite	mi
 8007996:	801a      	strhmi	r2, [r3, #0]
 8007998:	601a      	strpl	r2, [r3, #0]
 800799a:	e6ea      	b.n	8007772 <__svfiscanf_r+0x62>
 800799c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800799e:	07de      	lsls	r6, r3, #31
 80079a0:	d405      	bmi.n	80079ae <__svfiscanf_r+0x29e>
 80079a2:	89a3      	ldrh	r3, [r4, #12]
 80079a4:	059d      	lsls	r5, r3, #22
 80079a6:	d402      	bmi.n	80079ae <__svfiscanf_r+0x29e>
 80079a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079aa:	f7fe fa9f 	bl	8005eec <__retarget_lock_release_recursive>
 80079ae:	f04f 30ff 	mov.w	r0, #4294967295
 80079b2:	e79d      	b.n	80078f0 <__svfiscanf_r+0x1e0>
 80079b4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80079b6:	4621      	mov	r1, r4
 80079b8:	4630      	mov	r0, r6
 80079ba:	4798      	blx	r3
 80079bc:	2800      	cmp	r0, #0
 80079be:	d0b3      	beq.n	8007928 <__svfiscanf_r+0x218>
 80079c0:	e78c      	b.n	80078dc <__svfiscanf_r+0x1cc>
 80079c2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80079c4:	3201      	adds	r2, #1
 80079c6:	9245      	str	r2, [sp, #276]	@ 0x114
 80079c8:	6862      	ldr	r2, [r4, #4]
 80079ca:	3a01      	subs	r2, #1
 80079cc:	2a00      	cmp	r2, #0
 80079ce:	6062      	str	r2, [r4, #4]
 80079d0:	dd0a      	ble.n	80079e8 <__svfiscanf_r+0x2d8>
 80079d2:	3301      	adds	r3, #1
 80079d4:	6023      	str	r3, [r4, #0]
 80079d6:	e7aa      	b.n	800792e <__svfiscanf_r+0x21e>
 80079d8:	0800817b 	.word	0x0800817b
 80079dc:	08007fad 	.word	0x08007fad
 80079e0:	08009ee3 	.word	0x08009ee3
 80079e4:	08009e76 	.word	0x08009e76
 80079e8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80079ea:	4621      	mov	r1, r4
 80079ec:	4630      	mov	r0, r6
 80079ee:	4798      	blx	r3
 80079f0:	2800      	cmp	r0, #0
 80079f2:	d09c      	beq.n	800792e <__svfiscanf_r+0x21e>
 80079f4:	e772      	b.n	80078dc <__svfiscanf_r+0x1cc>
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	dc06      	bgt.n	8007a08 <__svfiscanf_r+0x2f8>
 80079fa:	466b      	mov	r3, sp
 80079fc:	4622      	mov	r2, r4
 80079fe:	a941      	add	r1, sp, #260	@ 0x104
 8007a00:	4630      	mov	r0, r6
 8007a02:	f000 f88f 	bl	8007b24 <_scanf_i>
 8007a06:	e7a0      	b.n	800794a <__svfiscanf_r+0x23a>
 8007a08:	4b0e      	ldr	r3, [pc, #56]	@ (8007a44 <__svfiscanf_r+0x334>)
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f43f aeb1 	beq.w	8007772 <__svfiscanf_r+0x62>
 8007a10:	466b      	mov	r3, sp
 8007a12:	4622      	mov	r2, r4
 8007a14:	a941      	add	r1, sp, #260	@ 0x104
 8007a16:	4630      	mov	r0, r6
 8007a18:	f3af 8000 	nop.w
 8007a1c:	e795      	b.n	800794a <__svfiscanf_r+0x23a>
 8007a1e:	89a3      	ldrh	r3, [r4, #12]
 8007a20:	0598      	lsls	r0, r3, #22
 8007a22:	f53f af5f 	bmi.w	80078e4 <__svfiscanf_r+0x1d4>
 8007a26:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a28:	f7fe fa60 	bl	8005eec <__retarget_lock_release_recursive>
 8007a2c:	e75a      	b.n	80078e4 <__svfiscanf_r+0x1d4>
 8007a2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a30:	07da      	lsls	r2, r3, #31
 8007a32:	d405      	bmi.n	8007a40 <__svfiscanf_r+0x330>
 8007a34:	89a3      	ldrh	r3, [r4, #12]
 8007a36:	059b      	lsls	r3, r3, #22
 8007a38:	d402      	bmi.n	8007a40 <__svfiscanf_r+0x330>
 8007a3a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a3c:	f7fe fa56 	bl	8005eec <__retarget_lock_release_recursive>
 8007a40:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8007a42:	e755      	b.n	80078f0 <__svfiscanf_r+0x1e0>
 8007a44:	00000000 	.word	0x00000000

08007a48 <_vfiscanf_r>:
 8007a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a4c:	460d      	mov	r5, r1
 8007a4e:	4616      	mov	r6, r2
 8007a50:	461f      	mov	r7, r3
 8007a52:	4604      	mov	r4, r0
 8007a54:	b118      	cbz	r0, 8007a5e <_vfiscanf_r+0x16>
 8007a56:	6a03      	ldr	r3, [r0, #32]
 8007a58:	b90b      	cbnz	r3, 8007a5e <_vfiscanf_r+0x16>
 8007a5a:	f7fe f86f 	bl	8005b3c <__sinit>
 8007a5e:	463b      	mov	r3, r7
 8007a60:	4632      	mov	r2, r6
 8007a62:	4629      	mov	r1, r5
 8007a64:	4620      	mov	r0, r4
 8007a66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a6a:	f7ff be51 	b.w	8007710 <__svfiscanf_r>
	...

08007a70 <_scanf_chars>:
 8007a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a74:	4615      	mov	r5, r2
 8007a76:	688a      	ldr	r2, [r1, #8]
 8007a78:	4680      	mov	r8, r0
 8007a7a:	460c      	mov	r4, r1
 8007a7c:	b932      	cbnz	r2, 8007a8c <_scanf_chars+0x1c>
 8007a7e:	698a      	ldr	r2, [r1, #24]
 8007a80:	2a00      	cmp	r2, #0
 8007a82:	bf14      	ite	ne
 8007a84:	f04f 32ff 	movne.w	r2, #4294967295
 8007a88:	2201      	moveq	r2, #1
 8007a8a:	608a      	str	r2, [r1, #8]
 8007a8c:	6822      	ldr	r2, [r4, #0]
 8007a8e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8007b20 <_scanf_chars+0xb0>
 8007a92:	06d1      	lsls	r1, r2, #27
 8007a94:	bf5f      	itttt	pl
 8007a96:	681a      	ldrpl	r2, [r3, #0]
 8007a98:	1d11      	addpl	r1, r2, #4
 8007a9a:	6019      	strpl	r1, [r3, #0]
 8007a9c:	6816      	ldrpl	r6, [r2, #0]
 8007a9e:	2700      	movs	r7, #0
 8007aa0:	69a0      	ldr	r0, [r4, #24]
 8007aa2:	b188      	cbz	r0, 8007ac8 <_scanf_chars+0x58>
 8007aa4:	2801      	cmp	r0, #1
 8007aa6:	d107      	bne.n	8007ab8 <_scanf_chars+0x48>
 8007aa8:	682b      	ldr	r3, [r5, #0]
 8007aaa:	781a      	ldrb	r2, [r3, #0]
 8007aac:	6963      	ldr	r3, [r4, #20]
 8007aae:	5c9b      	ldrb	r3, [r3, r2]
 8007ab0:	b953      	cbnz	r3, 8007ac8 <_scanf_chars+0x58>
 8007ab2:	2f00      	cmp	r7, #0
 8007ab4:	d031      	beq.n	8007b1a <_scanf_chars+0xaa>
 8007ab6:	e022      	b.n	8007afe <_scanf_chars+0x8e>
 8007ab8:	2802      	cmp	r0, #2
 8007aba:	d120      	bne.n	8007afe <_scanf_chars+0x8e>
 8007abc:	682b      	ldr	r3, [r5, #0]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	f819 3003 	ldrb.w	r3, [r9, r3]
 8007ac4:	071b      	lsls	r3, r3, #28
 8007ac6:	d41a      	bmi.n	8007afe <_scanf_chars+0x8e>
 8007ac8:	6823      	ldr	r3, [r4, #0]
 8007aca:	06da      	lsls	r2, r3, #27
 8007acc:	bf5e      	ittt	pl
 8007ace:	682b      	ldrpl	r3, [r5, #0]
 8007ad0:	781b      	ldrbpl	r3, [r3, #0]
 8007ad2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007ad6:	682a      	ldr	r2, [r5, #0]
 8007ad8:	686b      	ldr	r3, [r5, #4]
 8007ada:	3201      	adds	r2, #1
 8007adc:	602a      	str	r2, [r5, #0]
 8007ade:	68a2      	ldr	r2, [r4, #8]
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	3a01      	subs	r2, #1
 8007ae4:	606b      	str	r3, [r5, #4]
 8007ae6:	3701      	adds	r7, #1
 8007ae8:	60a2      	str	r2, [r4, #8]
 8007aea:	b142      	cbz	r2, 8007afe <_scanf_chars+0x8e>
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	dcd7      	bgt.n	8007aa0 <_scanf_chars+0x30>
 8007af0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007af4:	4629      	mov	r1, r5
 8007af6:	4640      	mov	r0, r8
 8007af8:	4798      	blx	r3
 8007afa:	2800      	cmp	r0, #0
 8007afc:	d0d0      	beq.n	8007aa0 <_scanf_chars+0x30>
 8007afe:	6823      	ldr	r3, [r4, #0]
 8007b00:	f013 0310 	ands.w	r3, r3, #16
 8007b04:	d105      	bne.n	8007b12 <_scanf_chars+0xa2>
 8007b06:	68e2      	ldr	r2, [r4, #12]
 8007b08:	3201      	adds	r2, #1
 8007b0a:	60e2      	str	r2, [r4, #12]
 8007b0c:	69a2      	ldr	r2, [r4, #24]
 8007b0e:	b102      	cbz	r2, 8007b12 <_scanf_chars+0xa2>
 8007b10:	7033      	strb	r3, [r6, #0]
 8007b12:	6923      	ldr	r3, [r4, #16]
 8007b14:	443b      	add	r3, r7
 8007b16:	6123      	str	r3, [r4, #16]
 8007b18:	2000      	movs	r0, #0
 8007b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b1e:	bf00      	nop
 8007b20:	08009ee3 	.word	0x08009ee3

08007b24 <_scanf_i>:
 8007b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b28:	4698      	mov	r8, r3
 8007b2a:	4b74      	ldr	r3, [pc, #464]	@ (8007cfc <_scanf_i+0x1d8>)
 8007b2c:	460c      	mov	r4, r1
 8007b2e:	4682      	mov	sl, r0
 8007b30:	4616      	mov	r6, r2
 8007b32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007b36:	b087      	sub	sp, #28
 8007b38:	ab03      	add	r3, sp, #12
 8007b3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007b3e:	4b70      	ldr	r3, [pc, #448]	@ (8007d00 <_scanf_i+0x1dc>)
 8007b40:	69a1      	ldr	r1, [r4, #24]
 8007b42:	4a70      	ldr	r2, [pc, #448]	@ (8007d04 <_scanf_i+0x1e0>)
 8007b44:	2903      	cmp	r1, #3
 8007b46:	bf08      	it	eq
 8007b48:	461a      	moveq	r2, r3
 8007b4a:	68a3      	ldr	r3, [r4, #8]
 8007b4c:	9201      	str	r2, [sp, #4]
 8007b4e:	1e5a      	subs	r2, r3, #1
 8007b50:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007b54:	bf88      	it	hi
 8007b56:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007b5a:	4627      	mov	r7, r4
 8007b5c:	bf82      	ittt	hi
 8007b5e:	eb03 0905 	addhi.w	r9, r3, r5
 8007b62:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007b66:	60a3      	strhi	r3, [r4, #8]
 8007b68:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007b6c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8007b70:	bf98      	it	ls
 8007b72:	f04f 0900 	movls.w	r9, #0
 8007b76:	6023      	str	r3, [r4, #0]
 8007b78:	463d      	mov	r5, r7
 8007b7a:	f04f 0b00 	mov.w	fp, #0
 8007b7e:	6831      	ldr	r1, [r6, #0]
 8007b80:	ab03      	add	r3, sp, #12
 8007b82:	7809      	ldrb	r1, [r1, #0]
 8007b84:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007b88:	2202      	movs	r2, #2
 8007b8a:	f7f8 fb41 	bl	8000210 <memchr>
 8007b8e:	b328      	cbz	r0, 8007bdc <_scanf_i+0xb8>
 8007b90:	f1bb 0f01 	cmp.w	fp, #1
 8007b94:	d159      	bne.n	8007c4a <_scanf_i+0x126>
 8007b96:	6862      	ldr	r2, [r4, #4]
 8007b98:	b92a      	cbnz	r2, 8007ba6 <_scanf_i+0x82>
 8007b9a:	6822      	ldr	r2, [r4, #0]
 8007b9c:	2108      	movs	r1, #8
 8007b9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ba2:	6061      	str	r1, [r4, #4]
 8007ba4:	6022      	str	r2, [r4, #0]
 8007ba6:	6822      	ldr	r2, [r4, #0]
 8007ba8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8007bac:	6022      	str	r2, [r4, #0]
 8007bae:	68a2      	ldr	r2, [r4, #8]
 8007bb0:	1e51      	subs	r1, r2, #1
 8007bb2:	60a1      	str	r1, [r4, #8]
 8007bb4:	b192      	cbz	r2, 8007bdc <_scanf_i+0xb8>
 8007bb6:	6832      	ldr	r2, [r6, #0]
 8007bb8:	1c51      	adds	r1, r2, #1
 8007bba:	6031      	str	r1, [r6, #0]
 8007bbc:	7812      	ldrb	r2, [r2, #0]
 8007bbe:	f805 2b01 	strb.w	r2, [r5], #1
 8007bc2:	6872      	ldr	r2, [r6, #4]
 8007bc4:	3a01      	subs	r2, #1
 8007bc6:	2a00      	cmp	r2, #0
 8007bc8:	6072      	str	r2, [r6, #4]
 8007bca:	dc07      	bgt.n	8007bdc <_scanf_i+0xb8>
 8007bcc:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8007bd0:	4631      	mov	r1, r6
 8007bd2:	4650      	mov	r0, sl
 8007bd4:	4790      	blx	r2
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	f040 8085 	bne.w	8007ce6 <_scanf_i+0x1c2>
 8007bdc:	f10b 0b01 	add.w	fp, fp, #1
 8007be0:	f1bb 0f03 	cmp.w	fp, #3
 8007be4:	d1cb      	bne.n	8007b7e <_scanf_i+0x5a>
 8007be6:	6863      	ldr	r3, [r4, #4]
 8007be8:	b90b      	cbnz	r3, 8007bee <_scanf_i+0xca>
 8007bea:	230a      	movs	r3, #10
 8007bec:	6063      	str	r3, [r4, #4]
 8007bee:	6863      	ldr	r3, [r4, #4]
 8007bf0:	4945      	ldr	r1, [pc, #276]	@ (8007d08 <_scanf_i+0x1e4>)
 8007bf2:	6960      	ldr	r0, [r4, #20]
 8007bf4:	1ac9      	subs	r1, r1, r3
 8007bf6:	f000 fa4d 	bl	8008094 <__sccl>
 8007bfa:	f04f 0b00 	mov.w	fp, #0
 8007bfe:	68a3      	ldr	r3, [r4, #8]
 8007c00:	6822      	ldr	r2, [r4, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d03d      	beq.n	8007c82 <_scanf_i+0x15e>
 8007c06:	6831      	ldr	r1, [r6, #0]
 8007c08:	6960      	ldr	r0, [r4, #20]
 8007c0a:	f891 c000 	ldrb.w	ip, [r1]
 8007c0e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007c12:	2800      	cmp	r0, #0
 8007c14:	d035      	beq.n	8007c82 <_scanf_i+0x15e>
 8007c16:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8007c1a:	d124      	bne.n	8007c66 <_scanf_i+0x142>
 8007c1c:	0510      	lsls	r0, r2, #20
 8007c1e:	d522      	bpl.n	8007c66 <_scanf_i+0x142>
 8007c20:	f10b 0b01 	add.w	fp, fp, #1
 8007c24:	f1b9 0f00 	cmp.w	r9, #0
 8007c28:	d003      	beq.n	8007c32 <_scanf_i+0x10e>
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	f109 39ff 	add.w	r9, r9, #4294967295
 8007c30:	60a3      	str	r3, [r4, #8]
 8007c32:	6873      	ldr	r3, [r6, #4]
 8007c34:	3b01      	subs	r3, #1
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	6073      	str	r3, [r6, #4]
 8007c3a:	dd1b      	ble.n	8007c74 <_scanf_i+0x150>
 8007c3c:	6833      	ldr	r3, [r6, #0]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	6033      	str	r3, [r6, #0]
 8007c42:	68a3      	ldr	r3, [r4, #8]
 8007c44:	3b01      	subs	r3, #1
 8007c46:	60a3      	str	r3, [r4, #8]
 8007c48:	e7d9      	b.n	8007bfe <_scanf_i+0xda>
 8007c4a:	f1bb 0f02 	cmp.w	fp, #2
 8007c4e:	d1ae      	bne.n	8007bae <_scanf_i+0x8a>
 8007c50:	6822      	ldr	r2, [r4, #0]
 8007c52:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8007c56:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007c5a:	d1bf      	bne.n	8007bdc <_scanf_i+0xb8>
 8007c5c:	2110      	movs	r1, #16
 8007c5e:	6061      	str	r1, [r4, #4]
 8007c60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c64:	e7a2      	b.n	8007bac <_scanf_i+0x88>
 8007c66:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8007c6a:	6022      	str	r2, [r4, #0]
 8007c6c:	780b      	ldrb	r3, [r1, #0]
 8007c6e:	f805 3b01 	strb.w	r3, [r5], #1
 8007c72:	e7de      	b.n	8007c32 <_scanf_i+0x10e>
 8007c74:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007c78:	4631      	mov	r1, r6
 8007c7a:	4650      	mov	r0, sl
 8007c7c:	4798      	blx	r3
 8007c7e:	2800      	cmp	r0, #0
 8007c80:	d0df      	beq.n	8007c42 <_scanf_i+0x11e>
 8007c82:	6823      	ldr	r3, [r4, #0]
 8007c84:	05d9      	lsls	r1, r3, #23
 8007c86:	d50d      	bpl.n	8007ca4 <_scanf_i+0x180>
 8007c88:	42bd      	cmp	r5, r7
 8007c8a:	d909      	bls.n	8007ca0 <_scanf_i+0x17c>
 8007c8c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007c90:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007c94:	4632      	mov	r2, r6
 8007c96:	4650      	mov	r0, sl
 8007c98:	4798      	blx	r3
 8007c9a:	f105 39ff 	add.w	r9, r5, #4294967295
 8007c9e:	464d      	mov	r5, r9
 8007ca0:	42bd      	cmp	r5, r7
 8007ca2:	d028      	beq.n	8007cf6 <_scanf_i+0x1d2>
 8007ca4:	6822      	ldr	r2, [r4, #0]
 8007ca6:	f012 0210 	ands.w	r2, r2, #16
 8007caa:	d113      	bne.n	8007cd4 <_scanf_i+0x1b0>
 8007cac:	702a      	strb	r2, [r5, #0]
 8007cae:	6863      	ldr	r3, [r4, #4]
 8007cb0:	9e01      	ldr	r6, [sp, #4]
 8007cb2:	4639      	mov	r1, r7
 8007cb4:	4650      	mov	r0, sl
 8007cb6:	47b0      	blx	r6
 8007cb8:	f8d8 3000 	ldr.w	r3, [r8]
 8007cbc:	6821      	ldr	r1, [r4, #0]
 8007cbe:	1d1a      	adds	r2, r3, #4
 8007cc0:	f8c8 2000 	str.w	r2, [r8]
 8007cc4:	f011 0f20 	tst.w	r1, #32
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	d00f      	beq.n	8007cec <_scanf_i+0x1c8>
 8007ccc:	6018      	str	r0, [r3, #0]
 8007cce:	68e3      	ldr	r3, [r4, #12]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	60e3      	str	r3, [r4, #12]
 8007cd4:	6923      	ldr	r3, [r4, #16]
 8007cd6:	1bed      	subs	r5, r5, r7
 8007cd8:	445d      	add	r5, fp
 8007cda:	442b      	add	r3, r5
 8007cdc:	6123      	str	r3, [r4, #16]
 8007cde:	2000      	movs	r0, #0
 8007ce0:	b007      	add	sp, #28
 8007ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce6:	f04f 0b00 	mov.w	fp, #0
 8007cea:	e7ca      	b.n	8007c82 <_scanf_i+0x15e>
 8007cec:	07ca      	lsls	r2, r1, #31
 8007cee:	bf4c      	ite	mi
 8007cf0:	8018      	strhmi	r0, [r3, #0]
 8007cf2:	6018      	strpl	r0, [r3, #0]
 8007cf4:	e7eb      	b.n	8007cce <_scanf_i+0x1aa>
 8007cf6:	2001      	movs	r0, #1
 8007cf8:	e7f2      	b.n	8007ce0 <_scanf_i+0x1bc>
 8007cfa:	bf00      	nop
 8007cfc:	08009c34 	.word	0x08009c34
 8007d00:	080085f9 	.word	0x080085f9
 8007d04:	080086d9 	.word	0x080086d9
 8007d08:	08009e91 	.word	0x08009e91

08007d0c <__sflush_r>:
 8007d0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d14:	0716      	lsls	r6, r2, #28
 8007d16:	4605      	mov	r5, r0
 8007d18:	460c      	mov	r4, r1
 8007d1a:	d454      	bmi.n	8007dc6 <__sflush_r+0xba>
 8007d1c:	684b      	ldr	r3, [r1, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	dc02      	bgt.n	8007d28 <__sflush_r+0x1c>
 8007d22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	dd48      	ble.n	8007dba <__sflush_r+0xae>
 8007d28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d2a:	2e00      	cmp	r6, #0
 8007d2c:	d045      	beq.n	8007dba <__sflush_r+0xae>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007d34:	682f      	ldr	r7, [r5, #0]
 8007d36:	6a21      	ldr	r1, [r4, #32]
 8007d38:	602b      	str	r3, [r5, #0]
 8007d3a:	d030      	beq.n	8007d9e <__sflush_r+0x92>
 8007d3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007d3e:	89a3      	ldrh	r3, [r4, #12]
 8007d40:	0759      	lsls	r1, r3, #29
 8007d42:	d505      	bpl.n	8007d50 <__sflush_r+0x44>
 8007d44:	6863      	ldr	r3, [r4, #4]
 8007d46:	1ad2      	subs	r2, r2, r3
 8007d48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007d4a:	b10b      	cbz	r3, 8007d50 <__sflush_r+0x44>
 8007d4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007d4e:	1ad2      	subs	r2, r2, r3
 8007d50:	2300      	movs	r3, #0
 8007d52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d54:	6a21      	ldr	r1, [r4, #32]
 8007d56:	4628      	mov	r0, r5
 8007d58:	47b0      	blx	r6
 8007d5a:	1c43      	adds	r3, r0, #1
 8007d5c:	89a3      	ldrh	r3, [r4, #12]
 8007d5e:	d106      	bne.n	8007d6e <__sflush_r+0x62>
 8007d60:	6829      	ldr	r1, [r5, #0]
 8007d62:	291d      	cmp	r1, #29
 8007d64:	d82b      	bhi.n	8007dbe <__sflush_r+0xb2>
 8007d66:	4a2a      	ldr	r2, [pc, #168]	@ (8007e10 <__sflush_r+0x104>)
 8007d68:	410a      	asrs	r2, r1
 8007d6a:	07d6      	lsls	r6, r2, #31
 8007d6c:	d427      	bmi.n	8007dbe <__sflush_r+0xb2>
 8007d6e:	2200      	movs	r2, #0
 8007d70:	6062      	str	r2, [r4, #4]
 8007d72:	04d9      	lsls	r1, r3, #19
 8007d74:	6922      	ldr	r2, [r4, #16]
 8007d76:	6022      	str	r2, [r4, #0]
 8007d78:	d504      	bpl.n	8007d84 <__sflush_r+0x78>
 8007d7a:	1c42      	adds	r2, r0, #1
 8007d7c:	d101      	bne.n	8007d82 <__sflush_r+0x76>
 8007d7e:	682b      	ldr	r3, [r5, #0]
 8007d80:	b903      	cbnz	r3, 8007d84 <__sflush_r+0x78>
 8007d82:	6560      	str	r0, [r4, #84]	@ 0x54
 8007d84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d86:	602f      	str	r7, [r5, #0]
 8007d88:	b1b9      	cbz	r1, 8007dba <__sflush_r+0xae>
 8007d8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d8e:	4299      	cmp	r1, r3
 8007d90:	d002      	beq.n	8007d98 <__sflush_r+0x8c>
 8007d92:	4628      	mov	r0, r5
 8007d94:	f7fe fef8 	bl	8006b88 <_free_r>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d9c:	e00d      	b.n	8007dba <__sflush_r+0xae>
 8007d9e:	2301      	movs	r3, #1
 8007da0:	4628      	mov	r0, r5
 8007da2:	47b0      	blx	r6
 8007da4:	4602      	mov	r2, r0
 8007da6:	1c50      	adds	r0, r2, #1
 8007da8:	d1c9      	bne.n	8007d3e <__sflush_r+0x32>
 8007daa:	682b      	ldr	r3, [r5, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d0c6      	beq.n	8007d3e <__sflush_r+0x32>
 8007db0:	2b1d      	cmp	r3, #29
 8007db2:	d001      	beq.n	8007db8 <__sflush_r+0xac>
 8007db4:	2b16      	cmp	r3, #22
 8007db6:	d11e      	bne.n	8007df6 <__sflush_r+0xea>
 8007db8:	602f      	str	r7, [r5, #0]
 8007dba:	2000      	movs	r0, #0
 8007dbc:	e022      	b.n	8007e04 <__sflush_r+0xf8>
 8007dbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dc2:	b21b      	sxth	r3, r3
 8007dc4:	e01b      	b.n	8007dfe <__sflush_r+0xf2>
 8007dc6:	690f      	ldr	r7, [r1, #16]
 8007dc8:	2f00      	cmp	r7, #0
 8007dca:	d0f6      	beq.n	8007dba <__sflush_r+0xae>
 8007dcc:	0793      	lsls	r3, r2, #30
 8007dce:	680e      	ldr	r6, [r1, #0]
 8007dd0:	bf08      	it	eq
 8007dd2:	694b      	ldreq	r3, [r1, #20]
 8007dd4:	600f      	str	r7, [r1, #0]
 8007dd6:	bf18      	it	ne
 8007dd8:	2300      	movne	r3, #0
 8007dda:	eba6 0807 	sub.w	r8, r6, r7
 8007dde:	608b      	str	r3, [r1, #8]
 8007de0:	f1b8 0f00 	cmp.w	r8, #0
 8007de4:	dde9      	ble.n	8007dba <__sflush_r+0xae>
 8007de6:	6a21      	ldr	r1, [r4, #32]
 8007de8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007dea:	4643      	mov	r3, r8
 8007dec:	463a      	mov	r2, r7
 8007dee:	4628      	mov	r0, r5
 8007df0:	47b0      	blx	r6
 8007df2:	2800      	cmp	r0, #0
 8007df4:	dc08      	bgt.n	8007e08 <__sflush_r+0xfc>
 8007df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dfe:	81a3      	strh	r3, [r4, #12]
 8007e00:	f04f 30ff 	mov.w	r0, #4294967295
 8007e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e08:	4407      	add	r7, r0
 8007e0a:	eba8 0800 	sub.w	r8, r8, r0
 8007e0e:	e7e7      	b.n	8007de0 <__sflush_r+0xd4>
 8007e10:	dfbffffe 	.word	0xdfbffffe

08007e14 <_fflush_r>:
 8007e14:	b538      	push	{r3, r4, r5, lr}
 8007e16:	690b      	ldr	r3, [r1, #16]
 8007e18:	4605      	mov	r5, r0
 8007e1a:	460c      	mov	r4, r1
 8007e1c:	b913      	cbnz	r3, 8007e24 <_fflush_r+0x10>
 8007e1e:	2500      	movs	r5, #0
 8007e20:	4628      	mov	r0, r5
 8007e22:	bd38      	pop	{r3, r4, r5, pc}
 8007e24:	b118      	cbz	r0, 8007e2e <_fflush_r+0x1a>
 8007e26:	6a03      	ldr	r3, [r0, #32]
 8007e28:	b90b      	cbnz	r3, 8007e2e <_fflush_r+0x1a>
 8007e2a:	f7fd fe87 	bl	8005b3c <__sinit>
 8007e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d0f3      	beq.n	8007e1e <_fflush_r+0xa>
 8007e36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007e38:	07d0      	lsls	r0, r2, #31
 8007e3a:	d404      	bmi.n	8007e46 <_fflush_r+0x32>
 8007e3c:	0599      	lsls	r1, r3, #22
 8007e3e:	d402      	bmi.n	8007e46 <_fflush_r+0x32>
 8007e40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e42:	f7fe f852 	bl	8005eea <__retarget_lock_acquire_recursive>
 8007e46:	4628      	mov	r0, r5
 8007e48:	4621      	mov	r1, r4
 8007e4a:	f7ff ff5f 	bl	8007d0c <__sflush_r>
 8007e4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e50:	07da      	lsls	r2, r3, #31
 8007e52:	4605      	mov	r5, r0
 8007e54:	d4e4      	bmi.n	8007e20 <_fflush_r+0xc>
 8007e56:	89a3      	ldrh	r3, [r4, #12]
 8007e58:	059b      	lsls	r3, r3, #22
 8007e5a:	d4e1      	bmi.n	8007e20 <_fflush_r+0xc>
 8007e5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e5e:	f7fe f845 	bl	8005eec <__retarget_lock_release_recursive>
 8007e62:	e7dd      	b.n	8007e20 <_fflush_r+0xc>

08007e64 <__swhatbuf_r>:
 8007e64:	b570      	push	{r4, r5, r6, lr}
 8007e66:	460c      	mov	r4, r1
 8007e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e6c:	2900      	cmp	r1, #0
 8007e6e:	b096      	sub	sp, #88	@ 0x58
 8007e70:	4615      	mov	r5, r2
 8007e72:	461e      	mov	r6, r3
 8007e74:	da0d      	bge.n	8007e92 <__swhatbuf_r+0x2e>
 8007e76:	89a3      	ldrh	r3, [r4, #12]
 8007e78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007e7c:	f04f 0100 	mov.w	r1, #0
 8007e80:	bf14      	ite	ne
 8007e82:	2340      	movne	r3, #64	@ 0x40
 8007e84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007e88:	2000      	movs	r0, #0
 8007e8a:	6031      	str	r1, [r6, #0]
 8007e8c:	602b      	str	r3, [r5, #0]
 8007e8e:	b016      	add	sp, #88	@ 0x58
 8007e90:	bd70      	pop	{r4, r5, r6, pc}
 8007e92:	466a      	mov	r2, sp
 8007e94:	f000 fa84 	bl	80083a0 <_fstat_r>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	dbec      	blt.n	8007e76 <__swhatbuf_r+0x12>
 8007e9c:	9901      	ldr	r1, [sp, #4]
 8007e9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007ea2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007ea6:	4259      	negs	r1, r3
 8007ea8:	4159      	adcs	r1, r3
 8007eaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007eae:	e7eb      	b.n	8007e88 <__swhatbuf_r+0x24>

08007eb0 <__smakebuf_r>:
 8007eb0:	898b      	ldrh	r3, [r1, #12]
 8007eb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007eb4:	079d      	lsls	r5, r3, #30
 8007eb6:	4606      	mov	r6, r0
 8007eb8:	460c      	mov	r4, r1
 8007eba:	d507      	bpl.n	8007ecc <__smakebuf_r+0x1c>
 8007ebc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	6123      	str	r3, [r4, #16]
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	6163      	str	r3, [r4, #20]
 8007ec8:	b003      	add	sp, #12
 8007eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ecc:	ab01      	add	r3, sp, #4
 8007ece:	466a      	mov	r2, sp
 8007ed0:	f7ff ffc8 	bl	8007e64 <__swhatbuf_r>
 8007ed4:	9f00      	ldr	r7, [sp, #0]
 8007ed6:	4605      	mov	r5, r0
 8007ed8:	4639      	mov	r1, r7
 8007eda:	4630      	mov	r0, r6
 8007edc:	f7fe fec8 	bl	8006c70 <_malloc_r>
 8007ee0:	b948      	cbnz	r0, 8007ef6 <__smakebuf_r+0x46>
 8007ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ee6:	059a      	lsls	r2, r3, #22
 8007ee8:	d4ee      	bmi.n	8007ec8 <__smakebuf_r+0x18>
 8007eea:	f023 0303 	bic.w	r3, r3, #3
 8007eee:	f043 0302 	orr.w	r3, r3, #2
 8007ef2:	81a3      	strh	r3, [r4, #12]
 8007ef4:	e7e2      	b.n	8007ebc <__smakebuf_r+0xc>
 8007ef6:	89a3      	ldrh	r3, [r4, #12]
 8007ef8:	6020      	str	r0, [r4, #0]
 8007efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007efe:	81a3      	strh	r3, [r4, #12]
 8007f00:	9b01      	ldr	r3, [sp, #4]
 8007f02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007f06:	b15b      	cbz	r3, 8007f20 <__smakebuf_r+0x70>
 8007f08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	f000 fa59 	bl	80083c4 <_isatty_r>
 8007f12:	b128      	cbz	r0, 8007f20 <__smakebuf_r+0x70>
 8007f14:	89a3      	ldrh	r3, [r4, #12]
 8007f16:	f023 0303 	bic.w	r3, r3, #3
 8007f1a:	f043 0301 	orr.w	r3, r3, #1
 8007f1e:	81a3      	strh	r3, [r4, #12]
 8007f20:	89a3      	ldrh	r3, [r4, #12]
 8007f22:	431d      	orrs	r5, r3
 8007f24:	81a5      	strh	r5, [r4, #12]
 8007f26:	e7cf      	b.n	8007ec8 <__smakebuf_r+0x18>

08007f28 <_putc_r>:
 8007f28:	b570      	push	{r4, r5, r6, lr}
 8007f2a:	460d      	mov	r5, r1
 8007f2c:	4614      	mov	r4, r2
 8007f2e:	4606      	mov	r6, r0
 8007f30:	b118      	cbz	r0, 8007f3a <_putc_r+0x12>
 8007f32:	6a03      	ldr	r3, [r0, #32]
 8007f34:	b90b      	cbnz	r3, 8007f3a <_putc_r+0x12>
 8007f36:	f7fd fe01 	bl	8005b3c <__sinit>
 8007f3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f3c:	07d8      	lsls	r0, r3, #31
 8007f3e:	d405      	bmi.n	8007f4c <_putc_r+0x24>
 8007f40:	89a3      	ldrh	r3, [r4, #12]
 8007f42:	0599      	lsls	r1, r3, #22
 8007f44:	d402      	bmi.n	8007f4c <_putc_r+0x24>
 8007f46:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f48:	f7fd ffcf 	bl	8005eea <__retarget_lock_acquire_recursive>
 8007f4c:	68a3      	ldr	r3, [r4, #8]
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	60a3      	str	r3, [r4, #8]
 8007f54:	da05      	bge.n	8007f62 <_putc_r+0x3a>
 8007f56:	69a2      	ldr	r2, [r4, #24]
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	db12      	blt.n	8007f82 <_putc_r+0x5a>
 8007f5c:	b2eb      	uxtb	r3, r5
 8007f5e:	2b0a      	cmp	r3, #10
 8007f60:	d00f      	beq.n	8007f82 <_putc_r+0x5a>
 8007f62:	6823      	ldr	r3, [r4, #0]
 8007f64:	1c5a      	adds	r2, r3, #1
 8007f66:	6022      	str	r2, [r4, #0]
 8007f68:	701d      	strb	r5, [r3, #0]
 8007f6a:	b2ed      	uxtb	r5, r5
 8007f6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f6e:	07da      	lsls	r2, r3, #31
 8007f70:	d405      	bmi.n	8007f7e <_putc_r+0x56>
 8007f72:	89a3      	ldrh	r3, [r4, #12]
 8007f74:	059b      	lsls	r3, r3, #22
 8007f76:	d402      	bmi.n	8007f7e <_putc_r+0x56>
 8007f78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f7a:	f7fd ffb7 	bl	8005eec <__retarget_lock_release_recursive>
 8007f7e:	4628      	mov	r0, r5
 8007f80:	bd70      	pop	{r4, r5, r6, pc}
 8007f82:	4629      	mov	r1, r5
 8007f84:	4622      	mov	r2, r4
 8007f86:	4630      	mov	r0, r6
 8007f88:	f000 f976 	bl	8008278 <__swbuf_r>
 8007f8c:	4605      	mov	r5, r0
 8007f8e:	e7ed      	b.n	8007f6c <_putc_r+0x44>

08007f90 <lflush>:
 8007f90:	898b      	ldrh	r3, [r1, #12]
 8007f92:	f003 0309 	and.w	r3, r3, #9
 8007f96:	2b09      	cmp	r3, #9
 8007f98:	d103      	bne.n	8007fa2 <lflush+0x12>
 8007f9a:	4b03      	ldr	r3, [pc, #12]	@ (8007fa8 <lflush+0x18>)
 8007f9c:	6818      	ldr	r0, [r3, #0]
 8007f9e:	f7ff bf39 	b.w	8007e14 <_fflush_r>
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	20000018 	.word	0x20000018

08007fac <__srefill_r>:
 8007fac:	b570      	push	{r4, r5, r6, lr}
 8007fae:	460c      	mov	r4, r1
 8007fb0:	4605      	mov	r5, r0
 8007fb2:	b118      	cbz	r0, 8007fbc <__srefill_r+0x10>
 8007fb4:	6a03      	ldr	r3, [r0, #32]
 8007fb6:	b90b      	cbnz	r3, 8007fbc <__srefill_r+0x10>
 8007fb8:	f7fd fdc0 	bl	8005b3c <__sinit>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	6063      	str	r3, [r4, #4]
 8007fc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fc4:	069e      	lsls	r6, r3, #26
 8007fc6:	d408      	bmi.n	8007fda <__srefill_r+0x2e>
 8007fc8:	0758      	lsls	r0, r3, #29
 8007fca:	d445      	bmi.n	8008058 <__srefill_r+0xac>
 8007fcc:	06d9      	lsls	r1, r3, #27
 8007fce:	d407      	bmi.n	8007fe0 <__srefill_r+0x34>
 8007fd0:	2209      	movs	r2, #9
 8007fd2:	602a      	str	r2, [r5, #0]
 8007fd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fd8:	81a3      	strh	r3, [r4, #12]
 8007fda:	f04f 30ff 	mov.w	r0, #4294967295
 8007fde:	bd70      	pop	{r4, r5, r6, pc}
 8007fe0:	071a      	lsls	r2, r3, #28
 8007fe2:	d50b      	bpl.n	8007ffc <__srefill_r+0x50>
 8007fe4:	4621      	mov	r1, r4
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	f7ff ff14 	bl	8007e14 <_fflush_r>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	d1f4      	bne.n	8007fda <__srefill_r+0x2e>
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	60a0      	str	r0, [r4, #8]
 8007ff4:	f023 0308 	bic.w	r3, r3, #8
 8007ff8:	81a3      	strh	r3, [r4, #12]
 8007ffa:	61a0      	str	r0, [r4, #24]
 8007ffc:	89a3      	ldrh	r3, [r4, #12]
 8007ffe:	f043 0304 	orr.w	r3, r3, #4
 8008002:	81a3      	strh	r3, [r4, #12]
 8008004:	6923      	ldr	r3, [r4, #16]
 8008006:	b91b      	cbnz	r3, 8008010 <__srefill_r+0x64>
 8008008:	4621      	mov	r1, r4
 800800a:	4628      	mov	r0, r5
 800800c:	f7ff ff50 	bl	8007eb0 <__smakebuf_r>
 8008010:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8008014:	07b3      	lsls	r3, r6, #30
 8008016:	d00f      	beq.n	8008038 <__srefill_r+0x8c>
 8008018:	2301      	movs	r3, #1
 800801a:	4a1b      	ldr	r2, [pc, #108]	@ (8008088 <__srefill_r+0xdc>)
 800801c:	491b      	ldr	r1, [pc, #108]	@ (800808c <__srefill_r+0xe0>)
 800801e:	481c      	ldr	r0, [pc, #112]	@ (8008090 <__srefill_r+0xe4>)
 8008020:	81a3      	strh	r3, [r4, #12]
 8008022:	f7fd fda3 	bl	8005b6c <_fwalk_sglue>
 8008026:	81a6      	strh	r6, [r4, #12]
 8008028:	f006 0609 	and.w	r6, r6, #9
 800802c:	2e09      	cmp	r6, #9
 800802e:	d103      	bne.n	8008038 <__srefill_r+0x8c>
 8008030:	4621      	mov	r1, r4
 8008032:	4628      	mov	r0, r5
 8008034:	f7ff fe6a 	bl	8007d0c <__sflush_r>
 8008038:	6922      	ldr	r2, [r4, #16]
 800803a:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800803c:	6963      	ldr	r3, [r4, #20]
 800803e:	6a21      	ldr	r1, [r4, #32]
 8008040:	6022      	str	r2, [r4, #0]
 8008042:	4628      	mov	r0, r5
 8008044:	47b0      	blx	r6
 8008046:	2800      	cmp	r0, #0
 8008048:	6060      	str	r0, [r4, #4]
 800804a:	dc17      	bgt.n	800807c <__srefill_r+0xd0>
 800804c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008050:	d116      	bne.n	8008080 <__srefill_r+0xd4>
 8008052:	f043 0320 	orr.w	r3, r3, #32
 8008056:	e7bf      	b.n	8007fd8 <__srefill_r+0x2c>
 8008058:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800805a:	2900      	cmp	r1, #0
 800805c:	d0d2      	beq.n	8008004 <__srefill_r+0x58>
 800805e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008062:	4299      	cmp	r1, r3
 8008064:	d002      	beq.n	800806c <__srefill_r+0xc0>
 8008066:	4628      	mov	r0, r5
 8008068:	f7fe fd8e 	bl	8006b88 <_free_r>
 800806c:	2300      	movs	r3, #0
 800806e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008070:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008072:	6063      	str	r3, [r4, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d0c5      	beq.n	8008004 <__srefill_r+0x58>
 8008078:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800807a:	6023      	str	r3, [r4, #0]
 800807c:	2000      	movs	r0, #0
 800807e:	e7ae      	b.n	8007fde <__srefill_r+0x32>
 8008080:	2200      	movs	r2, #0
 8008082:	6062      	str	r2, [r4, #4]
 8008084:	e7a6      	b.n	8007fd4 <__srefill_r+0x28>
 8008086:	bf00      	nop
 8008088:	2000000c 	.word	0x2000000c
 800808c:	08007f91 	.word	0x08007f91
 8008090:	2000001c 	.word	0x2000001c

08008094 <__sccl>:
 8008094:	b570      	push	{r4, r5, r6, lr}
 8008096:	780b      	ldrb	r3, [r1, #0]
 8008098:	4604      	mov	r4, r0
 800809a:	2b5e      	cmp	r3, #94	@ 0x5e
 800809c:	bf0b      	itete	eq
 800809e:	784b      	ldrbeq	r3, [r1, #1]
 80080a0:	1c4a      	addne	r2, r1, #1
 80080a2:	1c8a      	addeq	r2, r1, #2
 80080a4:	2100      	movne	r1, #0
 80080a6:	bf08      	it	eq
 80080a8:	2101      	moveq	r1, #1
 80080aa:	3801      	subs	r0, #1
 80080ac:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80080b0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80080b4:	42a8      	cmp	r0, r5
 80080b6:	d1fb      	bne.n	80080b0 <__sccl+0x1c>
 80080b8:	b90b      	cbnz	r3, 80080be <__sccl+0x2a>
 80080ba:	1e50      	subs	r0, r2, #1
 80080bc:	bd70      	pop	{r4, r5, r6, pc}
 80080be:	f081 0101 	eor.w	r1, r1, #1
 80080c2:	54e1      	strb	r1, [r4, r3]
 80080c4:	4610      	mov	r0, r2
 80080c6:	4602      	mov	r2, r0
 80080c8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80080cc:	2d2d      	cmp	r5, #45	@ 0x2d
 80080ce:	d005      	beq.n	80080dc <__sccl+0x48>
 80080d0:	2d5d      	cmp	r5, #93	@ 0x5d
 80080d2:	d016      	beq.n	8008102 <__sccl+0x6e>
 80080d4:	2d00      	cmp	r5, #0
 80080d6:	d0f1      	beq.n	80080bc <__sccl+0x28>
 80080d8:	462b      	mov	r3, r5
 80080da:	e7f2      	b.n	80080c2 <__sccl+0x2e>
 80080dc:	7846      	ldrb	r6, [r0, #1]
 80080de:	2e5d      	cmp	r6, #93	@ 0x5d
 80080e0:	d0fa      	beq.n	80080d8 <__sccl+0x44>
 80080e2:	42b3      	cmp	r3, r6
 80080e4:	dcf8      	bgt.n	80080d8 <__sccl+0x44>
 80080e6:	3002      	adds	r0, #2
 80080e8:	461a      	mov	r2, r3
 80080ea:	3201      	adds	r2, #1
 80080ec:	4296      	cmp	r6, r2
 80080ee:	54a1      	strb	r1, [r4, r2]
 80080f0:	dcfb      	bgt.n	80080ea <__sccl+0x56>
 80080f2:	1af2      	subs	r2, r6, r3
 80080f4:	3a01      	subs	r2, #1
 80080f6:	1c5d      	adds	r5, r3, #1
 80080f8:	42b3      	cmp	r3, r6
 80080fa:	bfa8      	it	ge
 80080fc:	2200      	movge	r2, #0
 80080fe:	18ab      	adds	r3, r5, r2
 8008100:	e7e1      	b.n	80080c6 <__sccl+0x32>
 8008102:	4610      	mov	r0, r2
 8008104:	e7da      	b.n	80080bc <__sccl+0x28>

08008106 <__submore>:
 8008106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800810a:	460c      	mov	r4, r1
 800810c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800810e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008112:	4299      	cmp	r1, r3
 8008114:	d11d      	bne.n	8008152 <__submore+0x4c>
 8008116:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800811a:	f7fe fda9 	bl	8006c70 <_malloc_r>
 800811e:	b918      	cbnz	r0, 8008128 <__submore+0x22>
 8008120:	f04f 30ff 	mov.w	r0, #4294967295
 8008124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008128:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800812c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800812e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8008132:	6360      	str	r0, [r4, #52]	@ 0x34
 8008134:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8008138:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800813c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8008140:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008144:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8008148:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800814c:	6020      	str	r0, [r4, #0]
 800814e:	2000      	movs	r0, #0
 8008150:	e7e8      	b.n	8008124 <__submore+0x1e>
 8008152:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8008154:	0077      	lsls	r7, r6, #1
 8008156:	463a      	mov	r2, r7
 8008158:	f000 f9a6 	bl	80084a8 <_realloc_r>
 800815c:	4605      	mov	r5, r0
 800815e:	2800      	cmp	r0, #0
 8008160:	d0de      	beq.n	8008120 <__submore+0x1a>
 8008162:	eb00 0806 	add.w	r8, r0, r6
 8008166:	4601      	mov	r1, r0
 8008168:	4632      	mov	r2, r6
 800816a:	4640      	mov	r0, r8
 800816c:	f000 f94a 	bl	8008404 <memcpy>
 8008170:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8008174:	f8c4 8000 	str.w	r8, [r4]
 8008178:	e7e9      	b.n	800814e <__submore+0x48>

0800817a <_ungetc_r>:
 800817a:	b570      	push	{r4, r5, r6, lr}
 800817c:	460d      	mov	r5, r1
 800817e:	1c69      	adds	r1, r5, #1
 8008180:	4606      	mov	r6, r0
 8008182:	4614      	mov	r4, r2
 8008184:	d01e      	beq.n	80081c4 <_ungetc_r+0x4a>
 8008186:	b118      	cbz	r0, 8008190 <_ungetc_r+0x16>
 8008188:	6a03      	ldr	r3, [r0, #32]
 800818a:	b90b      	cbnz	r3, 8008190 <_ungetc_r+0x16>
 800818c:	f7fd fcd6 	bl	8005b3c <__sinit>
 8008190:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008192:	07da      	lsls	r2, r3, #31
 8008194:	d405      	bmi.n	80081a2 <_ungetc_r+0x28>
 8008196:	89a3      	ldrh	r3, [r4, #12]
 8008198:	059b      	lsls	r3, r3, #22
 800819a:	d402      	bmi.n	80081a2 <_ungetc_r+0x28>
 800819c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800819e:	f7fd fea4 	bl	8005eea <__retarget_lock_acquire_recursive>
 80081a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081a6:	f023 0220 	bic.w	r2, r3, #32
 80081aa:	0758      	lsls	r0, r3, #29
 80081ac:	81a2      	strh	r2, [r4, #12]
 80081ae:	d422      	bmi.n	80081f6 <_ungetc_r+0x7c>
 80081b0:	06d9      	lsls	r1, r3, #27
 80081b2:	d40a      	bmi.n	80081ca <_ungetc_r+0x50>
 80081b4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80081b6:	07d2      	lsls	r2, r2, #31
 80081b8:	d404      	bmi.n	80081c4 <_ungetc_r+0x4a>
 80081ba:	0599      	lsls	r1, r3, #22
 80081bc:	d402      	bmi.n	80081c4 <_ungetc_r+0x4a>
 80081be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081c0:	f7fd fe94 	bl	8005eec <__retarget_lock_release_recursive>
 80081c4:	f04f 35ff 	mov.w	r5, #4294967295
 80081c8:	e046      	b.n	8008258 <_ungetc_r+0xde>
 80081ca:	071b      	lsls	r3, r3, #28
 80081cc:	d50f      	bpl.n	80081ee <_ungetc_r+0x74>
 80081ce:	4621      	mov	r1, r4
 80081d0:	4630      	mov	r0, r6
 80081d2:	f7ff fe1f 	bl	8007e14 <_fflush_r>
 80081d6:	b120      	cbz	r0, 80081e2 <_ungetc_r+0x68>
 80081d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80081da:	07d8      	lsls	r0, r3, #31
 80081dc:	d4f2      	bmi.n	80081c4 <_ungetc_r+0x4a>
 80081de:	89a3      	ldrh	r3, [r4, #12]
 80081e0:	e7eb      	b.n	80081ba <_ungetc_r+0x40>
 80081e2:	89a3      	ldrh	r3, [r4, #12]
 80081e4:	60a0      	str	r0, [r4, #8]
 80081e6:	f023 0308 	bic.w	r3, r3, #8
 80081ea:	81a3      	strh	r3, [r4, #12]
 80081ec:	61a0      	str	r0, [r4, #24]
 80081ee:	89a3      	ldrh	r3, [r4, #12]
 80081f0:	f043 0304 	orr.w	r3, r3, #4
 80081f4:	81a3      	strh	r3, [r4, #12]
 80081f6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80081f8:	6862      	ldr	r2, [r4, #4]
 80081fa:	b2ed      	uxtb	r5, r5
 80081fc:	b1d3      	cbz	r3, 8008234 <_ungetc_r+0xba>
 80081fe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008200:	4293      	cmp	r3, r2
 8008202:	dc05      	bgt.n	8008210 <_ungetc_r+0x96>
 8008204:	4621      	mov	r1, r4
 8008206:	4630      	mov	r0, r6
 8008208:	f7ff ff7d 	bl	8008106 <__submore>
 800820c:	2800      	cmp	r0, #0
 800820e:	d1e3      	bne.n	80081d8 <_ungetc_r+0x5e>
 8008210:	6823      	ldr	r3, [r4, #0]
 8008212:	1e5a      	subs	r2, r3, #1
 8008214:	6022      	str	r2, [r4, #0]
 8008216:	f803 5c01 	strb.w	r5, [r3, #-1]
 800821a:	6863      	ldr	r3, [r4, #4]
 800821c:	3301      	adds	r3, #1
 800821e:	6063      	str	r3, [r4, #4]
 8008220:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008222:	07da      	lsls	r2, r3, #31
 8008224:	d418      	bmi.n	8008258 <_ungetc_r+0xde>
 8008226:	89a3      	ldrh	r3, [r4, #12]
 8008228:	059b      	lsls	r3, r3, #22
 800822a:	d415      	bmi.n	8008258 <_ungetc_r+0xde>
 800822c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800822e:	f7fd fe5d 	bl	8005eec <__retarget_lock_release_recursive>
 8008232:	e011      	b.n	8008258 <_ungetc_r+0xde>
 8008234:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8008236:	6920      	ldr	r0, [r4, #16]
 8008238:	6823      	ldr	r3, [r4, #0]
 800823a:	f001 0101 	and.w	r1, r1, #1
 800823e:	b168      	cbz	r0, 800825c <_ungetc_r+0xe2>
 8008240:	4298      	cmp	r0, r3
 8008242:	d20b      	bcs.n	800825c <_ungetc_r+0xe2>
 8008244:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8008248:	42a8      	cmp	r0, r5
 800824a:	d107      	bne.n	800825c <_ungetc_r+0xe2>
 800824c:	3b01      	subs	r3, #1
 800824e:	3201      	adds	r2, #1
 8008250:	6023      	str	r3, [r4, #0]
 8008252:	6062      	str	r2, [r4, #4]
 8008254:	2900      	cmp	r1, #0
 8008256:	d0e6      	beq.n	8008226 <_ungetc_r+0xac>
 8008258:	4628      	mov	r0, r5
 800825a:	bd70      	pop	{r4, r5, r6, pc}
 800825c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8008260:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008264:	6363      	str	r3, [r4, #52]	@ 0x34
 8008266:	2303      	movs	r3, #3
 8008268:	63a3      	str	r3, [r4, #56]	@ 0x38
 800826a:	4623      	mov	r3, r4
 800826c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008270:	6023      	str	r3, [r4, #0]
 8008272:	2301      	movs	r3, #1
 8008274:	6063      	str	r3, [r4, #4]
 8008276:	e7ed      	b.n	8008254 <_ungetc_r+0xda>

08008278 <__swbuf_r>:
 8008278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827a:	460e      	mov	r6, r1
 800827c:	4614      	mov	r4, r2
 800827e:	4605      	mov	r5, r0
 8008280:	b118      	cbz	r0, 800828a <__swbuf_r+0x12>
 8008282:	6a03      	ldr	r3, [r0, #32]
 8008284:	b90b      	cbnz	r3, 800828a <__swbuf_r+0x12>
 8008286:	f7fd fc59 	bl	8005b3c <__sinit>
 800828a:	69a3      	ldr	r3, [r4, #24]
 800828c:	60a3      	str	r3, [r4, #8]
 800828e:	89a3      	ldrh	r3, [r4, #12]
 8008290:	071a      	lsls	r2, r3, #28
 8008292:	d501      	bpl.n	8008298 <__swbuf_r+0x20>
 8008294:	6923      	ldr	r3, [r4, #16]
 8008296:	b943      	cbnz	r3, 80082aa <__swbuf_r+0x32>
 8008298:	4621      	mov	r1, r4
 800829a:	4628      	mov	r0, r5
 800829c:	f000 f82a 	bl	80082f4 <__swsetup_r>
 80082a0:	b118      	cbz	r0, 80082aa <__swbuf_r+0x32>
 80082a2:	f04f 37ff 	mov.w	r7, #4294967295
 80082a6:	4638      	mov	r0, r7
 80082a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	6922      	ldr	r2, [r4, #16]
 80082ae:	1a98      	subs	r0, r3, r2
 80082b0:	6963      	ldr	r3, [r4, #20]
 80082b2:	b2f6      	uxtb	r6, r6
 80082b4:	4283      	cmp	r3, r0
 80082b6:	4637      	mov	r7, r6
 80082b8:	dc05      	bgt.n	80082c6 <__swbuf_r+0x4e>
 80082ba:	4621      	mov	r1, r4
 80082bc:	4628      	mov	r0, r5
 80082be:	f7ff fda9 	bl	8007e14 <_fflush_r>
 80082c2:	2800      	cmp	r0, #0
 80082c4:	d1ed      	bne.n	80082a2 <__swbuf_r+0x2a>
 80082c6:	68a3      	ldr	r3, [r4, #8]
 80082c8:	3b01      	subs	r3, #1
 80082ca:	60a3      	str	r3, [r4, #8]
 80082cc:	6823      	ldr	r3, [r4, #0]
 80082ce:	1c5a      	adds	r2, r3, #1
 80082d0:	6022      	str	r2, [r4, #0]
 80082d2:	701e      	strb	r6, [r3, #0]
 80082d4:	6962      	ldr	r2, [r4, #20]
 80082d6:	1c43      	adds	r3, r0, #1
 80082d8:	429a      	cmp	r2, r3
 80082da:	d004      	beq.n	80082e6 <__swbuf_r+0x6e>
 80082dc:	89a3      	ldrh	r3, [r4, #12]
 80082de:	07db      	lsls	r3, r3, #31
 80082e0:	d5e1      	bpl.n	80082a6 <__swbuf_r+0x2e>
 80082e2:	2e0a      	cmp	r6, #10
 80082e4:	d1df      	bne.n	80082a6 <__swbuf_r+0x2e>
 80082e6:	4621      	mov	r1, r4
 80082e8:	4628      	mov	r0, r5
 80082ea:	f7ff fd93 	bl	8007e14 <_fflush_r>
 80082ee:	2800      	cmp	r0, #0
 80082f0:	d0d9      	beq.n	80082a6 <__swbuf_r+0x2e>
 80082f2:	e7d6      	b.n	80082a2 <__swbuf_r+0x2a>

080082f4 <__swsetup_r>:
 80082f4:	b538      	push	{r3, r4, r5, lr}
 80082f6:	4b29      	ldr	r3, [pc, #164]	@ (800839c <__swsetup_r+0xa8>)
 80082f8:	4605      	mov	r5, r0
 80082fa:	6818      	ldr	r0, [r3, #0]
 80082fc:	460c      	mov	r4, r1
 80082fe:	b118      	cbz	r0, 8008308 <__swsetup_r+0x14>
 8008300:	6a03      	ldr	r3, [r0, #32]
 8008302:	b90b      	cbnz	r3, 8008308 <__swsetup_r+0x14>
 8008304:	f7fd fc1a 	bl	8005b3c <__sinit>
 8008308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800830c:	0719      	lsls	r1, r3, #28
 800830e:	d422      	bmi.n	8008356 <__swsetup_r+0x62>
 8008310:	06da      	lsls	r2, r3, #27
 8008312:	d407      	bmi.n	8008324 <__swsetup_r+0x30>
 8008314:	2209      	movs	r2, #9
 8008316:	602a      	str	r2, [r5, #0]
 8008318:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800831c:	81a3      	strh	r3, [r4, #12]
 800831e:	f04f 30ff 	mov.w	r0, #4294967295
 8008322:	e033      	b.n	800838c <__swsetup_r+0x98>
 8008324:	0758      	lsls	r0, r3, #29
 8008326:	d512      	bpl.n	800834e <__swsetup_r+0x5a>
 8008328:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800832a:	b141      	cbz	r1, 800833e <__swsetup_r+0x4a>
 800832c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008330:	4299      	cmp	r1, r3
 8008332:	d002      	beq.n	800833a <__swsetup_r+0x46>
 8008334:	4628      	mov	r0, r5
 8008336:	f7fe fc27 	bl	8006b88 <_free_r>
 800833a:	2300      	movs	r3, #0
 800833c:	6363      	str	r3, [r4, #52]	@ 0x34
 800833e:	89a3      	ldrh	r3, [r4, #12]
 8008340:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008344:	81a3      	strh	r3, [r4, #12]
 8008346:	2300      	movs	r3, #0
 8008348:	6063      	str	r3, [r4, #4]
 800834a:	6923      	ldr	r3, [r4, #16]
 800834c:	6023      	str	r3, [r4, #0]
 800834e:	89a3      	ldrh	r3, [r4, #12]
 8008350:	f043 0308 	orr.w	r3, r3, #8
 8008354:	81a3      	strh	r3, [r4, #12]
 8008356:	6923      	ldr	r3, [r4, #16]
 8008358:	b94b      	cbnz	r3, 800836e <__swsetup_r+0x7a>
 800835a:	89a3      	ldrh	r3, [r4, #12]
 800835c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008360:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008364:	d003      	beq.n	800836e <__swsetup_r+0x7a>
 8008366:	4621      	mov	r1, r4
 8008368:	4628      	mov	r0, r5
 800836a:	f7ff fda1 	bl	8007eb0 <__smakebuf_r>
 800836e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008372:	f013 0201 	ands.w	r2, r3, #1
 8008376:	d00a      	beq.n	800838e <__swsetup_r+0x9a>
 8008378:	2200      	movs	r2, #0
 800837a:	60a2      	str	r2, [r4, #8]
 800837c:	6962      	ldr	r2, [r4, #20]
 800837e:	4252      	negs	r2, r2
 8008380:	61a2      	str	r2, [r4, #24]
 8008382:	6922      	ldr	r2, [r4, #16]
 8008384:	b942      	cbnz	r2, 8008398 <__swsetup_r+0xa4>
 8008386:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800838a:	d1c5      	bne.n	8008318 <__swsetup_r+0x24>
 800838c:	bd38      	pop	{r3, r4, r5, pc}
 800838e:	0799      	lsls	r1, r3, #30
 8008390:	bf58      	it	pl
 8008392:	6962      	ldrpl	r2, [r4, #20]
 8008394:	60a2      	str	r2, [r4, #8]
 8008396:	e7f4      	b.n	8008382 <__swsetup_r+0x8e>
 8008398:	2000      	movs	r0, #0
 800839a:	e7f7      	b.n	800838c <__swsetup_r+0x98>
 800839c:	20000018 	.word	0x20000018

080083a0 <_fstat_r>:
 80083a0:	b538      	push	{r3, r4, r5, lr}
 80083a2:	4d07      	ldr	r5, [pc, #28]	@ (80083c0 <_fstat_r+0x20>)
 80083a4:	2300      	movs	r3, #0
 80083a6:	4604      	mov	r4, r0
 80083a8:	4608      	mov	r0, r1
 80083aa:	4611      	mov	r1, r2
 80083ac:	602b      	str	r3, [r5, #0]
 80083ae:	f7fa f80b 	bl	80023c8 <_fstat>
 80083b2:	1c43      	adds	r3, r0, #1
 80083b4:	d102      	bne.n	80083bc <_fstat_r+0x1c>
 80083b6:	682b      	ldr	r3, [r5, #0]
 80083b8:	b103      	cbz	r3, 80083bc <_fstat_r+0x1c>
 80083ba:	6023      	str	r3, [r4, #0]
 80083bc:	bd38      	pop	{r3, r4, r5, pc}
 80083be:	bf00      	nop
 80083c0:	2000041c 	.word	0x2000041c

080083c4 <_isatty_r>:
 80083c4:	b538      	push	{r3, r4, r5, lr}
 80083c6:	4d06      	ldr	r5, [pc, #24]	@ (80083e0 <_isatty_r+0x1c>)
 80083c8:	2300      	movs	r3, #0
 80083ca:	4604      	mov	r4, r0
 80083cc:	4608      	mov	r0, r1
 80083ce:	602b      	str	r3, [r5, #0]
 80083d0:	f7fa f80a 	bl	80023e8 <_isatty>
 80083d4:	1c43      	adds	r3, r0, #1
 80083d6:	d102      	bne.n	80083de <_isatty_r+0x1a>
 80083d8:	682b      	ldr	r3, [r5, #0]
 80083da:	b103      	cbz	r3, 80083de <_isatty_r+0x1a>
 80083dc:	6023      	str	r3, [r4, #0]
 80083de:	bd38      	pop	{r3, r4, r5, pc}
 80083e0:	2000041c 	.word	0x2000041c

080083e4 <_sbrk_r>:
 80083e4:	b538      	push	{r3, r4, r5, lr}
 80083e6:	4d06      	ldr	r5, [pc, #24]	@ (8008400 <_sbrk_r+0x1c>)
 80083e8:	2300      	movs	r3, #0
 80083ea:	4604      	mov	r4, r0
 80083ec:	4608      	mov	r0, r1
 80083ee:	602b      	str	r3, [r5, #0]
 80083f0:	f7fa f812 	bl	8002418 <_sbrk>
 80083f4:	1c43      	adds	r3, r0, #1
 80083f6:	d102      	bne.n	80083fe <_sbrk_r+0x1a>
 80083f8:	682b      	ldr	r3, [r5, #0]
 80083fa:	b103      	cbz	r3, 80083fe <_sbrk_r+0x1a>
 80083fc:	6023      	str	r3, [r4, #0]
 80083fe:	bd38      	pop	{r3, r4, r5, pc}
 8008400:	2000041c 	.word	0x2000041c

08008404 <memcpy>:
 8008404:	440a      	add	r2, r1
 8008406:	4291      	cmp	r1, r2
 8008408:	f100 33ff 	add.w	r3, r0, #4294967295
 800840c:	d100      	bne.n	8008410 <memcpy+0xc>
 800840e:	4770      	bx	lr
 8008410:	b510      	push	{r4, lr}
 8008412:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008416:	f803 4f01 	strb.w	r4, [r3, #1]!
 800841a:	4291      	cmp	r1, r2
 800841c:	d1f9      	bne.n	8008412 <memcpy+0xe>
 800841e:	bd10      	pop	{r4, pc}

08008420 <__assert_func>:
 8008420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008422:	4614      	mov	r4, r2
 8008424:	461a      	mov	r2, r3
 8008426:	4b09      	ldr	r3, [pc, #36]	@ (800844c <__assert_func+0x2c>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4605      	mov	r5, r0
 800842c:	68d8      	ldr	r0, [r3, #12]
 800842e:	b954      	cbnz	r4, 8008446 <__assert_func+0x26>
 8008430:	4b07      	ldr	r3, [pc, #28]	@ (8008450 <__assert_func+0x30>)
 8008432:	461c      	mov	r4, r3
 8008434:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008438:	9100      	str	r1, [sp, #0]
 800843a:	462b      	mov	r3, r5
 800843c:	4905      	ldr	r1, [pc, #20]	@ (8008454 <__assert_func+0x34>)
 800843e:	f000 f95b 	bl	80086f8 <fiprintf>
 8008442:	f000 f96b 	bl	800871c <abort>
 8008446:	4b04      	ldr	r3, [pc, #16]	@ (8008458 <__assert_func+0x38>)
 8008448:	e7f4      	b.n	8008434 <__assert_func+0x14>
 800844a:	bf00      	nop
 800844c:	20000018 	.word	0x20000018
 8008450:	08009ee1 	.word	0x08009ee1
 8008454:	08009eb3 	.word	0x08009eb3
 8008458:	08009ea6 	.word	0x08009ea6

0800845c <_calloc_r>:
 800845c:	b570      	push	{r4, r5, r6, lr}
 800845e:	fba1 5402 	umull	r5, r4, r1, r2
 8008462:	b93c      	cbnz	r4, 8008474 <_calloc_r+0x18>
 8008464:	4629      	mov	r1, r5
 8008466:	f7fe fc03 	bl	8006c70 <_malloc_r>
 800846a:	4606      	mov	r6, r0
 800846c:	b928      	cbnz	r0, 800847a <_calloc_r+0x1e>
 800846e:	2600      	movs	r6, #0
 8008470:	4630      	mov	r0, r6
 8008472:	bd70      	pop	{r4, r5, r6, pc}
 8008474:	220c      	movs	r2, #12
 8008476:	6002      	str	r2, [r0, #0]
 8008478:	e7f9      	b.n	800846e <_calloc_r+0x12>
 800847a:	462a      	mov	r2, r5
 800847c:	4621      	mov	r1, r4
 800847e:	f7fd fcb6 	bl	8005dee <memset>
 8008482:	e7f5      	b.n	8008470 <_calloc_r+0x14>

08008484 <__ascii_mbtowc>:
 8008484:	b082      	sub	sp, #8
 8008486:	b901      	cbnz	r1, 800848a <__ascii_mbtowc+0x6>
 8008488:	a901      	add	r1, sp, #4
 800848a:	b142      	cbz	r2, 800849e <__ascii_mbtowc+0x1a>
 800848c:	b14b      	cbz	r3, 80084a2 <__ascii_mbtowc+0x1e>
 800848e:	7813      	ldrb	r3, [r2, #0]
 8008490:	600b      	str	r3, [r1, #0]
 8008492:	7812      	ldrb	r2, [r2, #0]
 8008494:	1e10      	subs	r0, r2, #0
 8008496:	bf18      	it	ne
 8008498:	2001      	movne	r0, #1
 800849a:	b002      	add	sp, #8
 800849c:	4770      	bx	lr
 800849e:	4610      	mov	r0, r2
 80084a0:	e7fb      	b.n	800849a <__ascii_mbtowc+0x16>
 80084a2:	f06f 0001 	mvn.w	r0, #1
 80084a6:	e7f8      	b.n	800849a <__ascii_mbtowc+0x16>

080084a8 <_realloc_r>:
 80084a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084ac:	4680      	mov	r8, r0
 80084ae:	4615      	mov	r5, r2
 80084b0:	460c      	mov	r4, r1
 80084b2:	b921      	cbnz	r1, 80084be <_realloc_r+0x16>
 80084b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084b8:	4611      	mov	r1, r2
 80084ba:	f7fe bbd9 	b.w	8006c70 <_malloc_r>
 80084be:	b92a      	cbnz	r2, 80084cc <_realloc_r+0x24>
 80084c0:	f7fe fb62 	bl	8006b88 <_free_r>
 80084c4:	2400      	movs	r4, #0
 80084c6:	4620      	mov	r0, r4
 80084c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084cc:	f000 f92d 	bl	800872a <_malloc_usable_size_r>
 80084d0:	4285      	cmp	r5, r0
 80084d2:	4606      	mov	r6, r0
 80084d4:	d802      	bhi.n	80084dc <_realloc_r+0x34>
 80084d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80084da:	d8f4      	bhi.n	80084c6 <_realloc_r+0x1e>
 80084dc:	4629      	mov	r1, r5
 80084de:	4640      	mov	r0, r8
 80084e0:	f7fe fbc6 	bl	8006c70 <_malloc_r>
 80084e4:	4607      	mov	r7, r0
 80084e6:	2800      	cmp	r0, #0
 80084e8:	d0ec      	beq.n	80084c4 <_realloc_r+0x1c>
 80084ea:	42b5      	cmp	r5, r6
 80084ec:	462a      	mov	r2, r5
 80084ee:	4621      	mov	r1, r4
 80084f0:	bf28      	it	cs
 80084f2:	4632      	movcs	r2, r6
 80084f4:	f7ff ff86 	bl	8008404 <memcpy>
 80084f8:	4621      	mov	r1, r4
 80084fa:	4640      	mov	r0, r8
 80084fc:	f7fe fb44 	bl	8006b88 <_free_r>
 8008500:	463c      	mov	r4, r7
 8008502:	e7e0      	b.n	80084c6 <_realloc_r+0x1e>

08008504 <_strtol_l.constprop.0>:
 8008504:	2b24      	cmp	r3, #36	@ 0x24
 8008506:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800850a:	4686      	mov	lr, r0
 800850c:	4690      	mov	r8, r2
 800850e:	d801      	bhi.n	8008514 <_strtol_l.constprop.0+0x10>
 8008510:	2b01      	cmp	r3, #1
 8008512:	d106      	bne.n	8008522 <_strtol_l.constprop.0+0x1e>
 8008514:	f7fd fcbe 	bl	8005e94 <__errno>
 8008518:	2316      	movs	r3, #22
 800851a:	6003      	str	r3, [r0, #0]
 800851c:	2000      	movs	r0, #0
 800851e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008522:	4834      	ldr	r0, [pc, #208]	@ (80085f4 <_strtol_l.constprop.0+0xf0>)
 8008524:	460d      	mov	r5, r1
 8008526:	462a      	mov	r2, r5
 8008528:	f815 4b01 	ldrb.w	r4, [r5], #1
 800852c:	5d06      	ldrb	r6, [r0, r4]
 800852e:	f016 0608 	ands.w	r6, r6, #8
 8008532:	d1f8      	bne.n	8008526 <_strtol_l.constprop.0+0x22>
 8008534:	2c2d      	cmp	r4, #45	@ 0x2d
 8008536:	d12d      	bne.n	8008594 <_strtol_l.constprop.0+0x90>
 8008538:	782c      	ldrb	r4, [r5, #0]
 800853a:	2601      	movs	r6, #1
 800853c:	1c95      	adds	r5, r2, #2
 800853e:	f033 0210 	bics.w	r2, r3, #16
 8008542:	d109      	bne.n	8008558 <_strtol_l.constprop.0+0x54>
 8008544:	2c30      	cmp	r4, #48	@ 0x30
 8008546:	d12a      	bne.n	800859e <_strtol_l.constprop.0+0x9a>
 8008548:	782a      	ldrb	r2, [r5, #0]
 800854a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800854e:	2a58      	cmp	r2, #88	@ 0x58
 8008550:	d125      	bne.n	800859e <_strtol_l.constprop.0+0x9a>
 8008552:	786c      	ldrb	r4, [r5, #1]
 8008554:	2310      	movs	r3, #16
 8008556:	3502      	adds	r5, #2
 8008558:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800855c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008560:	2200      	movs	r2, #0
 8008562:	fbbc f9f3 	udiv	r9, ip, r3
 8008566:	4610      	mov	r0, r2
 8008568:	fb03 ca19 	mls	sl, r3, r9, ip
 800856c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008570:	2f09      	cmp	r7, #9
 8008572:	d81b      	bhi.n	80085ac <_strtol_l.constprop.0+0xa8>
 8008574:	463c      	mov	r4, r7
 8008576:	42a3      	cmp	r3, r4
 8008578:	dd27      	ble.n	80085ca <_strtol_l.constprop.0+0xc6>
 800857a:	1c57      	adds	r7, r2, #1
 800857c:	d007      	beq.n	800858e <_strtol_l.constprop.0+0x8a>
 800857e:	4581      	cmp	r9, r0
 8008580:	d320      	bcc.n	80085c4 <_strtol_l.constprop.0+0xc0>
 8008582:	d101      	bne.n	8008588 <_strtol_l.constprop.0+0x84>
 8008584:	45a2      	cmp	sl, r4
 8008586:	db1d      	blt.n	80085c4 <_strtol_l.constprop.0+0xc0>
 8008588:	fb00 4003 	mla	r0, r0, r3, r4
 800858c:	2201      	movs	r2, #1
 800858e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008592:	e7eb      	b.n	800856c <_strtol_l.constprop.0+0x68>
 8008594:	2c2b      	cmp	r4, #43	@ 0x2b
 8008596:	bf04      	itt	eq
 8008598:	782c      	ldrbeq	r4, [r5, #0]
 800859a:	1c95      	addeq	r5, r2, #2
 800859c:	e7cf      	b.n	800853e <_strtol_l.constprop.0+0x3a>
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1da      	bne.n	8008558 <_strtol_l.constprop.0+0x54>
 80085a2:	2c30      	cmp	r4, #48	@ 0x30
 80085a4:	bf0c      	ite	eq
 80085a6:	2308      	moveq	r3, #8
 80085a8:	230a      	movne	r3, #10
 80085aa:	e7d5      	b.n	8008558 <_strtol_l.constprop.0+0x54>
 80085ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80085b0:	2f19      	cmp	r7, #25
 80085b2:	d801      	bhi.n	80085b8 <_strtol_l.constprop.0+0xb4>
 80085b4:	3c37      	subs	r4, #55	@ 0x37
 80085b6:	e7de      	b.n	8008576 <_strtol_l.constprop.0+0x72>
 80085b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80085bc:	2f19      	cmp	r7, #25
 80085be:	d804      	bhi.n	80085ca <_strtol_l.constprop.0+0xc6>
 80085c0:	3c57      	subs	r4, #87	@ 0x57
 80085c2:	e7d8      	b.n	8008576 <_strtol_l.constprop.0+0x72>
 80085c4:	f04f 32ff 	mov.w	r2, #4294967295
 80085c8:	e7e1      	b.n	800858e <_strtol_l.constprop.0+0x8a>
 80085ca:	1c53      	adds	r3, r2, #1
 80085cc:	d108      	bne.n	80085e0 <_strtol_l.constprop.0+0xdc>
 80085ce:	2322      	movs	r3, #34	@ 0x22
 80085d0:	f8ce 3000 	str.w	r3, [lr]
 80085d4:	4660      	mov	r0, ip
 80085d6:	f1b8 0f00 	cmp.w	r8, #0
 80085da:	d0a0      	beq.n	800851e <_strtol_l.constprop.0+0x1a>
 80085dc:	1e69      	subs	r1, r5, #1
 80085de:	e006      	b.n	80085ee <_strtol_l.constprop.0+0xea>
 80085e0:	b106      	cbz	r6, 80085e4 <_strtol_l.constprop.0+0xe0>
 80085e2:	4240      	negs	r0, r0
 80085e4:	f1b8 0f00 	cmp.w	r8, #0
 80085e8:	d099      	beq.n	800851e <_strtol_l.constprop.0+0x1a>
 80085ea:	2a00      	cmp	r2, #0
 80085ec:	d1f6      	bne.n	80085dc <_strtol_l.constprop.0+0xd8>
 80085ee:	f8c8 1000 	str.w	r1, [r8]
 80085f2:	e794      	b.n	800851e <_strtol_l.constprop.0+0x1a>
 80085f4:	08009ee3 	.word	0x08009ee3

080085f8 <_strtol_r>:
 80085f8:	f7ff bf84 	b.w	8008504 <_strtol_l.constprop.0>

080085fc <_strtoul_l.constprop.0>:
 80085fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008600:	4e34      	ldr	r6, [pc, #208]	@ (80086d4 <_strtoul_l.constprop.0+0xd8>)
 8008602:	4686      	mov	lr, r0
 8008604:	460d      	mov	r5, r1
 8008606:	4628      	mov	r0, r5
 8008608:	f815 4b01 	ldrb.w	r4, [r5], #1
 800860c:	5d37      	ldrb	r7, [r6, r4]
 800860e:	f017 0708 	ands.w	r7, r7, #8
 8008612:	d1f8      	bne.n	8008606 <_strtoul_l.constprop.0+0xa>
 8008614:	2c2d      	cmp	r4, #45	@ 0x2d
 8008616:	d12f      	bne.n	8008678 <_strtoul_l.constprop.0+0x7c>
 8008618:	782c      	ldrb	r4, [r5, #0]
 800861a:	2701      	movs	r7, #1
 800861c:	1c85      	adds	r5, r0, #2
 800861e:	f033 0010 	bics.w	r0, r3, #16
 8008622:	d109      	bne.n	8008638 <_strtoul_l.constprop.0+0x3c>
 8008624:	2c30      	cmp	r4, #48	@ 0x30
 8008626:	d12c      	bne.n	8008682 <_strtoul_l.constprop.0+0x86>
 8008628:	7828      	ldrb	r0, [r5, #0]
 800862a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800862e:	2858      	cmp	r0, #88	@ 0x58
 8008630:	d127      	bne.n	8008682 <_strtoul_l.constprop.0+0x86>
 8008632:	786c      	ldrb	r4, [r5, #1]
 8008634:	2310      	movs	r3, #16
 8008636:	3502      	adds	r5, #2
 8008638:	f04f 38ff 	mov.w	r8, #4294967295
 800863c:	2600      	movs	r6, #0
 800863e:	fbb8 f8f3 	udiv	r8, r8, r3
 8008642:	fb03 f908 	mul.w	r9, r3, r8
 8008646:	ea6f 0909 	mvn.w	r9, r9
 800864a:	4630      	mov	r0, r6
 800864c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008650:	f1bc 0f09 	cmp.w	ip, #9
 8008654:	d81c      	bhi.n	8008690 <_strtoul_l.constprop.0+0x94>
 8008656:	4664      	mov	r4, ip
 8008658:	42a3      	cmp	r3, r4
 800865a:	dd2a      	ble.n	80086b2 <_strtoul_l.constprop.0+0xb6>
 800865c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008660:	d007      	beq.n	8008672 <_strtoul_l.constprop.0+0x76>
 8008662:	4580      	cmp	r8, r0
 8008664:	d322      	bcc.n	80086ac <_strtoul_l.constprop.0+0xb0>
 8008666:	d101      	bne.n	800866c <_strtoul_l.constprop.0+0x70>
 8008668:	45a1      	cmp	r9, r4
 800866a:	db1f      	blt.n	80086ac <_strtoul_l.constprop.0+0xb0>
 800866c:	fb00 4003 	mla	r0, r0, r3, r4
 8008670:	2601      	movs	r6, #1
 8008672:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008676:	e7e9      	b.n	800864c <_strtoul_l.constprop.0+0x50>
 8008678:	2c2b      	cmp	r4, #43	@ 0x2b
 800867a:	bf04      	itt	eq
 800867c:	782c      	ldrbeq	r4, [r5, #0]
 800867e:	1c85      	addeq	r5, r0, #2
 8008680:	e7cd      	b.n	800861e <_strtoul_l.constprop.0+0x22>
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1d8      	bne.n	8008638 <_strtoul_l.constprop.0+0x3c>
 8008686:	2c30      	cmp	r4, #48	@ 0x30
 8008688:	bf0c      	ite	eq
 800868a:	2308      	moveq	r3, #8
 800868c:	230a      	movne	r3, #10
 800868e:	e7d3      	b.n	8008638 <_strtoul_l.constprop.0+0x3c>
 8008690:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8008694:	f1bc 0f19 	cmp.w	ip, #25
 8008698:	d801      	bhi.n	800869e <_strtoul_l.constprop.0+0xa2>
 800869a:	3c37      	subs	r4, #55	@ 0x37
 800869c:	e7dc      	b.n	8008658 <_strtoul_l.constprop.0+0x5c>
 800869e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80086a2:	f1bc 0f19 	cmp.w	ip, #25
 80086a6:	d804      	bhi.n	80086b2 <_strtoul_l.constprop.0+0xb6>
 80086a8:	3c57      	subs	r4, #87	@ 0x57
 80086aa:	e7d5      	b.n	8008658 <_strtoul_l.constprop.0+0x5c>
 80086ac:	f04f 36ff 	mov.w	r6, #4294967295
 80086b0:	e7df      	b.n	8008672 <_strtoul_l.constprop.0+0x76>
 80086b2:	1c73      	adds	r3, r6, #1
 80086b4:	d106      	bne.n	80086c4 <_strtoul_l.constprop.0+0xc8>
 80086b6:	2322      	movs	r3, #34	@ 0x22
 80086b8:	f8ce 3000 	str.w	r3, [lr]
 80086bc:	4630      	mov	r0, r6
 80086be:	b932      	cbnz	r2, 80086ce <_strtoul_l.constprop.0+0xd2>
 80086c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086c4:	b107      	cbz	r7, 80086c8 <_strtoul_l.constprop.0+0xcc>
 80086c6:	4240      	negs	r0, r0
 80086c8:	2a00      	cmp	r2, #0
 80086ca:	d0f9      	beq.n	80086c0 <_strtoul_l.constprop.0+0xc4>
 80086cc:	b106      	cbz	r6, 80086d0 <_strtoul_l.constprop.0+0xd4>
 80086ce:	1e69      	subs	r1, r5, #1
 80086d0:	6011      	str	r1, [r2, #0]
 80086d2:	e7f5      	b.n	80086c0 <_strtoul_l.constprop.0+0xc4>
 80086d4:	08009ee3 	.word	0x08009ee3

080086d8 <_strtoul_r>:
 80086d8:	f7ff bf90 	b.w	80085fc <_strtoul_l.constprop.0>

080086dc <__ascii_wctomb>:
 80086dc:	4603      	mov	r3, r0
 80086de:	4608      	mov	r0, r1
 80086e0:	b141      	cbz	r1, 80086f4 <__ascii_wctomb+0x18>
 80086e2:	2aff      	cmp	r2, #255	@ 0xff
 80086e4:	d904      	bls.n	80086f0 <__ascii_wctomb+0x14>
 80086e6:	228a      	movs	r2, #138	@ 0x8a
 80086e8:	601a      	str	r2, [r3, #0]
 80086ea:	f04f 30ff 	mov.w	r0, #4294967295
 80086ee:	4770      	bx	lr
 80086f0:	700a      	strb	r2, [r1, #0]
 80086f2:	2001      	movs	r0, #1
 80086f4:	4770      	bx	lr
	...

080086f8 <fiprintf>:
 80086f8:	b40e      	push	{r1, r2, r3}
 80086fa:	b503      	push	{r0, r1, lr}
 80086fc:	4601      	mov	r1, r0
 80086fe:	ab03      	add	r3, sp, #12
 8008700:	4805      	ldr	r0, [pc, #20]	@ (8008718 <fiprintf+0x20>)
 8008702:	f853 2b04 	ldr.w	r2, [r3], #4
 8008706:	6800      	ldr	r0, [r0, #0]
 8008708:	9301      	str	r3, [sp, #4]
 800870a:	f7fe fee9 	bl	80074e0 <_vfiprintf_r>
 800870e:	b002      	add	sp, #8
 8008710:	f85d eb04 	ldr.w	lr, [sp], #4
 8008714:	b003      	add	sp, #12
 8008716:	4770      	bx	lr
 8008718:	20000018 	.word	0x20000018

0800871c <abort>:
 800871c:	b508      	push	{r3, lr}
 800871e:	2006      	movs	r0, #6
 8008720:	f000 f834 	bl	800878c <raise>
 8008724:	2001      	movs	r0, #1
 8008726:	f7f9 fdff 	bl	8002328 <_exit>

0800872a <_malloc_usable_size_r>:
 800872a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800872e:	1f18      	subs	r0, r3, #4
 8008730:	2b00      	cmp	r3, #0
 8008732:	bfbc      	itt	lt
 8008734:	580b      	ldrlt	r3, [r1, r0]
 8008736:	18c0      	addlt	r0, r0, r3
 8008738:	4770      	bx	lr

0800873a <_raise_r>:
 800873a:	291f      	cmp	r1, #31
 800873c:	b538      	push	{r3, r4, r5, lr}
 800873e:	4605      	mov	r5, r0
 8008740:	460c      	mov	r4, r1
 8008742:	d904      	bls.n	800874e <_raise_r+0x14>
 8008744:	2316      	movs	r3, #22
 8008746:	6003      	str	r3, [r0, #0]
 8008748:	f04f 30ff 	mov.w	r0, #4294967295
 800874c:	bd38      	pop	{r3, r4, r5, pc}
 800874e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008750:	b112      	cbz	r2, 8008758 <_raise_r+0x1e>
 8008752:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008756:	b94b      	cbnz	r3, 800876c <_raise_r+0x32>
 8008758:	4628      	mov	r0, r5
 800875a:	f000 f831 	bl	80087c0 <_getpid_r>
 800875e:	4622      	mov	r2, r4
 8008760:	4601      	mov	r1, r0
 8008762:	4628      	mov	r0, r5
 8008764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008768:	f000 b818 	b.w	800879c <_kill_r>
 800876c:	2b01      	cmp	r3, #1
 800876e:	d00a      	beq.n	8008786 <_raise_r+0x4c>
 8008770:	1c59      	adds	r1, r3, #1
 8008772:	d103      	bne.n	800877c <_raise_r+0x42>
 8008774:	2316      	movs	r3, #22
 8008776:	6003      	str	r3, [r0, #0]
 8008778:	2001      	movs	r0, #1
 800877a:	e7e7      	b.n	800874c <_raise_r+0x12>
 800877c:	2100      	movs	r1, #0
 800877e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008782:	4620      	mov	r0, r4
 8008784:	4798      	blx	r3
 8008786:	2000      	movs	r0, #0
 8008788:	e7e0      	b.n	800874c <_raise_r+0x12>
	...

0800878c <raise>:
 800878c:	4b02      	ldr	r3, [pc, #8]	@ (8008798 <raise+0xc>)
 800878e:	4601      	mov	r1, r0
 8008790:	6818      	ldr	r0, [r3, #0]
 8008792:	f7ff bfd2 	b.w	800873a <_raise_r>
 8008796:	bf00      	nop
 8008798:	20000018 	.word	0x20000018

0800879c <_kill_r>:
 800879c:	b538      	push	{r3, r4, r5, lr}
 800879e:	4d07      	ldr	r5, [pc, #28]	@ (80087bc <_kill_r+0x20>)
 80087a0:	2300      	movs	r3, #0
 80087a2:	4604      	mov	r4, r0
 80087a4:	4608      	mov	r0, r1
 80087a6:	4611      	mov	r1, r2
 80087a8:	602b      	str	r3, [r5, #0]
 80087aa:	f7f9 fdad 	bl	8002308 <_kill>
 80087ae:	1c43      	adds	r3, r0, #1
 80087b0:	d102      	bne.n	80087b8 <_kill_r+0x1c>
 80087b2:	682b      	ldr	r3, [r5, #0]
 80087b4:	b103      	cbz	r3, 80087b8 <_kill_r+0x1c>
 80087b6:	6023      	str	r3, [r4, #0]
 80087b8:	bd38      	pop	{r3, r4, r5, pc}
 80087ba:	bf00      	nop
 80087bc:	2000041c 	.word	0x2000041c

080087c0 <_getpid_r>:
 80087c0:	f7f9 bd9a 	b.w	80022f8 <_getpid>

080087c4 <acosf>:
 80087c4:	b508      	push	{r3, lr}
 80087c6:	ed2d 8b02 	vpush	{d8}
 80087ca:	eeb0 8a40 	vmov.f32	s16, s0
 80087ce:	f000 f9e1 	bl	8008b94 <__ieee754_acosf>
 80087d2:	eeb4 8a48 	vcmp.f32	s16, s16
 80087d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087da:	eef0 8a40 	vmov.f32	s17, s0
 80087de:	d615      	bvs.n	800880c <acosf+0x48>
 80087e0:	eeb0 0a48 	vmov.f32	s0, s16
 80087e4:	f000 f8d4 	bl	8008990 <fabsf>
 80087e8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80087ec:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80087f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087f4:	dd0a      	ble.n	800880c <acosf+0x48>
 80087f6:	f7fd fb4d 	bl	8005e94 <__errno>
 80087fa:	ecbd 8b02 	vpop	{d8}
 80087fe:	2321      	movs	r3, #33	@ 0x21
 8008800:	6003      	str	r3, [r0, #0]
 8008802:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008806:	4804      	ldr	r0, [pc, #16]	@ (8008818 <acosf+0x54>)
 8008808:	f000 b91a 	b.w	8008a40 <nanf>
 800880c:	eeb0 0a68 	vmov.f32	s0, s17
 8008810:	ecbd 8b02 	vpop	{d8}
 8008814:	bd08      	pop	{r3, pc}
 8008816:	bf00      	nop
 8008818:	08009ee1 	.word	0x08009ee1

0800881c <powf>:
 800881c:	b508      	push	{r3, lr}
 800881e:	ed2d 8b04 	vpush	{d8-d9}
 8008822:	eeb0 8a60 	vmov.f32	s16, s1
 8008826:	eeb0 9a40 	vmov.f32	s18, s0
 800882a:	f000 faab 	bl	8008d84 <__ieee754_powf>
 800882e:	eeb4 8a48 	vcmp.f32	s16, s16
 8008832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008836:	eef0 8a40 	vmov.f32	s17, s0
 800883a:	d63e      	bvs.n	80088ba <powf+0x9e>
 800883c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8008840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008844:	d112      	bne.n	800886c <powf+0x50>
 8008846:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800884a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800884e:	d039      	beq.n	80088c4 <powf+0xa8>
 8008850:	eeb0 0a48 	vmov.f32	s0, s16
 8008854:	f000 f8ea 	bl	8008a2c <finitef>
 8008858:	b378      	cbz	r0, 80088ba <powf+0x9e>
 800885a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800885e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008862:	d52a      	bpl.n	80088ba <powf+0x9e>
 8008864:	f7fd fb16 	bl	8005e94 <__errno>
 8008868:	2322      	movs	r3, #34	@ 0x22
 800886a:	e014      	b.n	8008896 <powf+0x7a>
 800886c:	f000 f8de 	bl	8008a2c <finitef>
 8008870:	b998      	cbnz	r0, 800889a <powf+0x7e>
 8008872:	eeb0 0a49 	vmov.f32	s0, s18
 8008876:	f000 f8d9 	bl	8008a2c <finitef>
 800887a:	b170      	cbz	r0, 800889a <powf+0x7e>
 800887c:	eeb0 0a48 	vmov.f32	s0, s16
 8008880:	f000 f8d4 	bl	8008a2c <finitef>
 8008884:	b148      	cbz	r0, 800889a <powf+0x7e>
 8008886:	eef4 8a68 	vcmp.f32	s17, s17
 800888a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800888e:	d7e9      	bvc.n	8008864 <powf+0x48>
 8008890:	f7fd fb00 	bl	8005e94 <__errno>
 8008894:	2321      	movs	r3, #33	@ 0x21
 8008896:	6003      	str	r3, [r0, #0]
 8008898:	e00f      	b.n	80088ba <powf+0x9e>
 800889a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800889e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088a2:	d10a      	bne.n	80088ba <powf+0x9e>
 80088a4:	eeb0 0a49 	vmov.f32	s0, s18
 80088a8:	f000 f8c0 	bl	8008a2c <finitef>
 80088ac:	b128      	cbz	r0, 80088ba <powf+0x9e>
 80088ae:	eeb0 0a48 	vmov.f32	s0, s16
 80088b2:	f000 f8bb 	bl	8008a2c <finitef>
 80088b6:	2800      	cmp	r0, #0
 80088b8:	d1d4      	bne.n	8008864 <powf+0x48>
 80088ba:	eeb0 0a68 	vmov.f32	s0, s17
 80088be:	ecbd 8b04 	vpop	{d8-d9}
 80088c2:	bd08      	pop	{r3, pc}
 80088c4:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80088c8:	e7f7      	b.n	80088ba <powf+0x9e>
	...

080088cc <sqrtf>:
 80088cc:	b508      	push	{r3, lr}
 80088ce:	ed2d 8b02 	vpush	{d8}
 80088d2:	eeb0 8a40 	vmov.f32	s16, s0
 80088d6:	f000 f8b9 	bl	8008a4c <__ieee754_sqrtf>
 80088da:	eeb4 8a48 	vcmp.f32	s16, s16
 80088de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e2:	d60c      	bvs.n	80088fe <sqrtf+0x32>
 80088e4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8008904 <sqrtf+0x38>
 80088e8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80088ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088f0:	d505      	bpl.n	80088fe <sqrtf+0x32>
 80088f2:	f7fd facf 	bl	8005e94 <__errno>
 80088f6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80088fa:	2321      	movs	r3, #33	@ 0x21
 80088fc:	6003      	str	r3, [r0, #0]
 80088fe:	ecbd 8b02 	vpop	{d8}
 8008902:	bd08      	pop	{r3, pc}
 8008904:	00000000 	.word	0x00000000

08008908 <cosf>:
 8008908:	ee10 3a10 	vmov	r3, s0
 800890c:	b507      	push	{r0, r1, r2, lr}
 800890e:	4a1e      	ldr	r2, [pc, #120]	@ (8008988 <cosf+0x80>)
 8008910:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008914:	4293      	cmp	r3, r2
 8008916:	d806      	bhi.n	8008926 <cosf+0x1e>
 8008918:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800898c <cosf+0x84>
 800891c:	b003      	add	sp, #12
 800891e:	f85d eb04 	ldr.w	lr, [sp], #4
 8008922:	f000 b897 	b.w	8008a54 <__kernel_cosf>
 8008926:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800892a:	d304      	bcc.n	8008936 <cosf+0x2e>
 800892c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008930:	b003      	add	sp, #12
 8008932:	f85d fb04 	ldr.w	pc, [sp], #4
 8008936:	4668      	mov	r0, sp
 8008938:	f000 fcf4 	bl	8009324 <__ieee754_rem_pio2f>
 800893c:	f000 0003 	and.w	r0, r0, #3
 8008940:	2801      	cmp	r0, #1
 8008942:	d009      	beq.n	8008958 <cosf+0x50>
 8008944:	2802      	cmp	r0, #2
 8008946:	d010      	beq.n	800896a <cosf+0x62>
 8008948:	b9b0      	cbnz	r0, 8008978 <cosf+0x70>
 800894a:	eddd 0a01 	vldr	s1, [sp, #4]
 800894e:	ed9d 0a00 	vldr	s0, [sp]
 8008952:	f000 f87f 	bl	8008a54 <__kernel_cosf>
 8008956:	e7eb      	b.n	8008930 <cosf+0x28>
 8008958:	eddd 0a01 	vldr	s1, [sp, #4]
 800895c:	ed9d 0a00 	vldr	s0, [sp]
 8008960:	f000 f8d0 	bl	8008b04 <__kernel_sinf>
 8008964:	eeb1 0a40 	vneg.f32	s0, s0
 8008968:	e7e2      	b.n	8008930 <cosf+0x28>
 800896a:	eddd 0a01 	vldr	s1, [sp, #4]
 800896e:	ed9d 0a00 	vldr	s0, [sp]
 8008972:	f000 f86f 	bl	8008a54 <__kernel_cosf>
 8008976:	e7f5      	b.n	8008964 <cosf+0x5c>
 8008978:	eddd 0a01 	vldr	s1, [sp, #4]
 800897c:	ed9d 0a00 	vldr	s0, [sp]
 8008980:	2001      	movs	r0, #1
 8008982:	f000 f8bf 	bl	8008b04 <__kernel_sinf>
 8008986:	e7d3      	b.n	8008930 <cosf+0x28>
 8008988:	3f490fd8 	.word	0x3f490fd8
 800898c:	00000000 	.word	0x00000000

08008990 <fabsf>:
 8008990:	ee10 3a10 	vmov	r3, s0
 8008994:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008998:	ee00 3a10 	vmov	s0, r3
 800899c:	4770      	bx	lr
	...

080089a0 <sinf>:
 80089a0:	ee10 3a10 	vmov	r3, s0
 80089a4:	b507      	push	{r0, r1, r2, lr}
 80089a6:	4a1f      	ldr	r2, [pc, #124]	@ (8008a24 <sinf+0x84>)
 80089a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d807      	bhi.n	80089c0 <sinf+0x20>
 80089b0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8008a28 <sinf+0x88>
 80089b4:	2000      	movs	r0, #0
 80089b6:	b003      	add	sp, #12
 80089b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80089bc:	f000 b8a2 	b.w	8008b04 <__kernel_sinf>
 80089c0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80089c4:	d304      	bcc.n	80089d0 <sinf+0x30>
 80089c6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80089ca:	b003      	add	sp, #12
 80089cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80089d0:	4668      	mov	r0, sp
 80089d2:	f000 fca7 	bl	8009324 <__ieee754_rem_pio2f>
 80089d6:	f000 0003 	and.w	r0, r0, #3
 80089da:	2801      	cmp	r0, #1
 80089dc:	d00a      	beq.n	80089f4 <sinf+0x54>
 80089de:	2802      	cmp	r0, #2
 80089e0:	d00f      	beq.n	8008a02 <sinf+0x62>
 80089e2:	b9c0      	cbnz	r0, 8008a16 <sinf+0x76>
 80089e4:	eddd 0a01 	vldr	s1, [sp, #4]
 80089e8:	ed9d 0a00 	vldr	s0, [sp]
 80089ec:	2001      	movs	r0, #1
 80089ee:	f000 f889 	bl	8008b04 <__kernel_sinf>
 80089f2:	e7ea      	b.n	80089ca <sinf+0x2a>
 80089f4:	eddd 0a01 	vldr	s1, [sp, #4]
 80089f8:	ed9d 0a00 	vldr	s0, [sp]
 80089fc:	f000 f82a 	bl	8008a54 <__kernel_cosf>
 8008a00:	e7e3      	b.n	80089ca <sinf+0x2a>
 8008a02:	eddd 0a01 	vldr	s1, [sp, #4]
 8008a06:	ed9d 0a00 	vldr	s0, [sp]
 8008a0a:	2001      	movs	r0, #1
 8008a0c:	f000 f87a 	bl	8008b04 <__kernel_sinf>
 8008a10:	eeb1 0a40 	vneg.f32	s0, s0
 8008a14:	e7d9      	b.n	80089ca <sinf+0x2a>
 8008a16:	eddd 0a01 	vldr	s1, [sp, #4]
 8008a1a:	ed9d 0a00 	vldr	s0, [sp]
 8008a1e:	f000 f819 	bl	8008a54 <__kernel_cosf>
 8008a22:	e7f5      	b.n	8008a10 <sinf+0x70>
 8008a24:	3f490fd8 	.word	0x3f490fd8
 8008a28:	00000000 	.word	0x00000000

08008a2c <finitef>:
 8008a2c:	ee10 3a10 	vmov	r3, s0
 8008a30:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8008a34:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8008a38:	bfac      	ite	ge
 8008a3a:	2000      	movge	r0, #0
 8008a3c:	2001      	movlt	r0, #1
 8008a3e:	4770      	bx	lr

08008a40 <nanf>:
 8008a40:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008a48 <nanf+0x8>
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	7fc00000 	.word	0x7fc00000

08008a4c <__ieee754_sqrtf>:
 8008a4c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008a50:	4770      	bx	lr
	...

08008a54 <__kernel_cosf>:
 8008a54:	ee10 3a10 	vmov	r3, s0
 8008a58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a5c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8008a60:	eef0 6a40 	vmov.f32	s13, s0
 8008a64:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008a68:	d204      	bcs.n	8008a74 <__kernel_cosf+0x20>
 8008a6a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8008a6e:	ee17 2a90 	vmov	r2, s15
 8008a72:	b342      	cbz	r2, 8008ac6 <__kernel_cosf+0x72>
 8008a74:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8008a78:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8008ae4 <__kernel_cosf+0x90>
 8008a7c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8008ae8 <__kernel_cosf+0x94>
 8008a80:	4a1a      	ldr	r2, [pc, #104]	@ (8008aec <__kernel_cosf+0x98>)
 8008a82:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008a86:	4293      	cmp	r3, r2
 8008a88:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008af0 <__kernel_cosf+0x9c>
 8008a8c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008a90:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8008af4 <__kernel_cosf+0xa0>
 8008a94:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008a98:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8008af8 <__kernel_cosf+0xa4>
 8008a9c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008aa0:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8008afc <__kernel_cosf+0xa8>
 8008aa4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008aa8:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8008aac:	ee26 6a07 	vmul.f32	s12, s12, s14
 8008ab0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008ab4:	eee7 0a06 	vfma.f32	s1, s14, s12
 8008ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008abc:	d804      	bhi.n	8008ac8 <__kernel_cosf+0x74>
 8008abe:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008ac2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008ac6:	4770      	bx	lr
 8008ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8008b00 <__kernel_cosf+0xac>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	bf9a      	itte	ls
 8008ace:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8008ad2:	ee07 3a10 	vmovls	s14, r3
 8008ad6:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8008ada:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008ade:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008ae2:	e7ec      	b.n	8008abe <__kernel_cosf+0x6a>
 8008ae4:	ad47d74e 	.word	0xad47d74e
 8008ae8:	310f74f6 	.word	0x310f74f6
 8008aec:	3e999999 	.word	0x3e999999
 8008af0:	b493f27c 	.word	0xb493f27c
 8008af4:	37d00d01 	.word	0x37d00d01
 8008af8:	bab60b61 	.word	0xbab60b61
 8008afc:	3d2aaaab 	.word	0x3d2aaaab
 8008b00:	3f480000 	.word	0x3f480000

08008b04 <__kernel_sinf>:
 8008b04:	ee10 3a10 	vmov	r3, s0
 8008b08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b0c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8008b10:	d204      	bcs.n	8008b1c <__kernel_sinf+0x18>
 8008b12:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008b16:	ee17 3a90 	vmov	r3, s15
 8008b1a:	b35b      	cbz	r3, 8008b74 <__kernel_sinf+0x70>
 8008b1c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008b20:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8008b78 <__kernel_sinf+0x74>
 8008b24:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8008b7c <__kernel_sinf+0x78>
 8008b28:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008b2c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8008b80 <__kernel_sinf+0x7c>
 8008b30:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008b34:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8008b84 <__kernel_sinf+0x80>
 8008b38:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008b3c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8008b88 <__kernel_sinf+0x84>
 8008b40:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008b44:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008b48:	b930      	cbnz	r0, 8008b58 <__kernel_sinf+0x54>
 8008b4a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8008b8c <__kernel_sinf+0x88>
 8008b4e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008b52:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008b56:	4770      	bx	lr
 8008b58:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008b5c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8008b60:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008b64:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008b68:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8008b90 <__kernel_sinf+0x8c>
 8008b6c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008b70:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	2f2ec9d3 	.word	0x2f2ec9d3
 8008b7c:	b2d72f34 	.word	0xb2d72f34
 8008b80:	3638ef1b 	.word	0x3638ef1b
 8008b84:	b9500d01 	.word	0xb9500d01
 8008b88:	3c088889 	.word	0x3c088889
 8008b8c:	be2aaaab 	.word	0xbe2aaaab
 8008b90:	3e2aaaab 	.word	0x3e2aaaab

08008b94 <__ieee754_acosf>:
 8008b94:	b508      	push	{r3, lr}
 8008b96:	ee10 3a10 	vmov	r3, s0
 8008b9a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008b9e:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8008ba2:	ed2d 8b0c 	vpush	{d8-d13}
 8008ba6:	d10a      	bne.n	8008bbe <__ieee754_acosf+0x2a>
 8008ba8:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 8008d40 <__ieee754_acosf+0x1ac>
 8008bac:	eddf 7a65 	vldr	s15, [pc, #404]	@ 8008d44 <__ieee754_acosf+0x1b0>
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	bfc8      	it	gt
 8008bb4:	eeb0 0a67 	vmovgt.f32	s0, s15
 8008bb8:	ecbd 8b0c 	vpop	{d8-d13}
 8008bbc:	bd08      	pop	{r3, pc}
 8008bbe:	d904      	bls.n	8008bca <__ieee754_acosf+0x36>
 8008bc0:	ee30 8a40 	vsub.f32	s16, s0, s0
 8008bc4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8008bc8:	e7f6      	b.n	8008bb8 <__ieee754_acosf+0x24>
 8008bca:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 8008bce:	d23c      	bcs.n	8008c4a <__ieee754_acosf+0xb6>
 8008bd0:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8008bd4:	f240 80b1 	bls.w	8008d3a <__ieee754_acosf+0x1a6>
 8008bd8:	ee60 7a00 	vmul.f32	s15, s0, s0
 8008bdc:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8008d48 <__ieee754_acosf+0x1b4>
 8008be0:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8008d4c <__ieee754_acosf+0x1b8>
 8008be4:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 8008d50 <__ieee754_acosf+0x1bc>
 8008be8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8008bec:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8008d54 <__ieee754_acosf+0x1c0>
 8008bf0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008bf4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8008d58 <__ieee754_acosf+0x1c4>
 8008bf8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008bfc:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8008d5c <__ieee754_acosf+0x1c8>
 8008c00:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008c04:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8008d60 <__ieee754_acosf+0x1cc>
 8008c08:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008c0c:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8008d64 <__ieee754_acosf+0x1d0>
 8008c10:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8008c14:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8008d68 <__ieee754_acosf+0x1d4>
 8008c18:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008c1c:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 8008d6c <__ieee754_acosf+0x1d8>
 8008c20:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8008c24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c28:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008c2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008c30:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 8008d70 <__ieee754_acosf+0x1dc>
 8008c34:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8008c38:	eee0 7a46 	vfms.f32	s15, s0, s12
 8008c3c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008c40:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8008d74 <__ieee754_acosf+0x1e0>
 8008c44:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008c48:	e7b6      	b.n	8008bb8 <__ieee754_acosf+0x24>
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	eddf da3e 	vldr	s27, [pc, #248]	@ 8008d48 <__ieee754_acosf+0x1b4>
 8008c50:	eddf ca3e 	vldr	s25, [pc, #248]	@ 8008d4c <__ieee754_acosf+0x1b8>
 8008c54:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 8008d54 <__ieee754_acosf+0x1c0>
 8008c58:	eddf ba3f 	vldr	s23, [pc, #252]	@ 8008d58 <__ieee754_acosf+0x1c4>
 8008c5c:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 8008d5c <__ieee754_acosf+0x1c8>
 8008c60:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 8008d60 <__ieee754_acosf+0x1cc>
 8008c64:	ed9f da3f 	vldr	s26, [pc, #252]	@ 8008d64 <__ieee754_acosf+0x1d0>
 8008c68:	eddf aa39 	vldr	s21, [pc, #228]	@ 8008d50 <__ieee754_acosf+0x1bc>
 8008c6c:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 8008d68 <__ieee754_acosf+0x1d4>
 8008c70:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 8008d6c <__ieee754_acosf+0x1d8>
 8008c74:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8008c78:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008c7c:	da28      	bge.n	8008cd0 <__ieee754_acosf+0x13c>
 8008c7e:	ee30 8a09 	vadd.f32	s16, s0, s18
 8008c82:	ee28 0a27 	vmul.f32	s0, s16, s15
 8008c86:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8008c8a:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8008c8e:	eeac ca80 	vfma.f32	s24, s25, s0
 8008c92:	eeaa aa80 	vfma.f32	s20, s21, s0
 8008c96:	eeec ba00 	vfma.f32	s23, s24, s0
 8008c9a:	eeea 9a00 	vfma.f32	s19, s20, s0
 8008c9e:	eeab ba80 	vfma.f32	s22, s23, s0
 8008ca2:	eea9 9a80 	vfma.f32	s18, s19, s0
 8008ca6:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8008caa:	ee68 8a80 	vmul.f32	s17, s17, s0
 8008cae:	f7ff fecd 	bl	8008a4c <__ieee754_sqrtf>
 8008cb2:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8008cb6:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8008d78 <__ieee754_acosf+0x1e4>
 8008cba:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008cbe:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8008cc2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008cc6:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8008d7c <__ieee754_acosf+0x1e8>
 8008cca:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008cce:	e773      	b.n	8008bb8 <__ieee754_acosf+0x24>
 8008cd0:	ee39 8a40 	vsub.f32	s16, s18, s0
 8008cd4:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008cd8:	eeb0 0a48 	vmov.f32	s0, s16
 8008cdc:	f7ff feb6 	bl	8008a4c <__ieee754_sqrtf>
 8008ce0:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8008ce4:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8008ce8:	eeac ca88 	vfma.f32	s24, s25, s16
 8008cec:	eeaa aa88 	vfma.f32	s20, s21, s16
 8008cf0:	eeec ba08 	vfma.f32	s23, s24, s16
 8008cf4:	ee10 3a10 	vmov	r3, s0
 8008cf8:	eeab ba88 	vfma.f32	s22, s23, s16
 8008cfc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8008d00:	f023 030f 	bic.w	r3, r3, #15
 8008d04:	eeea 9a08 	vfma.f32	s19, s20, s16
 8008d08:	ee07 3a90 	vmov	s15, r3
 8008d0c:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8008d10:	eeb0 6a48 	vmov.f32	s12, s16
 8008d14:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8008d18:	eea9 9a88 	vfma.f32	s18, s19, s16
 8008d1c:	ee70 6a27 	vadd.f32	s13, s0, s15
 8008d20:	ee68 8a88 	vmul.f32	s17, s17, s16
 8008d24:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008d28:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8008d2c:	eea0 7a26 	vfma.f32	s14, s0, s13
 8008d30:	ee37 0a87 	vadd.f32	s0, s15, s14
 8008d34:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008d38:	e73e      	b.n	8008bb8 <__ieee754_acosf+0x24>
 8008d3a:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8008d80 <__ieee754_acosf+0x1ec>
 8008d3e:	e73b      	b.n	8008bb8 <__ieee754_acosf+0x24>
 8008d40:	40490fdb 	.word	0x40490fdb
 8008d44:	00000000 	.word	0x00000000
 8008d48:	3811ef08 	.word	0x3811ef08
 8008d4c:	3a4f7f04 	.word	0x3a4f7f04
 8008d50:	bf303361 	.word	0xbf303361
 8008d54:	bd241146 	.word	0xbd241146
 8008d58:	3e4e0aa8 	.word	0x3e4e0aa8
 8008d5c:	bea6b090 	.word	0xbea6b090
 8008d60:	3e2aaaab 	.word	0x3e2aaaab
 8008d64:	3d9dc62e 	.word	0x3d9dc62e
 8008d68:	4001572d 	.word	0x4001572d
 8008d6c:	c019d139 	.word	0xc019d139
 8008d70:	33a22168 	.word	0x33a22168
 8008d74:	3fc90fda 	.word	0x3fc90fda
 8008d78:	b3a22168 	.word	0xb3a22168
 8008d7c:	40490fda 	.word	0x40490fda
 8008d80:	3fc90fdb 	.word	0x3fc90fdb

08008d84 <__ieee754_powf>:
 8008d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d88:	ee10 4a90 	vmov	r4, s1
 8008d8c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8008d90:	ed2d 8b02 	vpush	{d8}
 8008d94:	ee10 6a10 	vmov	r6, s0
 8008d98:	eeb0 8a40 	vmov.f32	s16, s0
 8008d9c:	eef0 8a60 	vmov.f32	s17, s1
 8008da0:	d10c      	bne.n	8008dbc <__ieee754_powf+0x38>
 8008da2:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8008da6:	0076      	lsls	r6, r6, #1
 8008da8:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8008dac:	f240 829c 	bls.w	80092e8 <__ieee754_powf+0x564>
 8008db0:	ee38 0a28 	vadd.f32	s0, s16, s17
 8008db4:	ecbd 8b02 	vpop	{d8}
 8008db8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dbc:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8008dc0:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8008dc4:	d802      	bhi.n	8008dcc <__ieee754_powf+0x48>
 8008dc6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8008dca:	d908      	bls.n	8008dde <__ieee754_powf+0x5a>
 8008dcc:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8008dd0:	d1ee      	bne.n	8008db0 <__ieee754_powf+0x2c>
 8008dd2:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8008dd6:	0064      	lsls	r4, r4, #1
 8008dd8:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8008ddc:	e7e6      	b.n	8008dac <__ieee754_powf+0x28>
 8008dde:	2e00      	cmp	r6, #0
 8008de0:	da1e      	bge.n	8008e20 <__ieee754_powf+0x9c>
 8008de2:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8008de6:	d22b      	bcs.n	8008e40 <__ieee754_powf+0xbc>
 8008de8:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8008dec:	d332      	bcc.n	8008e54 <__ieee754_powf+0xd0>
 8008dee:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8008df2:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8008df6:	fa49 f503 	asr.w	r5, r9, r3
 8008dfa:	fa05 f303 	lsl.w	r3, r5, r3
 8008dfe:	454b      	cmp	r3, r9
 8008e00:	d126      	bne.n	8008e50 <__ieee754_powf+0xcc>
 8008e02:	f005 0501 	and.w	r5, r5, #1
 8008e06:	f1c5 0502 	rsb	r5, r5, #2
 8008e0a:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8008e0e:	d122      	bne.n	8008e56 <__ieee754_powf+0xd2>
 8008e10:	2c00      	cmp	r4, #0
 8008e12:	f280 826f 	bge.w	80092f4 <__ieee754_powf+0x570>
 8008e16:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008e1a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8008e1e:	e7c9      	b.n	8008db4 <__ieee754_powf+0x30>
 8008e20:	2500      	movs	r5, #0
 8008e22:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8008e26:	d1f0      	bne.n	8008e0a <__ieee754_powf+0x86>
 8008e28:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8008e2c:	f000 825c 	beq.w	80092e8 <__ieee754_powf+0x564>
 8008e30:	d908      	bls.n	8008e44 <__ieee754_powf+0xc0>
 8008e32:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8009194 <__ieee754_powf+0x410>
 8008e36:	2c00      	cmp	r4, #0
 8008e38:	bfa8      	it	ge
 8008e3a:	eeb0 0a68 	vmovge.f32	s0, s17
 8008e3e:	e7b9      	b.n	8008db4 <__ieee754_powf+0x30>
 8008e40:	2502      	movs	r5, #2
 8008e42:	e7ee      	b.n	8008e22 <__ieee754_powf+0x9e>
 8008e44:	2c00      	cmp	r4, #0
 8008e46:	f280 8252 	bge.w	80092ee <__ieee754_powf+0x56a>
 8008e4a:	eeb1 0a68 	vneg.f32	s0, s17
 8008e4e:	e7b1      	b.n	8008db4 <__ieee754_powf+0x30>
 8008e50:	2500      	movs	r5, #0
 8008e52:	e7da      	b.n	8008e0a <__ieee754_powf+0x86>
 8008e54:	2500      	movs	r5, #0
 8008e56:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8008e5a:	d102      	bne.n	8008e62 <__ieee754_powf+0xde>
 8008e5c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8008e60:	e7a8      	b.n	8008db4 <__ieee754_powf+0x30>
 8008e62:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8008e66:	d109      	bne.n	8008e7c <__ieee754_powf+0xf8>
 8008e68:	2e00      	cmp	r6, #0
 8008e6a:	db07      	blt.n	8008e7c <__ieee754_powf+0xf8>
 8008e6c:	eeb0 0a48 	vmov.f32	s0, s16
 8008e70:	ecbd 8b02 	vpop	{d8}
 8008e74:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e78:	f7ff bde8 	b.w	8008a4c <__ieee754_sqrtf>
 8008e7c:	eeb0 0a48 	vmov.f32	s0, s16
 8008e80:	f7ff fd86 	bl	8008990 <fabsf>
 8008e84:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8008e88:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8008e8c:	4647      	mov	r7, r8
 8008e8e:	d002      	beq.n	8008e96 <__ieee754_powf+0x112>
 8008e90:	f1b8 0f00 	cmp.w	r8, #0
 8008e94:	d117      	bne.n	8008ec6 <__ieee754_powf+0x142>
 8008e96:	2c00      	cmp	r4, #0
 8008e98:	bfbc      	itt	lt
 8008e9a:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8008e9e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8008ea2:	2e00      	cmp	r6, #0
 8008ea4:	da86      	bge.n	8008db4 <__ieee754_powf+0x30>
 8008ea6:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8008eaa:	ea58 0805 	orrs.w	r8, r8, r5
 8008eae:	d104      	bne.n	8008eba <__ieee754_powf+0x136>
 8008eb0:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008eb4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8008eb8:	e77c      	b.n	8008db4 <__ieee754_powf+0x30>
 8008eba:	2d01      	cmp	r5, #1
 8008ebc:	f47f af7a 	bne.w	8008db4 <__ieee754_powf+0x30>
 8008ec0:	eeb1 0a40 	vneg.f32	s0, s0
 8008ec4:	e776      	b.n	8008db4 <__ieee754_powf+0x30>
 8008ec6:	0ff0      	lsrs	r0, r6, #31
 8008ec8:	3801      	subs	r0, #1
 8008eca:	ea55 0300 	orrs.w	r3, r5, r0
 8008ece:	d104      	bne.n	8008eda <__ieee754_powf+0x156>
 8008ed0:	ee38 8a48 	vsub.f32	s16, s16, s16
 8008ed4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8008ed8:	e76c      	b.n	8008db4 <__ieee754_powf+0x30>
 8008eda:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8008ede:	d973      	bls.n	8008fc8 <__ieee754_powf+0x244>
 8008ee0:	4bad      	ldr	r3, [pc, #692]	@ (8009198 <__ieee754_powf+0x414>)
 8008ee2:	4598      	cmp	r8, r3
 8008ee4:	d808      	bhi.n	8008ef8 <__ieee754_powf+0x174>
 8008ee6:	2c00      	cmp	r4, #0
 8008ee8:	da0b      	bge.n	8008f02 <__ieee754_powf+0x17e>
 8008eea:	2000      	movs	r0, #0
 8008eec:	ecbd 8b02 	vpop	{d8}
 8008ef0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ef4:	f000 bbcc 	b.w	8009690 <__math_oflowf>
 8008ef8:	4ba8      	ldr	r3, [pc, #672]	@ (800919c <__ieee754_powf+0x418>)
 8008efa:	4598      	cmp	r8, r3
 8008efc:	d908      	bls.n	8008f10 <__ieee754_powf+0x18c>
 8008efe:	2c00      	cmp	r4, #0
 8008f00:	dcf3      	bgt.n	8008eea <__ieee754_powf+0x166>
 8008f02:	2000      	movs	r0, #0
 8008f04:	ecbd 8b02 	vpop	{d8}
 8008f08:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f0c:	f000 bbba 	b.w	8009684 <__math_uflowf>
 8008f10:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008f14:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008f18:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 80091a0 <__ieee754_powf+0x41c>
 8008f1c:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8008f20:	eee0 6a67 	vfms.f32	s13, s0, s15
 8008f24:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008f28:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8008f2c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008f30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008f34:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 80091a4 <__ieee754_powf+0x420>
 8008f38:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8008f3c:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 80091a8 <__ieee754_powf+0x424>
 8008f40:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008f44:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 80091ac <__ieee754_powf+0x428>
 8008f48:	eef0 6a67 	vmov.f32	s13, s15
 8008f4c:	eee0 6a07 	vfma.f32	s13, s0, s14
 8008f50:	ee16 3a90 	vmov	r3, s13
 8008f54:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8008f58:	f023 030f 	bic.w	r3, r3, #15
 8008f5c:	ee06 3a90 	vmov	s13, r3
 8008f60:	eee0 6a47 	vfms.f32	s13, s0, s14
 8008f64:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008f68:	3d01      	subs	r5, #1
 8008f6a:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8008f6e:	4305      	orrs	r5, r0
 8008f70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f74:	f024 040f 	bic.w	r4, r4, #15
 8008f78:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8008f7c:	bf18      	it	ne
 8008f7e:	eeb0 8a47 	vmovne.f32	s16, s14
 8008f82:	ee07 4a10 	vmov	s14, r4
 8008f86:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8008f8a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8008f8e:	ee07 3a90 	vmov	s15, r3
 8008f92:	eee7 0a27 	vfma.f32	s1, s14, s15
 8008f96:	ee07 4a10 	vmov	s14, r4
 8008f9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f9e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8008fa2:	ee17 1a10 	vmov	r1, s14
 8008fa6:	2900      	cmp	r1, #0
 8008fa8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008fac:	f340 80dd 	ble.w	800916a <__ieee754_powf+0x3e6>
 8008fb0:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8008fb4:	f240 80ca 	bls.w	800914c <__ieee754_powf+0x3c8>
 8008fb8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fc0:	bf4c      	ite	mi
 8008fc2:	2001      	movmi	r0, #1
 8008fc4:	2000      	movpl	r0, #0
 8008fc6:	e791      	b.n	8008eec <__ieee754_powf+0x168>
 8008fc8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8008fcc:	bf01      	itttt	eq
 8008fce:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 80091b0 <__ieee754_powf+0x42c>
 8008fd2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8008fd6:	f06f 0317 	mvneq.w	r3, #23
 8008fda:	ee17 7a90 	vmoveq	r7, s15
 8008fde:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8008fe2:	bf18      	it	ne
 8008fe4:	2300      	movne	r3, #0
 8008fe6:	3a7f      	subs	r2, #127	@ 0x7f
 8008fe8:	441a      	add	r2, r3
 8008fea:	4b72      	ldr	r3, [pc, #456]	@ (80091b4 <__ieee754_powf+0x430>)
 8008fec:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8008ff0:	429f      	cmp	r7, r3
 8008ff2:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8008ff6:	dd06      	ble.n	8009006 <__ieee754_powf+0x282>
 8008ff8:	4b6f      	ldr	r3, [pc, #444]	@ (80091b8 <__ieee754_powf+0x434>)
 8008ffa:	429f      	cmp	r7, r3
 8008ffc:	f340 80a4 	ble.w	8009148 <__ieee754_powf+0x3c4>
 8009000:	3201      	adds	r2, #1
 8009002:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8009006:	2600      	movs	r6, #0
 8009008:	4b6c      	ldr	r3, [pc, #432]	@ (80091bc <__ieee754_powf+0x438>)
 800900a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800900e:	ee07 1a10 	vmov	s14, r1
 8009012:	edd3 5a00 	vldr	s11, [r3]
 8009016:	4b6a      	ldr	r3, [pc, #424]	@ (80091c0 <__ieee754_powf+0x43c>)
 8009018:	ee75 7a87 	vadd.f32	s15, s11, s14
 800901c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009020:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8009024:	1049      	asrs	r1, r1, #1
 8009026:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800902a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800902e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8009032:	ee37 6a65 	vsub.f32	s12, s14, s11
 8009036:	ee07 1a90 	vmov	s15, r1
 800903a:	ee26 5a24 	vmul.f32	s10, s12, s9
 800903e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8009042:	ee15 7a10 	vmov	r7, s10
 8009046:	401f      	ands	r7, r3
 8009048:	ee06 7a90 	vmov	s13, r7
 800904c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8009050:	ee37 7a65 	vsub.f32	s14, s14, s11
 8009054:	ee65 7a05 	vmul.f32	s15, s10, s10
 8009058:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800905c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80091c4 <__ieee754_powf+0x440>
 8009060:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80091c8 <__ieee754_powf+0x444>
 8009064:	eee7 5a87 	vfma.f32	s11, s15, s14
 8009068:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80091cc <__ieee754_powf+0x448>
 800906c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009070:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 80091a0 <__ieee754_powf+0x41c>
 8009074:	eee7 5a27 	vfma.f32	s11, s14, s15
 8009078:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80091d0 <__ieee754_powf+0x44c>
 800907c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009080:	eddf 5a54 	vldr	s11, [pc, #336]	@ 80091d4 <__ieee754_powf+0x450>
 8009084:	ee26 6a24 	vmul.f32	s12, s12, s9
 8009088:	eee7 5a27 	vfma.f32	s11, s14, s15
 800908c:	ee35 7a26 	vadd.f32	s14, s10, s13
 8009090:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8009094:	ee27 7a06 	vmul.f32	s14, s14, s12
 8009098:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800909c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80090a0:	eef0 5a67 	vmov.f32	s11, s15
 80090a4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80090a8:	ee75 5a87 	vadd.f32	s11, s11, s14
 80090ac:	ee15 1a90 	vmov	r1, s11
 80090b0:	4019      	ands	r1, r3
 80090b2:	ee05 1a90 	vmov	s11, r1
 80090b6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80090ba:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80090be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090c2:	ee67 7a85 	vmul.f32	s15, s15, s10
 80090c6:	eee6 7a25 	vfma.f32	s15, s12, s11
 80090ca:	eeb0 6a67 	vmov.f32	s12, s15
 80090ce:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80090d2:	ee16 1a10 	vmov	r1, s12
 80090d6:	4019      	ands	r1, r3
 80090d8:	ee06 1a10 	vmov	s12, r1
 80090dc:	eeb0 7a46 	vmov.f32	s14, s12
 80090e0:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80090e4:	493c      	ldr	r1, [pc, #240]	@ (80091d8 <__ieee754_powf+0x454>)
 80090e6:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 80090ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80090ee:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80091dc <__ieee754_powf+0x458>
 80090f2:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 80091e0 <__ieee754_powf+0x45c>
 80090f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80090fa:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80091e4 <__ieee754_powf+0x460>
 80090fe:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009102:	ed91 7a00 	vldr	s14, [r1]
 8009106:	ee77 7a87 	vadd.f32	s15, s15, s14
 800910a:	ee07 2a10 	vmov	s14, r2
 800910e:	eef0 6a67 	vmov.f32	s13, s15
 8009112:	4a35      	ldr	r2, [pc, #212]	@ (80091e8 <__ieee754_powf+0x464>)
 8009114:	eee6 6a25 	vfma.f32	s13, s12, s11
 8009118:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800911c:	ed92 5a00 	vldr	s10, [r2]
 8009120:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009124:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009128:	ee76 6a87 	vadd.f32	s13, s13, s14
 800912c:	ee16 2a90 	vmov	r2, s13
 8009130:	4013      	ands	r3, r2
 8009132:	ee06 3a90 	vmov	s13, r3
 8009136:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800913a:	ee37 7a45 	vsub.f32	s14, s14, s10
 800913e:	eea6 7a65 	vfms.f32	s14, s12, s11
 8009142:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009146:	e70f      	b.n	8008f68 <__ieee754_powf+0x1e4>
 8009148:	2601      	movs	r6, #1
 800914a:	e75d      	b.n	8009008 <__ieee754_powf+0x284>
 800914c:	d152      	bne.n	80091f4 <__ieee754_powf+0x470>
 800914e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80091ec <__ieee754_powf+0x468>
 8009152:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009156:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800915a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800915e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009162:	f73f af29 	bgt.w	8008fb8 <__ieee754_powf+0x234>
 8009166:	2386      	movs	r3, #134	@ 0x86
 8009168:	e048      	b.n	80091fc <__ieee754_powf+0x478>
 800916a:	4a21      	ldr	r2, [pc, #132]	@ (80091f0 <__ieee754_powf+0x46c>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d907      	bls.n	8009180 <__ieee754_powf+0x3fc>
 8009170:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009178:	bf4c      	ite	mi
 800917a:	2001      	movmi	r0, #1
 800917c:	2000      	movpl	r0, #0
 800917e:	e6c1      	b.n	8008f04 <__ieee754_powf+0x180>
 8009180:	d138      	bne.n	80091f4 <__ieee754_powf+0x470>
 8009182:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009186:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800918a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800918e:	dbea      	blt.n	8009166 <__ieee754_powf+0x3e2>
 8009190:	e7ee      	b.n	8009170 <__ieee754_powf+0x3ec>
 8009192:	bf00      	nop
 8009194:	00000000 	.word	0x00000000
 8009198:	3f7ffff3 	.word	0x3f7ffff3
 800919c:	3f800007 	.word	0x3f800007
 80091a0:	3eaaaaab 	.word	0x3eaaaaab
 80091a4:	3fb8aa3b 	.word	0x3fb8aa3b
 80091a8:	36eca570 	.word	0x36eca570
 80091ac:	3fb8aa00 	.word	0x3fb8aa00
 80091b0:	4b800000 	.word	0x4b800000
 80091b4:	001cc471 	.word	0x001cc471
 80091b8:	005db3d6 	.word	0x005db3d6
 80091bc:	08009ff4 	.word	0x08009ff4
 80091c0:	fffff000 	.word	0xfffff000
 80091c4:	3e6c3255 	.word	0x3e6c3255
 80091c8:	3e53f142 	.word	0x3e53f142
 80091cc:	3e8ba305 	.word	0x3e8ba305
 80091d0:	3edb6db7 	.word	0x3edb6db7
 80091d4:	3f19999a 	.word	0x3f19999a
 80091d8:	08009fe4 	.word	0x08009fe4
 80091dc:	3f76384f 	.word	0x3f76384f
 80091e0:	3f763800 	.word	0x3f763800
 80091e4:	369dc3a0 	.word	0x369dc3a0
 80091e8:	08009fec 	.word	0x08009fec
 80091ec:	3338aa3c 	.word	0x3338aa3c
 80091f0:	43160000 	.word	0x43160000
 80091f4:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80091f8:	d971      	bls.n	80092de <__ieee754_powf+0x55a>
 80091fa:	15db      	asrs	r3, r3, #23
 80091fc:	3b7e      	subs	r3, #126	@ 0x7e
 80091fe:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8009202:	4118      	asrs	r0, r3
 8009204:	4408      	add	r0, r1
 8009206:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800920a:	4a3c      	ldr	r2, [pc, #240]	@ (80092fc <__ieee754_powf+0x578>)
 800920c:	3b7f      	subs	r3, #127	@ 0x7f
 800920e:	411a      	asrs	r2, r3
 8009210:	4002      	ands	r2, r0
 8009212:	ee07 2a10 	vmov	s14, r2
 8009216:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800921a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800921e:	f1c3 0317 	rsb	r3, r3, #23
 8009222:	4118      	asrs	r0, r3
 8009224:	2900      	cmp	r1, #0
 8009226:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800922a:	bfb8      	it	lt
 800922c:	4240      	neglt	r0, r0
 800922e:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8009232:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8009300 <__ieee754_powf+0x57c>
 8009236:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8009304 <__ieee754_powf+0x580>
 800923a:	ee17 3a10 	vmov	r3, s14
 800923e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009242:	f023 030f 	bic.w	r3, r3, #15
 8009246:	ee07 3a10 	vmov	s14, r3
 800924a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800924e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009252:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009256:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8009308 <__ieee754_powf+0x584>
 800925a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800925e:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8009262:	eef0 6a67 	vmov.f32	s13, s15
 8009266:	eee7 6a06 	vfma.f32	s13, s14, s12
 800926a:	eef0 5a66 	vmov.f32	s11, s13
 800926e:	eee7 5a46 	vfms.f32	s11, s14, s12
 8009272:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8009276:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800927a:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800930c <__ieee754_powf+0x588>
 800927e:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8009310 <__ieee754_powf+0x58c>
 8009282:	eea7 6a25 	vfma.f32	s12, s14, s11
 8009286:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8009314 <__ieee754_powf+0x590>
 800928a:	eee6 5a07 	vfma.f32	s11, s12, s14
 800928e:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8009318 <__ieee754_powf+0x594>
 8009292:	eea5 6a87 	vfma.f32	s12, s11, s14
 8009296:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800931c <__ieee754_powf+0x598>
 800929a:	eee6 5a07 	vfma.f32	s11, s12, s14
 800929e:	eeb0 6a66 	vmov.f32	s12, s13
 80092a2:	eea5 6ac7 	vfms.f32	s12, s11, s14
 80092a6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80092aa:	ee66 5a86 	vmul.f32	s11, s13, s12
 80092ae:	ee36 6a47 	vsub.f32	s12, s12, s14
 80092b2:	eee6 7aa7 	vfma.f32	s15, s13, s15
 80092b6:	ee85 7a86 	vdiv.f32	s14, s11, s12
 80092ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80092c2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80092c6:	ee10 3a10 	vmov	r3, s0
 80092ca:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80092ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80092d2:	da06      	bge.n	80092e2 <__ieee754_powf+0x55e>
 80092d4:	f000 f956 	bl	8009584 <scalbnf>
 80092d8:	ee20 0a08 	vmul.f32	s0, s0, s16
 80092dc:	e56a      	b.n	8008db4 <__ieee754_powf+0x30>
 80092de:	2000      	movs	r0, #0
 80092e0:	e7a5      	b.n	800922e <__ieee754_powf+0x4aa>
 80092e2:	ee00 3a10 	vmov	s0, r3
 80092e6:	e7f7      	b.n	80092d8 <__ieee754_powf+0x554>
 80092e8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80092ec:	e562      	b.n	8008db4 <__ieee754_powf+0x30>
 80092ee:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8009320 <__ieee754_powf+0x59c>
 80092f2:	e55f      	b.n	8008db4 <__ieee754_powf+0x30>
 80092f4:	eeb0 0a48 	vmov.f32	s0, s16
 80092f8:	e55c      	b.n	8008db4 <__ieee754_powf+0x30>
 80092fa:	bf00      	nop
 80092fc:	ff800000 	.word	0xff800000
 8009300:	3f317218 	.word	0x3f317218
 8009304:	3f317200 	.word	0x3f317200
 8009308:	35bfbe8c 	.word	0x35bfbe8c
 800930c:	b5ddea0e 	.word	0xb5ddea0e
 8009310:	3331bb4c 	.word	0x3331bb4c
 8009314:	388ab355 	.word	0x388ab355
 8009318:	bb360b61 	.word	0xbb360b61
 800931c:	3e2aaaab 	.word	0x3e2aaaab
 8009320:	00000000 	.word	0x00000000

08009324 <__ieee754_rem_pio2f>:
 8009324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009326:	ee10 6a10 	vmov	r6, s0
 800932a:	4b88      	ldr	r3, [pc, #544]	@ (800954c <__ieee754_rem_pio2f+0x228>)
 800932c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8009330:	429d      	cmp	r5, r3
 8009332:	b087      	sub	sp, #28
 8009334:	4604      	mov	r4, r0
 8009336:	d805      	bhi.n	8009344 <__ieee754_rem_pio2f+0x20>
 8009338:	2300      	movs	r3, #0
 800933a:	ed80 0a00 	vstr	s0, [r0]
 800933e:	6043      	str	r3, [r0, #4]
 8009340:	2000      	movs	r0, #0
 8009342:	e022      	b.n	800938a <__ieee754_rem_pio2f+0x66>
 8009344:	4b82      	ldr	r3, [pc, #520]	@ (8009550 <__ieee754_rem_pio2f+0x22c>)
 8009346:	429d      	cmp	r5, r3
 8009348:	d83a      	bhi.n	80093c0 <__ieee754_rem_pio2f+0x9c>
 800934a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800934e:	2e00      	cmp	r6, #0
 8009350:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8009554 <__ieee754_rem_pio2f+0x230>
 8009354:	4a80      	ldr	r2, [pc, #512]	@ (8009558 <__ieee754_rem_pio2f+0x234>)
 8009356:	f023 030f 	bic.w	r3, r3, #15
 800935a:	dd18      	ble.n	800938e <__ieee754_rem_pio2f+0x6a>
 800935c:	4293      	cmp	r3, r2
 800935e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8009362:	bf09      	itett	eq
 8009364:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800955c <__ieee754_rem_pio2f+0x238>
 8009368:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8009560 <__ieee754_rem_pio2f+0x23c>
 800936c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8009564 <__ieee754_rem_pio2f+0x240>
 8009370:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8009374:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8009378:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800937c:	ed80 7a00 	vstr	s14, [r0]
 8009380:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009384:	edc0 7a01 	vstr	s15, [r0, #4]
 8009388:	2001      	movs	r0, #1
 800938a:	b007      	add	sp, #28
 800938c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800938e:	4293      	cmp	r3, r2
 8009390:	ee70 7a07 	vadd.f32	s15, s0, s14
 8009394:	bf09      	itett	eq
 8009396:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800955c <__ieee754_rem_pio2f+0x238>
 800939a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8009560 <__ieee754_rem_pio2f+0x23c>
 800939e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8009564 <__ieee754_rem_pio2f+0x240>
 80093a2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80093a6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80093aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80093ae:	ed80 7a00 	vstr	s14, [r0]
 80093b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093b6:	edc0 7a01 	vstr	s15, [r0, #4]
 80093ba:	f04f 30ff 	mov.w	r0, #4294967295
 80093be:	e7e4      	b.n	800938a <__ieee754_rem_pio2f+0x66>
 80093c0:	4b69      	ldr	r3, [pc, #420]	@ (8009568 <__ieee754_rem_pio2f+0x244>)
 80093c2:	429d      	cmp	r5, r3
 80093c4:	d873      	bhi.n	80094ae <__ieee754_rem_pio2f+0x18a>
 80093c6:	f7ff fae3 	bl	8008990 <fabsf>
 80093ca:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800956c <__ieee754_rem_pio2f+0x248>
 80093ce:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80093d2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80093d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80093da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80093de:	ee17 0a90 	vmov	r0, s15
 80093e2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8009554 <__ieee754_rem_pio2f+0x230>
 80093e6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80093ea:	281f      	cmp	r0, #31
 80093ec:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8009560 <__ieee754_rem_pio2f+0x23c>
 80093f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093f4:	eeb1 6a47 	vneg.f32	s12, s14
 80093f8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80093fc:	ee16 1a90 	vmov	r1, s13
 8009400:	dc09      	bgt.n	8009416 <__ieee754_rem_pio2f+0xf2>
 8009402:	4a5b      	ldr	r2, [pc, #364]	@ (8009570 <__ieee754_rem_pio2f+0x24c>)
 8009404:	1e47      	subs	r7, r0, #1
 8009406:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800940a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800940e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009412:	4293      	cmp	r3, r2
 8009414:	d107      	bne.n	8009426 <__ieee754_rem_pio2f+0x102>
 8009416:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800941a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800941e:	2a08      	cmp	r2, #8
 8009420:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8009424:	dc14      	bgt.n	8009450 <__ieee754_rem_pio2f+0x12c>
 8009426:	6021      	str	r1, [r4, #0]
 8009428:	ed94 7a00 	vldr	s14, [r4]
 800942c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009430:	2e00      	cmp	r6, #0
 8009432:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009436:	ed84 0a01 	vstr	s0, [r4, #4]
 800943a:	daa6      	bge.n	800938a <__ieee754_rem_pio2f+0x66>
 800943c:	eeb1 7a47 	vneg.f32	s14, s14
 8009440:	eeb1 0a40 	vneg.f32	s0, s0
 8009444:	ed84 7a00 	vstr	s14, [r4]
 8009448:	ed84 0a01 	vstr	s0, [r4, #4]
 800944c:	4240      	negs	r0, r0
 800944e:	e79c      	b.n	800938a <__ieee754_rem_pio2f+0x66>
 8009450:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800955c <__ieee754_rem_pio2f+0x238>
 8009454:	eef0 6a40 	vmov.f32	s13, s0
 8009458:	eee6 6a25 	vfma.f32	s13, s12, s11
 800945c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8009460:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009464:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009564 <__ieee754_rem_pio2f+0x240>
 8009468:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800946c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8009470:	ee15 2a90 	vmov	r2, s11
 8009474:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009478:	1a5b      	subs	r3, r3, r1
 800947a:	2b19      	cmp	r3, #25
 800947c:	dc04      	bgt.n	8009488 <__ieee754_rem_pio2f+0x164>
 800947e:	edc4 5a00 	vstr	s11, [r4]
 8009482:	eeb0 0a66 	vmov.f32	s0, s13
 8009486:	e7cf      	b.n	8009428 <__ieee754_rem_pio2f+0x104>
 8009488:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8009574 <__ieee754_rem_pio2f+0x250>
 800948c:	eeb0 0a66 	vmov.f32	s0, s13
 8009490:	eea6 0a25 	vfma.f32	s0, s12, s11
 8009494:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8009498:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8009578 <__ieee754_rem_pio2f+0x254>
 800949c:	eee6 7a25 	vfma.f32	s15, s12, s11
 80094a0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80094a4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80094a8:	ed84 7a00 	vstr	s14, [r4]
 80094ac:	e7bc      	b.n	8009428 <__ieee754_rem_pio2f+0x104>
 80094ae:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80094b2:	d306      	bcc.n	80094c2 <__ieee754_rem_pio2f+0x19e>
 80094b4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80094b8:	edc0 7a01 	vstr	s15, [r0, #4]
 80094bc:	edc0 7a00 	vstr	s15, [r0]
 80094c0:	e73e      	b.n	8009340 <__ieee754_rem_pio2f+0x1c>
 80094c2:	15ea      	asrs	r2, r5, #23
 80094c4:	3a86      	subs	r2, #134	@ 0x86
 80094c6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80094ca:	ee07 3a90 	vmov	s15, r3
 80094ce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80094d2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800957c <__ieee754_rem_pio2f+0x258>
 80094d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80094da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80094de:	ed8d 7a03 	vstr	s14, [sp, #12]
 80094e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80094e6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80094ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80094ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80094f2:	ed8d 7a04 	vstr	s14, [sp, #16]
 80094f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80094fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80094fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009502:	edcd 7a05 	vstr	s15, [sp, #20]
 8009506:	d11e      	bne.n	8009546 <__ieee754_rem_pio2f+0x222>
 8009508:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800950c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009510:	bf0c      	ite	eq
 8009512:	2301      	moveq	r3, #1
 8009514:	2302      	movne	r3, #2
 8009516:	491a      	ldr	r1, [pc, #104]	@ (8009580 <__ieee754_rem_pio2f+0x25c>)
 8009518:	9101      	str	r1, [sp, #4]
 800951a:	2102      	movs	r1, #2
 800951c:	9100      	str	r1, [sp, #0]
 800951e:	a803      	add	r0, sp, #12
 8009520:	4621      	mov	r1, r4
 8009522:	f000 f8bb 	bl	800969c <__kernel_rem_pio2f>
 8009526:	2e00      	cmp	r6, #0
 8009528:	f6bf af2f 	bge.w	800938a <__ieee754_rem_pio2f+0x66>
 800952c:	edd4 7a00 	vldr	s15, [r4]
 8009530:	eef1 7a67 	vneg.f32	s15, s15
 8009534:	edc4 7a00 	vstr	s15, [r4]
 8009538:	edd4 7a01 	vldr	s15, [r4, #4]
 800953c:	eef1 7a67 	vneg.f32	s15, s15
 8009540:	edc4 7a01 	vstr	s15, [r4, #4]
 8009544:	e782      	b.n	800944c <__ieee754_rem_pio2f+0x128>
 8009546:	2303      	movs	r3, #3
 8009548:	e7e5      	b.n	8009516 <__ieee754_rem_pio2f+0x1f2>
 800954a:	bf00      	nop
 800954c:	3f490fd8 	.word	0x3f490fd8
 8009550:	4016cbe3 	.word	0x4016cbe3
 8009554:	3fc90f80 	.word	0x3fc90f80
 8009558:	3fc90fd0 	.word	0x3fc90fd0
 800955c:	37354400 	.word	0x37354400
 8009560:	37354443 	.word	0x37354443
 8009564:	2e85a308 	.word	0x2e85a308
 8009568:	43490f80 	.word	0x43490f80
 800956c:	3f22f984 	.word	0x3f22f984
 8009570:	08009ffc 	.word	0x08009ffc
 8009574:	2e85a300 	.word	0x2e85a300
 8009578:	248d3132 	.word	0x248d3132
 800957c:	43800000 	.word	0x43800000
 8009580:	0800a07c 	.word	0x0800a07c

08009584 <scalbnf>:
 8009584:	ee10 3a10 	vmov	r3, s0
 8009588:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800958c:	d02b      	beq.n	80095e6 <scalbnf+0x62>
 800958e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8009592:	d302      	bcc.n	800959a <scalbnf+0x16>
 8009594:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009598:	4770      	bx	lr
 800959a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800959e:	d123      	bne.n	80095e8 <scalbnf+0x64>
 80095a0:	4b24      	ldr	r3, [pc, #144]	@ (8009634 <scalbnf+0xb0>)
 80095a2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8009638 <scalbnf+0xb4>
 80095a6:	4298      	cmp	r0, r3
 80095a8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80095ac:	db17      	blt.n	80095de <scalbnf+0x5a>
 80095ae:	ee10 3a10 	vmov	r3, s0
 80095b2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80095b6:	3a19      	subs	r2, #25
 80095b8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80095bc:	4288      	cmp	r0, r1
 80095be:	dd15      	ble.n	80095ec <scalbnf+0x68>
 80095c0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800963c <scalbnf+0xb8>
 80095c4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8009640 <scalbnf+0xbc>
 80095c8:	ee10 3a10 	vmov	r3, s0
 80095cc:	eeb0 7a67 	vmov.f32	s14, s15
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	bfb8      	it	lt
 80095d4:	eef0 7a66 	vmovlt.f32	s15, s13
 80095d8:	ee27 0a87 	vmul.f32	s0, s15, s14
 80095dc:	4770      	bx	lr
 80095de:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009644 <scalbnf+0xc0>
 80095e2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80095e6:	4770      	bx	lr
 80095e8:	0dd2      	lsrs	r2, r2, #23
 80095ea:	e7e5      	b.n	80095b8 <scalbnf+0x34>
 80095ec:	4410      	add	r0, r2
 80095ee:	28fe      	cmp	r0, #254	@ 0xfe
 80095f0:	dce6      	bgt.n	80095c0 <scalbnf+0x3c>
 80095f2:	2800      	cmp	r0, #0
 80095f4:	dd06      	ble.n	8009604 <scalbnf+0x80>
 80095f6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80095fa:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80095fe:	ee00 3a10 	vmov	s0, r3
 8009602:	4770      	bx	lr
 8009604:	f110 0f16 	cmn.w	r0, #22
 8009608:	da09      	bge.n	800961e <scalbnf+0x9a>
 800960a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8009644 <scalbnf+0xc0>
 800960e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8009648 <scalbnf+0xc4>
 8009612:	ee10 3a10 	vmov	r3, s0
 8009616:	eeb0 7a67 	vmov.f32	s14, s15
 800961a:	2b00      	cmp	r3, #0
 800961c:	e7d9      	b.n	80095d2 <scalbnf+0x4e>
 800961e:	3019      	adds	r0, #25
 8009620:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009624:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009628:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800964c <scalbnf+0xc8>
 800962c:	ee07 3a90 	vmov	s15, r3
 8009630:	e7d7      	b.n	80095e2 <scalbnf+0x5e>
 8009632:	bf00      	nop
 8009634:	ffff3cb0 	.word	0xffff3cb0
 8009638:	4c000000 	.word	0x4c000000
 800963c:	7149f2ca 	.word	0x7149f2ca
 8009640:	f149f2ca 	.word	0xf149f2ca
 8009644:	0da24260 	.word	0x0da24260
 8009648:	8da24260 	.word	0x8da24260
 800964c:	33000000 	.word	0x33000000

08009650 <with_errnof>:
 8009650:	b510      	push	{r4, lr}
 8009652:	ed2d 8b02 	vpush	{d8}
 8009656:	eeb0 8a40 	vmov.f32	s16, s0
 800965a:	4604      	mov	r4, r0
 800965c:	f7fc fc1a 	bl	8005e94 <__errno>
 8009660:	eeb0 0a48 	vmov.f32	s0, s16
 8009664:	ecbd 8b02 	vpop	{d8}
 8009668:	6004      	str	r4, [r0, #0]
 800966a:	bd10      	pop	{r4, pc}

0800966c <xflowf>:
 800966c:	b130      	cbz	r0, 800967c <xflowf+0x10>
 800966e:	eef1 7a40 	vneg.f32	s15, s0
 8009672:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009676:	2022      	movs	r0, #34	@ 0x22
 8009678:	f7ff bfea 	b.w	8009650 <with_errnof>
 800967c:	eef0 7a40 	vmov.f32	s15, s0
 8009680:	e7f7      	b.n	8009672 <xflowf+0x6>
	...

08009684 <__math_uflowf>:
 8009684:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800968c <__math_uflowf+0x8>
 8009688:	f7ff bff0 	b.w	800966c <xflowf>
 800968c:	10000000 	.word	0x10000000

08009690 <__math_oflowf>:
 8009690:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009698 <__math_oflowf+0x8>
 8009694:	f7ff bfea 	b.w	800966c <xflowf>
 8009698:	70000000 	.word	0x70000000

0800969c <__kernel_rem_pio2f>:
 800969c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a0:	ed2d 8b04 	vpush	{d8-d9}
 80096a4:	b0d9      	sub	sp, #356	@ 0x164
 80096a6:	4690      	mov	r8, r2
 80096a8:	9001      	str	r0, [sp, #4]
 80096aa:	4ab9      	ldr	r2, [pc, #740]	@ (8009990 <__kernel_rem_pio2f+0x2f4>)
 80096ac:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80096ae:	f118 0f04 	cmn.w	r8, #4
 80096b2:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80096b6:	460f      	mov	r7, r1
 80096b8:	f103 3bff 	add.w	fp, r3, #4294967295
 80096bc:	db27      	blt.n	800970e <__kernel_rem_pio2f+0x72>
 80096be:	f1b8 0203 	subs.w	r2, r8, #3
 80096c2:	bf48      	it	mi
 80096c4:	f108 0204 	addmi.w	r2, r8, #4
 80096c8:	10d2      	asrs	r2, r2, #3
 80096ca:	1c55      	adds	r5, r2, #1
 80096cc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80096ce:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80099a0 <__kernel_rem_pio2f+0x304>
 80096d2:	00e8      	lsls	r0, r5, #3
 80096d4:	eba2 060b 	sub.w	r6, r2, fp
 80096d8:	9002      	str	r0, [sp, #8]
 80096da:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80096de:	eb0a 0c0b 	add.w	ip, sl, fp
 80096e2:	ac1c      	add	r4, sp, #112	@ 0x70
 80096e4:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80096e8:	2000      	movs	r0, #0
 80096ea:	4560      	cmp	r0, ip
 80096ec:	dd11      	ble.n	8009712 <__kernel_rem_pio2f+0x76>
 80096ee:	a91c      	add	r1, sp, #112	@ 0x70
 80096f0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80096f4:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80096f8:	f04f 0c00 	mov.w	ip, #0
 80096fc:	45d4      	cmp	ip, sl
 80096fe:	dc27      	bgt.n	8009750 <__kernel_rem_pio2f+0xb4>
 8009700:	f8dd e004 	ldr.w	lr, [sp, #4]
 8009704:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 80099a0 <__kernel_rem_pio2f+0x304>
 8009708:	4606      	mov	r6, r0
 800970a:	2400      	movs	r4, #0
 800970c:	e016      	b.n	800973c <__kernel_rem_pio2f+0xa0>
 800970e:	2200      	movs	r2, #0
 8009710:	e7db      	b.n	80096ca <__kernel_rem_pio2f+0x2e>
 8009712:	42c6      	cmn	r6, r0
 8009714:	bf5d      	ittte	pl
 8009716:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800971a:	ee07 1a90 	vmovpl	s15, r1
 800971e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8009722:	eef0 7a47 	vmovmi.f32	s15, s14
 8009726:	ece4 7a01 	vstmia	r4!, {s15}
 800972a:	3001      	adds	r0, #1
 800972c:	e7dd      	b.n	80096ea <__kernel_rem_pio2f+0x4e>
 800972e:	ecfe 6a01 	vldmia	lr!, {s13}
 8009732:	ed96 7a00 	vldr	s14, [r6]
 8009736:	eee6 7a87 	vfma.f32	s15, s13, s14
 800973a:	3401      	adds	r4, #1
 800973c:	455c      	cmp	r4, fp
 800973e:	f1a6 0604 	sub.w	r6, r6, #4
 8009742:	ddf4      	ble.n	800972e <__kernel_rem_pio2f+0x92>
 8009744:	ece9 7a01 	vstmia	r9!, {s15}
 8009748:	f10c 0c01 	add.w	ip, ip, #1
 800974c:	3004      	adds	r0, #4
 800974e:	e7d5      	b.n	80096fc <__kernel_rem_pio2f+0x60>
 8009750:	a908      	add	r1, sp, #32
 8009752:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009756:	9104      	str	r1, [sp, #16]
 8009758:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800975a:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800999c <__kernel_rem_pio2f+0x300>
 800975e:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8009998 <__kernel_rem_pio2f+0x2fc>
 8009762:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8009766:	9203      	str	r2, [sp, #12]
 8009768:	4654      	mov	r4, sl
 800976a:	00a2      	lsls	r2, r4, #2
 800976c:	9205      	str	r2, [sp, #20]
 800976e:	aa58      	add	r2, sp, #352	@ 0x160
 8009770:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8009774:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8009778:	a944      	add	r1, sp, #272	@ 0x110
 800977a:	aa08      	add	r2, sp, #32
 800977c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8009780:	4694      	mov	ip, r2
 8009782:	4626      	mov	r6, r4
 8009784:	2e00      	cmp	r6, #0
 8009786:	f1a0 0004 	sub.w	r0, r0, #4
 800978a:	dc4c      	bgt.n	8009826 <__kernel_rem_pio2f+0x18a>
 800978c:	4628      	mov	r0, r5
 800978e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009792:	f7ff fef7 	bl	8009584 <scalbnf>
 8009796:	eeb0 8a40 	vmov.f32	s16, s0
 800979a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800979e:	ee28 0a00 	vmul.f32	s0, s16, s0
 80097a2:	f000 f9ed 	bl	8009b80 <floorf>
 80097a6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80097aa:	eea0 8a67 	vfms.f32	s16, s0, s15
 80097ae:	2d00      	cmp	r5, #0
 80097b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80097b4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80097b8:	ee17 9a90 	vmov	r9, s15
 80097bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097c0:	ee38 8a67 	vsub.f32	s16, s16, s15
 80097c4:	dd41      	ble.n	800984a <__kernel_rem_pio2f+0x1ae>
 80097c6:	f104 3cff 	add.w	ip, r4, #4294967295
 80097ca:	a908      	add	r1, sp, #32
 80097cc:	f1c5 0e08 	rsb	lr, r5, #8
 80097d0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80097d4:	fa46 f00e 	asr.w	r0, r6, lr
 80097d8:	4481      	add	r9, r0
 80097da:	fa00 f00e 	lsl.w	r0, r0, lr
 80097de:	1a36      	subs	r6, r6, r0
 80097e0:	f1c5 0007 	rsb	r0, r5, #7
 80097e4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80097e8:	4106      	asrs	r6, r0
 80097ea:	2e00      	cmp	r6, #0
 80097ec:	dd3c      	ble.n	8009868 <__kernel_rem_pio2f+0x1cc>
 80097ee:	f04f 0e00 	mov.w	lr, #0
 80097f2:	f109 0901 	add.w	r9, r9, #1
 80097f6:	4670      	mov	r0, lr
 80097f8:	4574      	cmp	r4, lr
 80097fa:	dc68      	bgt.n	80098ce <__kernel_rem_pio2f+0x232>
 80097fc:	2d00      	cmp	r5, #0
 80097fe:	dd03      	ble.n	8009808 <__kernel_rem_pio2f+0x16c>
 8009800:	2d01      	cmp	r5, #1
 8009802:	d074      	beq.n	80098ee <__kernel_rem_pio2f+0x252>
 8009804:	2d02      	cmp	r5, #2
 8009806:	d07d      	beq.n	8009904 <__kernel_rem_pio2f+0x268>
 8009808:	2e02      	cmp	r6, #2
 800980a:	d12d      	bne.n	8009868 <__kernel_rem_pio2f+0x1cc>
 800980c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009810:	ee30 8a48 	vsub.f32	s16, s0, s16
 8009814:	b340      	cbz	r0, 8009868 <__kernel_rem_pio2f+0x1cc>
 8009816:	4628      	mov	r0, r5
 8009818:	9306      	str	r3, [sp, #24]
 800981a:	f7ff feb3 	bl	8009584 <scalbnf>
 800981e:	9b06      	ldr	r3, [sp, #24]
 8009820:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009824:	e020      	b.n	8009868 <__kernel_rem_pio2f+0x1cc>
 8009826:	ee60 7a28 	vmul.f32	s15, s0, s17
 800982a:	3e01      	subs	r6, #1
 800982c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009834:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8009838:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800983c:	ecac 0a01 	vstmia	ip!, {s0}
 8009840:	ed90 0a00 	vldr	s0, [r0]
 8009844:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009848:	e79c      	b.n	8009784 <__kernel_rem_pio2f+0xe8>
 800984a:	d105      	bne.n	8009858 <__kernel_rem_pio2f+0x1bc>
 800984c:	1e60      	subs	r0, r4, #1
 800984e:	a908      	add	r1, sp, #32
 8009850:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8009854:	11f6      	asrs	r6, r6, #7
 8009856:	e7c8      	b.n	80097ea <__kernel_rem_pio2f+0x14e>
 8009858:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800985c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009864:	da31      	bge.n	80098ca <__kernel_rem_pio2f+0x22e>
 8009866:	2600      	movs	r6, #0
 8009868:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800986c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009870:	f040 8098 	bne.w	80099a4 <__kernel_rem_pio2f+0x308>
 8009874:	1e60      	subs	r0, r4, #1
 8009876:	2200      	movs	r2, #0
 8009878:	4550      	cmp	r0, sl
 800987a:	da4b      	bge.n	8009914 <__kernel_rem_pio2f+0x278>
 800987c:	2a00      	cmp	r2, #0
 800987e:	d065      	beq.n	800994c <__kernel_rem_pio2f+0x2b0>
 8009880:	3c01      	subs	r4, #1
 8009882:	ab08      	add	r3, sp, #32
 8009884:	3d08      	subs	r5, #8
 8009886:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d0f8      	beq.n	8009880 <__kernel_rem_pio2f+0x1e4>
 800988e:	4628      	mov	r0, r5
 8009890:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009894:	f7ff fe76 	bl	8009584 <scalbnf>
 8009898:	1c63      	adds	r3, r4, #1
 800989a:	aa44      	add	r2, sp, #272	@ 0x110
 800989c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800999c <__kernel_rem_pio2f+0x300>
 80098a0:	0099      	lsls	r1, r3, #2
 80098a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80098a6:	4623      	mov	r3, r4
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f280 80a9 	bge.w	8009a00 <__kernel_rem_pio2f+0x364>
 80098ae:	4623      	mov	r3, r4
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f2c0 80c7 	blt.w	8009a44 <__kernel_rem_pio2f+0x3a8>
 80098b6:	aa44      	add	r2, sp, #272	@ 0x110
 80098b8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80098bc:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8009994 <__kernel_rem_pio2f+0x2f8>
 80098c0:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80099a0 <__kernel_rem_pio2f+0x304>
 80098c4:	2000      	movs	r0, #0
 80098c6:	1ae2      	subs	r2, r4, r3
 80098c8:	e0b1      	b.n	8009a2e <__kernel_rem_pio2f+0x392>
 80098ca:	2602      	movs	r6, #2
 80098cc:	e78f      	b.n	80097ee <__kernel_rem_pio2f+0x152>
 80098ce:	f852 1b04 	ldr.w	r1, [r2], #4
 80098d2:	b948      	cbnz	r0, 80098e8 <__kernel_rem_pio2f+0x24c>
 80098d4:	b121      	cbz	r1, 80098e0 <__kernel_rem_pio2f+0x244>
 80098d6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80098da:	f842 1c04 	str.w	r1, [r2, #-4]
 80098de:	2101      	movs	r1, #1
 80098e0:	f10e 0e01 	add.w	lr, lr, #1
 80098e4:	4608      	mov	r0, r1
 80098e6:	e787      	b.n	80097f8 <__kernel_rem_pio2f+0x15c>
 80098e8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80098ec:	e7f5      	b.n	80098da <__kernel_rem_pio2f+0x23e>
 80098ee:	f104 3cff 	add.w	ip, r4, #4294967295
 80098f2:	aa08      	add	r2, sp, #32
 80098f4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80098f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80098fc:	a908      	add	r1, sp, #32
 80098fe:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8009902:	e781      	b.n	8009808 <__kernel_rem_pio2f+0x16c>
 8009904:	f104 3cff 	add.w	ip, r4, #4294967295
 8009908:	aa08      	add	r2, sp, #32
 800990a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800990e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8009912:	e7f3      	b.n	80098fc <__kernel_rem_pio2f+0x260>
 8009914:	a908      	add	r1, sp, #32
 8009916:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800991a:	3801      	subs	r0, #1
 800991c:	430a      	orrs	r2, r1
 800991e:	e7ab      	b.n	8009878 <__kernel_rem_pio2f+0x1dc>
 8009920:	3201      	adds	r2, #1
 8009922:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8009926:	2e00      	cmp	r6, #0
 8009928:	d0fa      	beq.n	8009920 <__kernel_rem_pio2f+0x284>
 800992a:	9905      	ldr	r1, [sp, #20]
 800992c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8009930:	eb0d 0001 	add.w	r0, sp, r1
 8009934:	18e6      	adds	r6, r4, r3
 8009936:	a91c      	add	r1, sp, #112	@ 0x70
 8009938:	f104 0c01 	add.w	ip, r4, #1
 800993c:	384c      	subs	r0, #76	@ 0x4c
 800993e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8009942:	4422      	add	r2, r4
 8009944:	4562      	cmp	r2, ip
 8009946:	da04      	bge.n	8009952 <__kernel_rem_pio2f+0x2b6>
 8009948:	4614      	mov	r4, r2
 800994a:	e70e      	b.n	800976a <__kernel_rem_pio2f+0xce>
 800994c:	9804      	ldr	r0, [sp, #16]
 800994e:	2201      	movs	r2, #1
 8009950:	e7e7      	b.n	8009922 <__kernel_rem_pio2f+0x286>
 8009952:	9903      	ldr	r1, [sp, #12]
 8009954:	f8dd e004 	ldr.w	lr, [sp, #4]
 8009958:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800995c:	9105      	str	r1, [sp, #20]
 800995e:	ee07 1a90 	vmov	s15, r1
 8009962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009966:	2400      	movs	r4, #0
 8009968:	ece6 7a01 	vstmia	r6!, {s15}
 800996c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80099a0 <__kernel_rem_pio2f+0x304>
 8009970:	46b1      	mov	r9, r6
 8009972:	455c      	cmp	r4, fp
 8009974:	dd04      	ble.n	8009980 <__kernel_rem_pio2f+0x2e4>
 8009976:	ece0 7a01 	vstmia	r0!, {s15}
 800997a:	f10c 0c01 	add.w	ip, ip, #1
 800997e:	e7e1      	b.n	8009944 <__kernel_rem_pio2f+0x2a8>
 8009980:	ecfe 6a01 	vldmia	lr!, {s13}
 8009984:	ed39 7a01 	vldmdb	r9!, {s14}
 8009988:	3401      	adds	r4, #1
 800998a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800998e:	e7f0      	b.n	8009972 <__kernel_rem_pio2f+0x2d6>
 8009990:	0800a3c0 	.word	0x0800a3c0
 8009994:	0800a394 	.word	0x0800a394
 8009998:	43800000 	.word	0x43800000
 800999c:	3b800000 	.word	0x3b800000
 80099a0:	00000000 	.word	0x00000000
 80099a4:	9b02      	ldr	r3, [sp, #8]
 80099a6:	eeb0 0a48 	vmov.f32	s0, s16
 80099aa:	eba3 0008 	sub.w	r0, r3, r8
 80099ae:	f7ff fde9 	bl	8009584 <scalbnf>
 80099b2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8009998 <__kernel_rem_pio2f+0x2fc>
 80099b6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80099ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099be:	db19      	blt.n	80099f4 <__kernel_rem_pio2f+0x358>
 80099c0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800999c <__kernel_rem_pio2f+0x300>
 80099c4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80099c8:	aa08      	add	r2, sp, #32
 80099ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80099ce:	3508      	adds	r5, #8
 80099d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099d4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80099d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80099dc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80099e0:	ee10 3a10 	vmov	r3, s0
 80099e4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80099e8:	ee17 3a90 	vmov	r3, s15
 80099ec:	3401      	adds	r4, #1
 80099ee:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80099f2:	e74c      	b.n	800988e <__kernel_rem_pio2f+0x1f2>
 80099f4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80099f8:	aa08      	add	r2, sp, #32
 80099fa:	ee10 3a10 	vmov	r3, s0
 80099fe:	e7f6      	b.n	80099ee <__kernel_rem_pio2f+0x352>
 8009a00:	a808      	add	r0, sp, #32
 8009a02:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8009a06:	9001      	str	r0, [sp, #4]
 8009a08:	ee07 0a90 	vmov	s15, r0
 8009a0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a10:	3b01      	subs	r3, #1
 8009a12:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009a16:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009a1a:	ed62 7a01 	vstmdb	r2!, {s15}
 8009a1e:	e743      	b.n	80098a8 <__kernel_rem_pio2f+0x20c>
 8009a20:	ecfc 6a01 	vldmia	ip!, {s13}
 8009a24:	ecb5 7a01 	vldmia	r5!, {s14}
 8009a28:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009a2c:	3001      	adds	r0, #1
 8009a2e:	4550      	cmp	r0, sl
 8009a30:	dc01      	bgt.n	8009a36 <__kernel_rem_pio2f+0x39a>
 8009a32:	4282      	cmp	r2, r0
 8009a34:	daf4      	bge.n	8009a20 <__kernel_rem_pio2f+0x384>
 8009a36:	a858      	add	r0, sp, #352	@ 0x160
 8009a38:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009a3c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8009a40:	3b01      	subs	r3, #1
 8009a42:	e735      	b.n	80098b0 <__kernel_rem_pio2f+0x214>
 8009a44:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	dc09      	bgt.n	8009a5e <__kernel_rem_pio2f+0x3c2>
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	dc2b      	bgt.n	8009aa6 <__kernel_rem_pio2f+0x40a>
 8009a4e:	d044      	beq.n	8009ada <__kernel_rem_pio2f+0x43e>
 8009a50:	f009 0007 	and.w	r0, r9, #7
 8009a54:	b059      	add	sp, #356	@ 0x164
 8009a56:	ecbd 8b04 	vpop	{d8-d9}
 8009a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a5e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8009a60:	2b03      	cmp	r3, #3
 8009a62:	d1f5      	bne.n	8009a50 <__kernel_rem_pio2f+0x3b4>
 8009a64:	aa30      	add	r2, sp, #192	@ 0xc0
 8009a66:	1f0b      	subs	r3, r1, #4
 8009a68:	4413      	add	r3, r2
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	2800      	cmp	r0, #0
 8009a70:	f1a2 0204 	sub.w	r2, r2, #4
 8009a74:	dc52      	bgt.n	8009b1c <__kernel_rem_pio2f+0x480>
 8009a76:	4622      	mov	r2, r4
 8009a78:	2a01      	cmp	r2, #1
 8009a7a:	f1a3 0304 	sub.w	r3, r3, #4
 8009a7e:	dc5d      	bgt.n	8009b3c <__kernel_rem_pio2f+0x4a0>
 8009a80:	ab30      	add	r3, sp, #192	@ 0xc0
 8009a82:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 80099a0 <__kernel_rem_pio2f+0x304>
 8009a86:	440b      	add	r3, r1
 8009a88:	2c01      	cmp	r4, #1
 8009a8a:	dc67      	bgt.n	8009b5c <__kernel_rem_pio2f+0x4c0>
 8009a8c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8009a90:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8009a94:	2e00      	cmp	r6, #0
 8009a96:	d167      	bne.n	8009b68 <__kernel_rem_pio2f+0x4cc>
 8009a98:	edc7 6a00 	vstr	s13, [r7]
 8009a9c:	ed87 7a01 	vstr	s14, [r7, #4]
 8009aa0:	edc7 7a02 	vstr	s15, [r7, #8]
 8009aa4:	e7d4      	b.n	8009a50 <__kernel_rem_pio2f+0x3b4>
 8009aa6:	ab30      	add	r3, sp, #192	@ 0xc0
 8009aa8:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 80099a0 <__kernel_rem_pio2f+0x304>
 8009aac:	440b      	add	r3, r1
 8009aae:	4622      	mov	r2, r4
 8009ab0:	2a00      	cmp	r2, #0
 8009ab2:	da24      	bge.n	8009afe <__kernel_rem_pio2f+0x462>
 8009ab4:	b34e      	cbz	r6, 8009b0a <__kernel_rem_pio2f+0x46e>
 8009ab6:	eef1 7a47 	vneg.f32	s15, s14
 8009aba:	edc7 7a00 	vstr	s15, [r7]
 8009abe:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8009ac2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009ac6:	aa31      	add	r2, sp, #196	@ 0xc4
 8009ac8:	2301      	movs	r3, #1
 8009aca:	429c      	cmp	r4, r3
 8009acc:	da20      	bge.n	8009b10 <__kernel_rem_pio2f+0x474>
 8009ace:	b10e      	cbz	r6, 8009ad4 <__kernel_rem_pio2f+0x438>
 8009ad0:	eef1 7a67 	vneg.f32	s15, s15
 8009ad4:	edc7 7a01 	vstr	s15, [r7, #4]
 8009ad8:	e7ba      	b.n	8009a50 <__kernel_rem_pio2f+0x3b4>
 8009ada:	ab30      	add	r3, sp, #192	@ 0xc0
 8009adc:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 80099a0 <__kernel_rem_pio2f+0x304>
 8009ae0:	440b      	add	r3, r1
 8009ae2:	2c00      	cmp	r4, #0
 8009ae4:	da05      	bge.n	8009af2 <__kernel_rem_pio2f+0x456>
 8009ae6:	b10e      	cbz	r6, 8009aec <__kernel_rem_pio2f+0x450>
 8009ae8:	eef1 7a67 	vneg.f32	s15, s15
 8009aec:	edc7 7a00 	vstr	s15, [r7]
 8009af0:	e7ae      	b.n	8009a50 <__kernel_rem_pio2f+0x3b4>
 8009af2:	ed33 7a01 	vldmdb	r3!, {s14}
 8009af6:	3c01      	subs	r4, #1
 8009af8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009afc:	e7f1      	b.n	8009ae2 <__kernel_rem_pio2f+0x446>
 8009afe:	ed73 7a01 	vldmdb	r3!, {s15}
 8009b02:	3a01      	subs	r2, #1
 8009b04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b08:	e7d2      	b.n	8009ab0 <__kernel_rem_pio2f+0x414>
 8009b0a:	eef0 7a47 	vmov.f32	s15, s14
 8009b0e:	e7d4      	b.n	8009aba <__kernel_rem_pio2f+0x41e>
 8009b10:	ecb2 7a01 	vldmia	r2!, {s14}
 8009b14:	3301      	adds	r3, #1
 8009b16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009b1a:	e7d6      	b.n	8009aca <__kernel_rem_pio2f+0x42e>
 8009b1c:	edd2 7a00 	vldr	s15, [r2]
 8009b20:	edd2 6a01 	vldr	s13, [r2, #4]
 8009b24:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009b28:	3801      	subs	r0, #1
 8009b2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b2e:	ed82 7a00 	vstr	s14, [r2]
 8009b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b36:	edc2 7a01 	vstr	s15, [r2, #4]
 8009b3a:	e798      	b.n	8009a6e <__kernel_rem_pio2f+0x3d2>
 8009b3c:	edd3 7a00 	vldr	s15, [r3]
 8009b40:	edd3 6a01 	vldr	s13, [r3, #4]
 8009b44:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009b48:	3a01      	subs	r2, #1
 8009b4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b4e:	ed83 7a00 	vstr	s14, [r3]
 8009b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b56:	edc3 7a01 	vstr	s15, [r3, #4]
 8009b5a:	e78d      	b.n	8009a78 <__kernel_rem_pio2f+0x3dc>
 8009b5c:	ed33 7a01 	vldmdb	r3!, {s14}
 8009b60:	3c01      	subs	r4, #1
 8009b62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009b66:	e78f      	b.n	8009a88 <__kernel_rem_pio2f+0x3ec>
 8009b68:	eef1 6a66 	vneg.f32	s13, s13
 8009b6c:	eeb1 7a47 	vneg.f32	s14, s14
 8009b70:	edc7 6a00 	vstr	s13, [r7]
 8009b74:	ed87 7a01 	vstr	s14, [r7, #4]
 8009b78:	eef1 7a67 	vneg.f32	s15, s15
 8009b7c:	e790      	b.n	8009aa0 <__kernel_rem_pio2f+0x404>
 8009b7e:	bf00      	nop

08009b80 <floorf>:
 8009b80:	ee10 3a10 	vmov	r3, s0
 8009b84:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009b88:	3a7f      	subs	r2, #127	@ 0x7f
 8009b8a:	2a16      	cmp	r2, #22
 8009b8c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009b90:	dc2b      	bgt.n	8009bea <floorf+0x6a>
 8009b92:	2a00      	cmp	r2, #0
 8009b94:	da12      	bge.n	8009bbc <floorf+0x3c>
 8009b96:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009bfc <floorf+0x7c>
 8009b9a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009b9e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ba6:	dd06      	ble.n	8009bb6 <floorf+0x36>
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	da24      	bge.n	8009bf6 <floorf+0x76>
 8009bac:	2900      	cmp	r1, #0
 8009bae:	4b14      	ldr	r3, [pc, #80]	@ (8009c00 <floorf+0x80>)
 8009bb0:	bf08      	it	eq
 8009bb2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8009bb6:	ee00 3a10 	vmov	s0, r3
 8009bba:	4770      	bx	lr
 8009bbc:	4911      	ldr	r1, [pc, #68]	@ (8009c04 <floorf+0x84>)
 8009bbe:	4111      	asrs	r1, r2
 8009bc0:	420b      	tst	r3, r1
 8009bc2:	d0fa      	beq.n	8009bba <floorf+0x3a>
 8009bc4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8009bfc <floorf+0x7c>
 8009bc8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009bcc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bd4:	ddef      	ble.n	8009bb6 <floorf+0x36>
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	bfbe      	ittt	lt
 8009bda:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8009bde:	fa40 f202 	asrlt.w	r2, r0, r2
 8009be2:	189b      	addlt	r3, r3, r2
 8009be4:	ea23 0301 	bic.w	r3, r3, r1
 8009be8:	e7e5      	b.n	8009bb6 <floorf+0x36>
 8009bea:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8009bee:	d3e4      	bcc.n	8009bba <floorf+0x3a>
 8009bf0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009bf4:	4770      	bx	lr
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	e7dd      	b.n	8009bb6 <floorf+0x36>
 8009bfa:	bf00      	nop
 8009bfc:	7149f2ca 	.word	0x7149f2ca
 8009c00:	bf800000 	.word	0xbf800000
 8009c04:	007fffff 	.word	0x007fffff

08009c08 <_init>:
 8009c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c0a:	bf00      	nop
 8009c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c0e:	bc08      	pop	{r3}
 8009c10:	469e      	mov	lr, r3
 8009c12:	4770      	bx	lr

08009c14 <_fini>:
 8009c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c16:	bf00      	nop
 8009c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c1a:	bc08      	pop	{r3}
 8009c1c:	469e      	mov	lr, r3
 8009c1e:	4770      	bx	lr
